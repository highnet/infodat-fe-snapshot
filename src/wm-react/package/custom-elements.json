{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "dist/js/components/Accordion/Accordion.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Accordion Komponente - Ein- und Ausklappbare Panels",
          "name": "Accordion",
          "cssProperties": [
            {
              "description": "Hintergrundfarbe des Buttons",
              "name": "--accordion-background-color"
            },
            {
              "description": "Hintergrundfarbe des Buttons Hover & Focus",
              "name": "--accordion-background-color--hover"
            },
            {
              "description": "Hintergrundfarbe des Panels",
              "name": "--accordion-panel-background-color"
            },
            {
              "description": "Schriftfarbe im Panel",
              "name": "--accordion-panel-font-color"
            },
            {
              "description": "Rahmen um den Button",
              "name": "--accordion-border"
            },
            {
              "description": "Schriftfarbe des Buttons",
              "name": "--accordion-font-color"
            },
            {
              "description": "Schriftfarbe des Buttons Hover & Focus",
              "name": "--accordion-font-color--hover"
            },
            {
              "description": "Kontrast-Hintergrundfarbe, zum Beispiel für Multimedia-Elemente",
              "name": "--accordion-contrast"
            },
            {
              "description": "Schriftstärke im Button",
              "name": "--accordion-font-weight"
            },
            {
              "description": "Innenabstand links und rechts",
              "name": "--accordion-padding-inline"
            },
            {
              "description": "Innenabstand oben",
              "name": "--accordion-padding-block-start"
            },
            {
              "description": "Innenabstand unten",
              "name": "--accordion-padding-block-end"
            },
            {
              "description": "Abstand zwischen Panels",
              "name": "--accordion-gap"
            }
          ],
          "slots": [
            {
              "description": "Nimmt Paare von wm-accordion-heading und wm-accordion-content Elementen auf",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_headings",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_openHeadings",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "properties",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ open: { type: Number, reflect: true }, expanded: { type: Boolean, reflect: true }, single: { type: Boolean, reflect: true }, }"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[ i` * { box-sizing: border-box; } :host { display: block; } `, ]"
            },
            {
              "kind": "method",
              "name": "firstUpdated"
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_updateChildren",
              "description": "Add attributes to children",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_addEvents",
              "description": "Add events",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_openOrClose",
              "parameters": [
                {
                  "name": "idx",
                  "default": "null",
                  "description": "0-based index of the element",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "name": "type",
                  "default": "\"open\"",
                  "description": "\"open\" or \"close\"",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_openOrCloseAll",
              "parameters": [
                {
                  "name": "open"
                },
                {
                  "name": "exception",
                  "default": "null"
                }
              ],
              "description": "Open or close all items",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_expandContent",
              "parameters": [
                {
                  "name": "heading"
                }
              ],
              "description": "Akkordeon wurde geöffnet",
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "kind": "method",
              "name": "_collapseContent",
              "parameters": [
                {
                  "name": "heading"
                }
              ],
              "description": "Akkordeon wurde geschlossen",
              "type": {
                "text": "CustomEvent"
              },
              "summary": "Index des ausgewählten Akkordeon Headings wm-accordion-heading"
            },
            {
              "kind": "method",
              "name": "expand",
              "parameters": [
                {
                  "name": "index"
                },
                {
                  "description": "index",
                  "name": "element",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Panel öffnen"
            },
            {
              "kind": "method",
              "name": "collapse",
              "parameters": [
                {
                  "name": "index"
                },
                {
                  "description": "index",
                  "name": "element",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Panel schließen"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "open",
              "description": "Nummer des zu öffnenden Panels angeben, beginnend bei eins (1). Es kann nur ein Wert übergeben werden.",
              "type": {
                "text": "Number"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "single",
              "type": {
                "text": "Boolean"
              },
              "description": "Attribut angeben, damit immer nur ein Panel gleichzeitig geöffnet wird (übertrumpft expanded).",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "expanded",
              "type": {
                "text": "Boolean"
              },
              "description": "Alle geöffnet anzeigen.",
              "default": "false"
            }
          ],
          "events": [
            {
              "name": "wm-defined",
              "type": {
                "text": "CustomEvent"
              },
              "description": "Web Component ist bereit"
            }
          ],
          "superclass": {
            "name": "s",
            "module": "/dist/js/lit-element-8bc32369.js"
          },
          "tagName": "wm-accordion",
          "customElement": true
        },
        {
          "kind": "variable",
          "name": "tagName",
          "type": {
            "text": "string"
          },
          "default": "\"wm-accordion\""
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "wm-accordion",
          "declaration": {
            "name": "Accordion",
            "module": "dist/js/components/Accordion/Accordion.js"
          }
        },
        {
          "kind": "js",
          "name": "Accordion",
          "declaration": {
            "name": "Accordion",
            "module": "dist/js/components/Accordion/Accordion.js"
          }
        },
        {
          "kind": "js",
          "name": "tagName",
          "declaration": {
            "name": "tagName",
            "module": "dist/js/components/Accordion/Accordion.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/Accordion/AccordionContent.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Accordion Content - Der Inhalt eines Accordion Panels",
          "name": "AccordionContent",
          "slots": [
            {
              "description": "HTML oder Text-Content",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_panel",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_panelInner",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[styles]"
            },
            {
              "kind": "method",
              "name": "_addEvents",
              "description": "Overflow is hidden on panels by default\nWait until the panel is open, than add a class to allow overflow of content",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "render"
            }
          ],
          "superclass": {
            "name": "s",
            "module": "/dist/js/lit-element-8bc32369.js"
          },
          "tagName": "wm-accordion-content",
          "customElement": true
        },
        {
          "kind": "variable",
          "name": "tagName",
          "type": {
            "text": "string"
          },
          "default": "\"wm-accordion-content\""
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "wm-accordion-content",
          "declaration": {
            "name": "AccordionContent",
            "module": "dist/js/components/Accordion/AccordionContent.js"
          }
        },
        {
          "kind": "js",
          "name": "AccordionContent",
          "declaration": {
            "name": "AccordionContent",
            "module": "dist/js/components/Accordion/AccordionContent.js"
          }
        },
        {
          "kind": "js",
          "name": "tagName",
          "declaration": {
            "name": "tagName",
            "module": "dist/js/components/Accordion/AccordionContent.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/Accordion/AccordionHeading.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Accordion Heading - Klickbare Überschrift für ein Accordion Panel",
          "name": "AccordionHeading",
          "slots": [
            {
              "description": "Der Slot für die Überschrift (h1-h6)",
              "name": "default"
            },
            {
              "description": "Ein Icon oder anderes Element vor der Überschrift",
              "name": "icon"
            },
            {
              "description": "Optionaler Zusatztext in der Headline, der nicht fett dargestellt wird",
              "name": "subheading"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_slottedChildren",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "properties",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ _headingContent: { type: String }, _headingLevel: { type: String }, expanded: { type: Boolean, reflect: true }, id: { type: String }, icon: { type: String }, }"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[styles]"
            },
            {
              "kind": "method",
              "name": "_getData",
              "description": "Retrieve accessible name and level from slotted heading"
            },
            {
              "kind": "method",
              "name": "_openOrClose",
              "description": "Open or close item and dispatch event accordingly",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_rerender",
              "description": "Get data from slotted content",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "_headingContent",
              "type": {
                "text": "string"
              },
              "description": "Textcontent of the slotted heading",
              "privacy": "private",
              "default": "\"\""
            },
            {
              "kind": "field",
              "name": "_headingLevel",
              "type": {
                "text": "string"
              },
              "description": "Default level of the heading",
              "privacy": "private",
              "default": "\"3\""
            },
            {
              "kind": "field",
              "name": "expanded",
              "type": {
                "text": "boolean"
              },
              "description": "Standardmäßig zeigen oder nicht",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "icon",
              "type": {
                "text": "string"
              },
              "description": "Angezeigtes Icon",
              "default": "\"chevron-up\""
            }
          ],
          "events": [
            {
              "name": "wm-contentchanged",
              "type": {
                "text": "CustomEvent"
              },
              "description": "Wenn ein Element hinzugefügt oder gelöscht worden ist."
            }
          ],
          "superclass": {
            "name": "s",
            "module": "/dist/js/lit-element-8bc32369.js"
          },
          "tagName": "wm-accordion-heading",
          "customElement": true
        },
        {
          "kind": "variable",
          "name": "tagName",
          "type": {
            "text": "string"
          },
          "default": "\"wm-accordion-heading\""
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "wm-accordion-heading",
          "declaration": {
            "name": "AccordionHeading",
            "module": "dist/js/components/Accordion/AccordionHeading.js"
          }
        },
        {
          "kind": "js",
          "name": "AccordionHeading",
          "declaration": {
            "name": "AccordionHeading",
            "module": "dist/js/components/Accordion/AccordionHeading.js"
          }
        },
        {
          "kind": "js",
          "name": "tagName",
          "declaration": {
            "name": "tagName",
            "module": "dist/js/components/Accordion/AccordionHeading.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/BreakingNews/BreakingNews.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Der Breaking News-Banner ist auf ganz wien.gv.at sichtbar und außergewöhnlichen Ereignissen vorbehalten.",
          "name": "BreakingNews",
          "cssProperties": [
            {
              "description": "Hintergrundfarbe",
              "name": "--breakingnews-background-color"
            },
            {
              "description": "Schriftfarbe",
              "name": "--breakingnews-font-color"
            },
            {
              "description": "Schriftgröße",
              "name": "--breakingnews-font-size"
            }
          ],
          "slots": [
            {
              "description": "Text",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "properties",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ id: { type: String, reflect: true }, type: { type: String, reflect: true }, title: { type: String, reflect: true }, sticky: { type: Boolean, reflect: true }, closeText: { type: String, reflect: true } }"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[styles]"
            },
            {
              "kind": "method",
              "name": "_close",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "'warning'|'error'|'success'"
              },
              "description": "Art der Meldung",
              "default": "'warning'"
            },
            {
              "kind": "field",
              "name": "title",
              "type": {
                "text": "String"
              },
              "description": "Bezeichnung der Meldung",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "id",
              "type": {
                "text": "String"
              },
              "description": "Einzigartige ID",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "sticky",
              "type": {
                "text": "Boolean"
              },
              "description": "Erkennt automatisch, ob sich der Banner sticky verhält.",
              "default": "true"
            },
            {
              "kind": "field",
              "name": "closeText",
              "type": {
                "text": "String"
              },
              "description": "Text für den Schließen Button, default ist \"Schließen\".",
              "default": "'Schließen'"
            }
          ],
          "superclass": {
            "name": "s",
            "module": "/dist/js/lit-element-8bc32369.js"
          },
          "summary": "Button/Button",
          "tagName": "wm-breakingnews",
          "customElement": true
        },
        {
          "kind": "variable",
          "name": "tagName",
          "type": {
            "text": "string"
          },
          "default": "'wm-breakingnews'"
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "wm-breakingnews",
          "declaration": {
            "name": "BreakingNews",
            "module": "dist/js/components/BreakingNews/BreakingNews.js"
          }
        },
        {
          "kind": "js",
          "name": "BreakingNews",
          "declaration": {
            "name": "BreakingNews",
            "module": "dist/js/components/BreakingNews/BreakingNews.js"
          }
        },
        {
          "kind": "js",
          "name": "tagName",
          "declaration": {
            "name": "tagName",
            "module": "dist/js/components/BreakingNews/BreakingNews.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/Button/Button.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Link oder Button im Wiener Melange Style.",
          "name": "Button",
          "cssProperties": [
            {
              "description": "Hintergrundfarbe",
              "name": "--button-background-color"
            },
            {
              "description": "Hintergrundfarbe Hover & Focus",
              "name": "--button-background-color--hover"
            },
            {
              "description": "Rahmenfarbe",
              "name": "--button-border-color"
            },
            {
              "description": "Rahmenfarbe Hover & Focus",
              "name": "--button-border-color--hover"
            },
            {
              "description": "Schriftfarbe",
              "name": "--button-font-color"
            },
            {
              "description": "Schriftfarbe Hover & Focus",
              "name": "--button-font-color--hover"
            },
            {
              "description": "Gap innerhalb",
              "name": "--button-gap"
            },
            {
              "description": "Groß-/Kleinschreibung",
              "name": "--button-text-transform"
            },
            {
              "description": "Hintergrundfarbe von Optionen in Auto-Suggest",
              "name": "--button-option-background-color"
            },
            {
              "description": "Hintergrundfarbe von Optionen",
              "name": "--button-menu-background-color"
            },
            {
              "description": "Abstand horizontal zwischen Button und Menü",
              "name": "--button-menu-inline-offset"
            },
            {
              "description": "Abstand vertikal zwischen Button und Menü",
              "name": "--button-menu-block-offset"
            },
            {
              "description": "Schatten von Optionen",
              "name": "--button-menu-shadow"
            },
            {
              "description": "Vertikaler Innenabstand",
              "name": "--button-padding-block"
            },
            {
              "description": "Horizontaler Innenabstand",
              "name": "--button-padding-inline"
            },
            {
              "description": "Minimale Höhe",
              "name": "--button-min-height"
            },
            {
              "description": "Minimale Breite",
              "name": "--button-min-width"
            },
            {
              "description": "undefined",
              "name": "--button-active"
            }
          ],
          "slots": [
            {
              "description": "Link oder Button",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_button",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_menu",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_elements",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "properties",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ _keyShortcuts: { type: Object }, _selected: { type: Number }, copy: { type: String, reflect: true }, open: { type: Boolean, reflect: true }, menu: { type: String, reflect: true }, justify: { type: String, reflect: true }, color: { type: String, reflect: true }, kind: { type: String, reflect: true }, full: { type: String, reflect: true }, round: { type: Boolean, reflect: true }, size: { type: String, reflect: true }, width: { type: String, reflect: true }, }"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "[i` :host { --wm-theme-content-font-weight: unset; --wm-theme-content-font-variation-settings: var(--wm-font-weight-bold); --button-font-size: var(--wm-font-size-s, 1rem); --button-padding-block: var(--wm-button-padding-block, 0.5em); --button-padding-inline: var(--wm-button-padding-inline, 1em); --button-min-height: var(--wm-button-min-height, 2.5em); --button-min-width: var(--wm-button-min-width, auto); display: inline-block; line-height: 1; } :host ::slotted(:is(button, a)) { display: flex; justify-content: center; gap: var(--button-gap) !important; cursor: pointer; /* test if this is still needed?*/ /* padding: var(--button-padding-block) var(--button-padding-inline) !important; min-height: var(--button-min-height) !important; min-width: var(--button-min-width) !important; */ } /* Active state for buttons */ :host ::slotted(:is(button:active, a:active)) { transform: var(--button-active-transform); filter: var(--button-active-filter); } /* Disabled buttons */ ::slotted(button:is([aria-disabled=\"true\"], [disabled])) { opacity: 0.5; pointer-events: none; } :host([kind=\"tertiary\"]) ::slotted(button:is(:hover, :focus-visible)) { text-decoration: none !important; } /* Clean Buttons */ :host([kind=\"clean\"]) ::slotted(:is(button, a)) { all: unset !important; align-items: center !important; cursor: pointer !important; display: inline-flex !important; gap: var(--button-gap) !important; line-height: 1.45 !important; outline: revert !important; box-sizing: border-box !important; font-size: var(--button-font-size, 1rem) !important; } /* Clean Buttons active state */ :host([kind=\"clean\"]) ::slotted(:is(button:active, a:active)) { transform: var(--button-active-transform); opacity: 0.8; } :host([kind=\"clean\"]) ::slotted(button:focus-visible) { outline-offset: var(--wm-theme-site-focus-outline-offset) !important; outline: var(--_button-focus-outline, var(--wm-theme-site-focus-outline)) !important; } :host([round]) { position: relative; } :host([round])::before { content: ''; position: absolute; top: -8px; bottom: -8px; left: -8px; cursor: pointer; } :host([round]) ::slotted(:is(button, a)) { border-radius: 50%; padding: 0.1rem !important; } /* Tag buttons active state */ :host([kind=\"tag\"]) ::slotted(:is(button:active, a:active)) { transform: var(--button-active-transform); filter: var(--button-active-filter); } :host([kind=\"tag\"]) ::slotted(:is(button, a)) { border-radius: 30px; --button-text-transform: none; } :host([justify=\"center\"]) ::slotted(:is(button, a)) { justify-content: center !important; } :host([justify=\"space-between\"]) ::slotted(:is(button, a)) { justify-content: space-between !important; } :host([size=\"xs\"]) { --button-font-size: 0.85rem; --button-padding-block: 0.2em; --button-padding-inline: 0.4em; --button-min-height: 1.8em; --wm-theme-content-font-weight: normal; } :host([size=\"xs\"]) ::slotted(:is(button, a)) { font-variation-settings: var(--wm-theme-content-font-weight) !important; text-transform: none !important; } :host([size=\"s\"]) { --button-font-size: 0.95rem; --button-padding-block: 0.4em; --button-padding-inline: 0.8em; --button-min-height: 2em; } :host([size=\"l\"]) { --button-font-size: 1.1rem; --button-padding-block: 1.15em; --button-padding-inline: 2.7em; --button-min-width: 25rem; } :host([size=\"l\"]) ::slotted(:is(button, a)) { max-width: 25rem !important; /* Maintain backwards compatibility */ text-transform: none !important; width: 100% !important; } /* Full width Buttons */ :host([full]) { display: block; } :host([full=\"s\"]), :host([full=\"m\"]) { display: inline-block; } :host([full]) ::slotted(:is(button, a)) { max-width:100% !important; width:100% !important; } @media (max-width: 32.5rem) { :host([full=\"s\"]) { display: block; } :host([full=\"s\"]) ::slotted(:is(button, a)) { width:100% !important; } } @media (max-width: 48rem) { :host([full=\"m\"]) { display: block; } :host([full=\"m\"]) ::slotted(:is(button, a)) { width:100% !important; } } :host([round]) ::slotted(:is(button, a)) { border-radius: 50%; min-width: 2rem; padding: 0 !important; aspect-ratio: 1; position: relative; z-index: 1; } :host([menu]) { display: inline-block; position: relative; } ::slotted(ul) { background-color: var(--button-menu-background-color); box-shadow: var(--button-menu-shadow); display: none; left: var(--button-menu-inline-offset, 0); list-style: none; margin: 0; padding: 0 !important; position: absolute; } :host([menu][open]) ::slotted(ul) { display: block; white-space: nowrap; } :host([menu]) ::slotted(ul), :host([menu*=\"block-start\"]) ::slotted(ul) { bottom: calc(100% + var(--button-menu-block-offset)); } :host([menu*=\"block-end\"]) ::slotted(ul) { top: calc(100% + var(--button-menu-block-offset)); bottom: auto; } :host([menu*=\"inline-end\"]) ::slotted(ul) { right: var(--button-menu-inline-offset, 0); left: auto; } `]",
              "type": {
                "text": "array"
              }
            },
            {
              "kind": "method",
              "name": "_setUpMenu",
              "description": "Add attributes and events to dropdown menus",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_setUpMenuList",
              "parameters": [
                {
                  "name": "id"
                }
              ],
              "description": "Turn list into aria menu and adapt items",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_toggleMenu",
              "description": "Open or close dropdown menu",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_setUpMenuButton",
              "parameters": [
                {
                  "name": "id"
                }
              ],
              "description": "Add ARIA roles and event to dropdown menu button",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_addEvents",
              "description": "Add ARIA roles and event to dropdown menu button",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleClick",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_copyContent",
              "description": "Copy either the value of an element or the textcontent",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_clickOutSide",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_getMenuPosition",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "firstUpdated"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "kind",
              "description": "Art des Buttons",
              "type": {
                "text": "'clean'|'primary'|'secondary'|'tag'|'tertiary'"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "full",
              "description": "Button über die volle Breite darstellen. Immer oder bis 512px (s) oder 768px (m)",
              "type": {
                "text": "'s'|'m'|'always'"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "justify",
              "description": "Inhalt im Button ausrichten",
              "type": {
                "text": "'center'|'space-between'"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "color",
              "description": "Hintergrundfarbe des Buttons",
              "type": {
                "text": "'abendstimmung'|'flieder'|'frischgruen'|'goldgelb'|'morgenrot'|'nebelgrau'|'wasserblau'"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "size",
              "description": "Größe (üblicherweise Schriftgröße und Innenabstand) des Buttons",
              "type": {
                "text": "'xs'|'s'|'m'|'l'"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "menu",
              "description": "Positionierung des Menüs. block-* und inline-* können kombiniert werden.<br>Wenn das Attribut ohne Wert definiert oder nur eine Liste vorhanden ist, wird defaultmäßig block-start und inline-start genommen.",
              "type": {
                "text": "'block-start'|'block-end'|'inline-start'|'inline-end'"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "_selected",
              "type": {
                "text": "Number"
              },
              "description": "Currently selected option in dropdown menus",
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "Boolean"
              },
              "description": "Dropdown, wenn vorhanden, geöffnet oder nicht",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "round",
              "type": {
                "text": "Boolean"
              },
              "description": "Button rund darstellen",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "width",
              "description": "Mindestbreite des Buttons",
              "type": {
                "text": "'s'"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "_keyShortcuts",
              "type": {
                "text": "Object"
              },
              "description": "List of single alphabethic key shortcuts",
              "privacy": "private",
              "default": "{}"
            },
            {
              "kind": "field",
              "name": "copy",
              "description": "Selektor für das Element, dessen Inhalt kopiert werden soll",
              "default": "undefined"
            }
          ],
          "superclass": {
            "name": "s",
            "module": "/dist/js/lit-element-8bc32369.js"
          },
          "summary": "Icon/Icon",
          "tagName": "wm-button",
          "customElement": true
        },
        {
          "kind": "variable",
          "name": "tagName",
          "type": {
            "text": "string"
          },
          "default": "\"wm-button\""
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "wm-button",
          "declaration": {
            "name": "Button",
            "module": "dist/js/components/Button/Button.js"
          }
        },
        {
          "kind": "js",
          "name": "Button",
          "declaration": {
            "name": "Button",
            "module": "dist/js/components/Button/Button.js"
          }
        },
        {
          "kind": "js",
          "name": "tagName",
          "declaration": {
            "name": "tagName",
            "module": "dist/js/components/Button/Button.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/CTA/CTA.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Komponente zur Darstellung CTA Links oder Button, die aussehen wie Links.",
          "name": "CTA",
          "cssProperties": [
            {
              "description": "Icon neben dem Text rechts",
              "name": "--cta-icon"
            },
            {
              "description": "Icon neben dem Text links",
              "name": "--cta-icon-start"
            },
            {
              "description": "Standard :link Farbe",
              "name": "--cta-link-color"
            },
            {
              "description": "Standard :visited Farbe",
              "name": "--cta-link-color--visited"
            },
            {
              "description": "Schriftstärke für WM Variablefont",
              "name": "--cta-font-variation-settings"
            },
            {
              "description": "Standard-Schriftstärke",
              "name": "--cta-font-weight"
            },
            {
              "description": "Innenabstand x-Achse",
              "name": "--cta-padding-inline"
            },
            {
              "description": "Innenabstand y-Achse",
              "name": "--cta-padding-block"
            },
            {
              "description": "Linkunterstreichung",
              "name": "--cta-text-decoration"
            }
          ],
          "slots": [
            {
              "description": "Link oder Button",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "properties",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ align: { type: String, reflect: true }, full: { type: Boolean, reflect: true }, start: { type: Boolean, reflect: true }, clean: { type: Boolean, reflect: true }, }"
            },
            {
              "kind": "method",
              "name": "createRenderRoot",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "align",
              "description": "Textausrichtung",
              "type": {
                "text": "'end'"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "full",
              "type": {
                "text": "Boolean"
              },
              "description": "Über die volle Breite anzeigen",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "start",
              "type": {
                "text": "Boolean"
              },
              "description": "Pfeil auf der linken Seite",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "clean",
              "type": {
                "text": "Boolean"
              },
              "description": "Stärke der Schrift zurücksetzen (normal statt fett)",
              "default": "false"
            }
          ],
          "superclass": {
            "name": "s",
            "module": "/dist/js/lit-element-8bc32369.js"
          },
          "tagName": "wm-cta",
          "customElement": true
        },
        {
          "kind": "variable",
          "name": "tagName",
          "type": {
            "text": "string"
          },
          "default": "\"wm-cta\""
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "wm-cta",
          "declaration": {
            "name": "CTA",
            "module": "dist/js/components/CTA/CTA.js"
          }
        },
        {
          "kind": "js",
          "name": "CTA",
          "declaration": {
            "name": "CTA",
            "module": "dist/js/components/CTA/CTA.js"
          }
        },
        {
          "kind": "js",
          "name": "tagName",
          "declaration": {
            "name": "tagName",
            "module": "dist/js/components/CTA/CTA.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/Card/Card.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Komponente zur Darstellung von Inhalten als Card.",
          "name": "Card",
          "cssProperties": [
            {
              "description": "Hintergrundfarbe der Card",
              "name": "--card-background-color"
            },
            {
              "description": "Rahmen der Card",
              "name": "--card-border"
            },
            {
              "description": "Abstand des Störers zum Rand",
              "name": "--card-eyecatcher-spacing"
            },
            {
              "description": "Innenabstand im Störer",
              "name": "--card-eyecatcher-padding"
            },
            {
              "description": "Schriftgröße im Störer",
              "name": "--card-eyecatcher-font-size"
            },
            {
              "description": "Ausrichtung im Card-Header",
              "name": "--card-header-justify"
            },
            {
              "description": "Innenabstand im Card-Header",
              "name": "--card-header-padding"
            },
            {
              "description": "Hintergrundfarbe Media-Element",
              "name": "--card-media-background-color"
            },
            {
              "description": "Textfarbe Media-Element",
              "name": "--card-media-font-color"
            },
            {
              "description": "Innenabstand in der Card (Mobilansicht unter 64em)",
              "name": "--card-spacing--mobil"
            },
            {
              "description": "Innenabstand in der Card (Desktopansicht ab 64em)",
              "name": "--card-spacing--desktop"
            },
            {
              "description": "Schatten um die Card",
              "name": "--card-shadow"
            },
            {
              "description": "Schatten um die Card bei Fokus und Hover",
              "name": "--card-shadow--hover"
            }
          ],
          "slots": [
            {
              "description": "Überschrift",
              "name": "heading"
            },
            {
              "description": "Bild oder Video",
              "name": "media"
            },
            {
              "description": "Störer",
              "name": "eyecatcher"
            },
            {
              "description": "Inhalt der Card",
              "name": "content"
            },
            {
              "description": "Zusätzlicher Inhalt am Anfang der Card, zum Beispiel Chip",
              "name": "precontent"
            },
            {
              "description": "Zusätzlicher Inhalt am Ende der Card, zum Beispiel Tags",
              "name": "postcontent"
            },
            {
              "description": "Inhalt für die Rückseite der Flip-Card",
              "name": "flip"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_flipShow",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_flipSide",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "properties",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ size: { type: String, reflect: true }, _hasMedia: { type: String, attribute: false }, _flipcard: { type: Boolean }, flipcardlabel: { type: String }, flipcardicon: { type: String }, flipped: { type: Boolean, reflect: true }, blocklink: { type: Boolean, reflect: true }, canvas: { type: Boolean, reflect: true }, video: { type: Boolean, reflect: true }, color: { type: String, reflect: true }, position: { type: String, reflect: true }, eyecatcher: { type: String }, }"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "[ i` * { box-sizing: border-box; } :host { --_spacing: var(--card-spacing--mobil); --_grid-columns: var(--_spacing) 1fr var(--_spacing); --_grid-rows: repeat(4, min-content) 1fr; } :host([flipped]) .card-inner { transform: rotateY(180deg); } .card-inner { align-content: start; background-color: var(--card-background-color); border: var(--card-border); box-shadow: var(--card-shadow); display: grid; block-size: 100%; grid-template-columns: var(--_grid-columns); grid-template-rows: var(--_grid-rows); outline: 1px solid transparent; padding-top: var(--_spacing); padding-bottom: var(--_spacing); position: relative; transition: transform 0.8s, box-shadow ease-in-out 0.3s; transform-style: preserve-3d; } @media print { .card-inner { padding: var(--_spacing); display: block; } } /* hover syles for card */ :host([blocklink]) .card-inner:is(:hover, :focus-within) { box-shadow: var(--card-shadow--hover); transition: box-shadow 0.3s ease-in-out; } :host([blocklink]) .video { background-color: var(--wm-color-ui-interactive); color: var(--wm-color-weiss); } /* hover styles for card with video */ :host([blocklink]) .card-inner:is(:hover, :focus-within) .video wm-icon { transform: scale(1.05); transition: transform 0.3s ease-in-out; } ::slotted(:is(img, picture)) { display: block; height: 100% !important; object-fit: cover; width: 100%; } ::slotted(*) { grid-column: 2; min-width: 0; } ::slotted(:is(img, picture)), ::slotted(div[slot]) { margin: 0 !important; } ::slotted(:is(h1, h2, h3, h4)) { -webkit-hyphens: auto; hyphens: auto; } .header { background-color: inherit; align-items: normal; display: flex; grid-column: 2; grid-row: 3; justify-content: var(--card-header-justify); z-index: 1; padding: var(--card-header-padding); } .media { aspect-ratio: 16 / 9; grid-column: 1 / -1; grid-row: 1; margin-bottom: var(--_spacing); margin-top: calc(var(--_spacing) * -1); position: relative; } .content ::slotted(*:not(:last-of-type)) { margin-bottom: var(--_spacing) !important; } .content { background-color: inherit; grid-column: 2; grid-row: 4; } .content-with-link { z-index: 2; } .precontent { grid-column: 2; grid-row: 2; margin-bottom: 0.5em; z-index: 1; } .postcontent { grid-column: 2; grid-row: -1; z-index: 1; } .flip { background-color: inherit; block-size: 100%; inline-size: 100%; grid-column: 2 / -2; grid-row: 1 / -1; z-index: 1; transition: transform 0.8s ease-in-out; } @media not print { .flip { transform: translateZ(-1px) rotateY(180deg); } } .flip:focus-visible { outline: var(--wm-theme-site-focus-outline); } .flip-header { display: flex; justify-content: flex-end; padding-block: 0.7rem; } @media print { .flip-header { display: none; } } .eyecatcher { background: var(--card-media-background-color); color: var(--card-media-font-color); font-size: var(--card-eyecatcher-font-size); font-weight: normal; padding: 0 var(--card-eyecatcher-padding); position: absolute; } :host(:not([position])) .eyecatcher { bottom: var(--card-eyecatcher-spacing); right: 0; } :host([position*=\"block-end\"]) .eyecatcher { bottom: var(--card-eyecatcher-spacing); } :host([position*=\"block-start\"]) .eyecatcher { top: var(--card-eyecatcher-spacing); } :host([position*=\"inline-start\"]) .eyecatcher { left: 0; } :host([position*=\"inline-end\"]) .eyecatcher { right: 0; } :host([position*=\"inline-start\"][eyecatcher=\"round\"]) .eyecatcher { left: var(--card-eyecatcher-spacing); } :host([position*=\"inline-end\"][eyecatcher=\"round\"]) .eyecatcher { right: var(--card-eyecatcher-spacing); } .video { background: var(--card-media-background-color); color: var(--card-media-font-color); position: absolute; left: 50%; top: 50%; transform: translate(-50%, -50%); display: flex !important; justify-content: center !important; align-items: center !important; width: 3.5em; height: 3.5em; border-radius: 50%; padding: 0; } :host([eyecatcher=\"round\"]) .eyecatcher { align-items: center; border-radius: 50%; display: flex; height: 3.5em; justify-content: center; padding: 0; transform: rotate(-20deg); width: 3.5em; } :host([canvas]) .media ::slotted(:is(h2, h3)) { margin: 0 !important; } :host([canvas]) .media { --_align-items: center; --_justify-content: center; --_text-align: center; align-items: var(--_align-items); background-color: var(--card-media-background-color); color: var(--card-media-font-color); display: flex; justify-content: var(--_justify-content); padding: var(--_spacing); text-align: var(--_text-align); } :host([canvas][position]) .media { --_text-align: start; } :host([canvas][position*=\"block-end\"]) .media { --_align-items: end; } :host([canvas][position*=\"block-start\"]) .media { --_align-items: start; } :host([canvas][position*=\"inline-end\"]) .media { --_justify-content: end; } :host([canvas][position*=\"inline-start\"]) .media { --_justify-content: start; } @media (min-width: 64em) { :host(:not([size=\"s\"])) { --_spacing: var(--card-spacing--desktop); } :host([size=\"full-responsive\"]) { --_grid-columns: 1fr 1fr; --_spacing: var(--card-spacing--desktop); --_min-height: 18rem; } :host([size=\"full-responsive\"]) .card-inner { --_media-col: 1 / 2; --_media-pos: 0; --_content-col: 2; column-gap: var(--_spacing); padding: var(--_spacing); min-height: var(--_min-height); } :host([size=\"full-responsive\"]) .media { grid-column: var(--_media-col); grid-row: 1; position: absolute; right: var(--_media-pos); top: calc(var(--_spacing) * -1); height: calc(100% + var(--_spacing)); width: calc(100% + var(--_spacing)); margin: 0; min-height: var(--_min-height); } :host([size=\"full-responsive\"]) .precontent { grid-column: var(--_content-col); grid-row: 1; } :host([size=\"full-responsive\"]) .header { grid-column: var(--_content-col); grid-row: auto; } :host([size=\"full-responsive\"][size=\"inline-end\"]) .header { grid-column: var(--_content-col); } :host([size=\"full-responsive\"]) .content { grid-column: var(--_content-col); grid-row: auto; } :host([size=\"full-responsive\"]) .postcontent { grid-column: var(--_content-col); } @container style(--card-style: reverse) { :host([size=\"full-responsive\"]) .card-inner { --_content-col: 1; --_media-col: -1 / 2; --_media-pos: calc(var(--_spacing) * -1); } } } @media print { .card-inner { box-shadow: none; padding: 0; } .media { margin-top: 0 !important; } :host([canvas]) .media { aspect-ratio: auto; background-color: transparent; padding: 0; } `, ]",
              "type": {
                "text": "array"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "description": "If there's an image, link the entire Card."
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_onFlip",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_flipTheCard",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "size",
              "description": "Gibt die Maximalbreite der Card an.",
              "type": {
                "text": "'s'|'m'|'l'|'full'|'full-responsive'"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "eyecatcher",
              "description": "Gibt die Art des Störers in der Card an.",
              "type": {
                "text": "'default'|'round'"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "position",
              "description": "Gibt die Position des Textes in der Canvas-Card oder des Störers an.",
              "type": {
                "text": "'block-start'|'block-end'|'inline-start'|'inline-end'"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "color",
              "description": "Gibt die Farbe der Canvas-Card oder des Störers an",
              "type": {
                "text": "'abendstimmung'|'abendstimmung-light'|'flieder'|'flieder-light'|'frischgruen'|'frischgruen-light'|'goldgelb'|'goldgelb-light'|'morgenrot'|'morgenrot-light'|'nebelgrau'|'nebelgrau-light'|'wasserblau'|'wasserblau-light'"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "blocklink",
              "type": {
                "text": "Boolean"
              },
              "description": " Gesamte Card verlinken.",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "canvas",
              "type": {
                "text": "Boolean"
              },
              "description": "Cards mit Hintergrundfarbe",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_hasMedia",
              "type": {
                "text": "null"
              },
              "privacy": "private",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "_flipcard",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "flipcardlabel",
              "type": {
                "text": "String"
              },
              "description": "Label des Flipcard Buttons",
              "default": "\"Teilen\""
            },
            {
              "kind": "field",
              "name": "flipcardicon",
              "type": {
                "text": "String"
              },
              "description": "Icon im Flipcard Button",
              "default": "\"embed\""
            },
            {
              "kind": "field",
              "name": "flipped",
              "type": {
                "text": "Boolean"
              },
              "description": "Es soll eine Flip-Card umgedreht gezeigt werden.",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "video",
              "type": {
                "text": "Boolean"
              },
              "description": "Es soll ein Video Icon gezeigt werden.",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_slotController",
              "description": "Slotcontroller",
              "type": {
                "text": "class"
              },
              "privacy": "private",
              "default": "new SlotController(this)"
            },
            {
              "kind": "field",
              "name": "_contentHasLinks",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            }
          ],
          "events": [
            {
              "name": "wm-card-flipped",
              "type": {
                "text": "CustomEvent"
              },
              "description": "Karte wurde geflipped"
            }
          ],
          "superclass": {
            "name": "s",
            "module": "/dist/js/lit-element-8bc32369.js"
          },
          "summary": "Button/Button, Icon/Icon",
          "tagName": "wm-card",
          "customElement": true
        },
        {
          "kind": "variable",
          "name": "tagName",
          "type": {
            "text": "string"
          },
          "default": "\"wm-card\""
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "wm-card",
          "declaration": {
            "name": "Card",
            "module": "dist/js/components/Card/Card.js"
          }
        },
        {
          "kind": "js",
          "name": "Card",
          "declaration": {
            "name": "Card",
            "module": "dist/js/components/Card/Card.js"
          }
        },
        {
          "kind": "js",
          "name": "tagName",
          "declaration": {
            "name": "tagName",
            "module": "dist/js/components/Card/Card.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/Anchor/Anchor.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Ein Anker ist ein Link zu einer Überschrift oder einem Text weiter unten auf derselben oder einer anderen Seite.",
          "name": "Anchor",
          "cssProperties": [
            {
              "description": "Abstand zwischen Text und Link",
              "name": "--anchor-gap"
            }
          ],
          "slots": [
            {
              "description": "h2, h3, h4, h5, oder h6",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_heading",
              "description": "Heading passed through light DOM",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_copyLink",
              "description": "Link to copy the current URL",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_output",
              "description": "Live region in the page",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_anchors",
              "description": "All anchors on the page",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "properties",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ _id: { type: String, attribute: false }, copyText: { type: String }, successText: { type: String }, id: { type: String }, icon: { type: String }, }"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "[i` * { box-sizing: border-box; } :host { align-items: center; display: flex; flex-wrap: wrap; gap: var(--anchor-gap); } ::slotted(*) { margin-bottom: 0 !important; } wm-icon { display: block; } :focus-visible { outline: var(--wm-theme-site-focus-outline); } ::slotted(input) { position: absolute; white-space: nowrap; width: 1px; height: 1px; overflow: hidden; clip-path: inset(50%); margin: -1px; } `]",
              "type": {
                "text": "array"
              }
            },
            {
              "kind": "method",
              "name": "_generateID",
              "description": "Get the exisiting id of the heading or generate a unique id",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "String"
                }
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Lifecycle method",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_copyText",
              "description": "This is a private asynchronous method '_copyText' in the 'Anchor' class.\r\nIt copies the current window's URL to the clipboard.\r\nIf the '_copyLink' property is set, it focuses on that element.\r\nIf the '_output' property is set, it changes its text content to the success message.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_addAnchor",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "copyText",
              "type": {
                "text": "String"
              },
              "description": "Text für das \"Link kopieren\" Icon. [TEXT] wird automatisch durch die Überschrift ersetzt.",
              "default": "\"Link zu [TEXT] kopieren\""
            },
            {
              "kind": "field",
              "name": "successText",
              "type": {
                "text": "String"
              },
              "description": "Text für die Meldung nachdem der Link kopiert worden ist.",
              "default": "\"Link erfolgreich kopiert\""
            },
            {
              "kind": "field",
              "name": "icon",
              "type": {
                "text": "String"
              },
              "description": "Icon für den \"Link kopieren\"-Link",
              "default": "\"link\""
            },
            {
              "kind": "field",
              "name": "id",
              "description": "Die ID kann entweder auf dem Element selber oder der Überschrift vergeben werden.",
              "type": {
                "text": "String"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "_id",
              "type": {
                "text": "String"
              },
              "description": "Generierte ID",
              "privacy": "private",
              "default": "\"\""
            }
          ],
          "superclass": {
            "name": "s",
            "module": "/dist/js/lit-element-8bc32369.js"
          },
          "summary": "Icon/Icon",
          "tagName": "wm-anchor",
          "customElement": true
        },
        {
          "kind": "variable",
          "name": "tagName",
          "type": {
            "text": "string"
          },
          "default": "\"wm-anchor\""
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "wm-anchor",
          "declaration": {
            "name": "Anchor",
            "module": "dist/js/components/Anchor/Anchor.js"
          }
        },
        {
          "kind": "js",
          "name": "Anchor",
          "declaration": {
            "name": "Anchor",
            "module": "dist/js/components/Anchor/Anchor.js"
          }
        },
        {
          "kind": "js",
          "name": "tagName",
          "declaration": {
            "name": "tagName",
            "module": "dist/js/components/Anchor/Anchor.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/Badge/Badge.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Badges sind Hervorhebungen in Großbuchstaben, um wichtige Hinweise auf den ersten Blick sichtbar zu machen.",
          "name": "Badge",
          "cssProperties": [
            {
              "description": "Farbe für Erfolg-Badge",
              "name": "--badge-color-success"
            },
            {
              "description": "Farbe für Error-Badge",
              "name": "--badge-color-error"
            },
            {
              "description": "Schriftstärke für WM Variablefont",
              "name": "--badge-font-variation-settings"
            },
            {
              "description": "Standard-Schriftstärke",
              "name": "--badge-font-weight"
            },
            {
              "description": "Gap innerhalb",
              "name": "--badge-gap"
            }
          ],
          "slots": [
            {
              "description": "Text",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "properties",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ color: { type: String, reflect: true }, size: { type: String, reflect: true }, }"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "color",
              "description": "Textfarbe",
              "type": {
                "text": "'success'|'error'"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "size",
              "description": "Textfarbe",
              "type": {
                "text": "'s'"
              },
              "default": "undefined"
            }
          ],
          "superclass": {
            "name": "s",
            "module": "/dist/js/lit-element-8bc32369.js"
          },
          "tagName": "wm-badge",
          "customElement": true
        },
        {
          "kind": "variable",
          "name": "tagName",
          "type": {
            "text": "string"
          },
          "default": "\"wm-badge\""
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "wm-badge",
          "declaration": {
            "name": "Badge",
            "module": "dist/js/components/Badge/Badge.js"
          }
        },
        {
          "kind": "js",
          "name": "Badge",
          "declaration": {
            "name": "Badge",
            "module": "dist/js/components/Badge/Badge.js"
          }
        },
        {
          "kind": "js",
          "name": "tagName",
          "declaration": {
            "name": "tagName",
            "module": "dist/js/components/Badge/Badge.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/Carousel/Carousel.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Bilder oder Card-Carousel.",
          "name": "Carousel",
          "cssProperties": [
            {
              "description": "Seitenverhältnis der einzelnen Slides",
              "name": "--carousel-ratio"
            },
            {
              "description": "Innenabstand in einzelnen Slides",
              "name": "--carousel-item-inner-padding"
            },
            {
              "description": "Platz um das Karussell für Schatten",
              "name": "--carousel-shadow-offset"
            },
            {
              "description": "Abstand zwischen Elementen",
              "name": "--carousel-gap"
            },
            {
              "description": "Hintergrundfarbe der Controls",
              "name": "--carousel-control-background-color"
            },
            {
              "description": "Hintergrundbild des ersten Buttons",
              "name": "--carousel-control-background-image-start"
            },
            {
              "description": "Hintergrundbild des zweiten Buttons",
              "name": "--carousel-control-background-image-end"
            },
            {
              "description": "Hintergrundfarbe der Indikatoren",
              "name": "--carousel-dots-color"
            },
            {
              "description": "Rahmenfarbe der Indikatoren",
              "name": "--carousel-dots-border-color"
            },
            {
              "description": "Hintergrundfarbe des aktiven Indikatoren",
              "name": "--carousel-dots-color--active"
            },
            {
              "description": "Abstand der Indikatoren zueinander",
              "name": "--carousel-dots-gap"
            },
            {
              "description": "Kleiner Abstand der Indikatoren zueinander",
              "name": "--carousel-dots-gap-s"
            },
            {
              "description": "Abstand nach dem Strip",
              "name": "--carousel-strip-spacing"
            },
            {
              "description": "Abstand in der Navigation",
              "name": "--carousel-navigation-spacing"
            }
          ],
          "slots": [
            {
              "description": "Cards oder Bilder",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_items",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_wrapper",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_current",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_lastSlide",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_output",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "properties",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ autoplay: { type: Boolean }, autoplayInterval: { type: Number }, dots: { type: Boolean }, label: { type: String }, nextLabel: { type: String }, prevLabel: { type: String }, single: { type: Number, reflect: true }, position: { type: String }, _autoplaying: { type: Boolean, attribute: false }, _initialized: { type: Boolean, attribute: false }, _currentSlide: { type: Number, attribute: false }, _offset: { type: String, attribute: false }, _first: { type: String, attribute: false }, _last: { type: String, attribute: false }, _focusMode: { type: Boolean, attribute: false }, _canMove: { type: Boolean, attribute: false }, _imageZoom: { type: Object, attribute: false }, _touchstartX: { type: Number }, _touchstartY: { type: Number }, _touches: { type: Number }, _swipeTreshold: { type: Number }, _isList: { type: Boolean, attribute: false }, }"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "[i` * { box-sizing: border-box; } :host(:not(.focusmode)) { max-width: calc(100% + (var(--carousel-shadow-offset) * 2)); margin-left: calc(var(--carousel-shadow-offset) * -1); margin-right: calc(var(--carousel-shadow-offset) * -1); margin-top: calc(var(--carousel-shadow-offset) * -1) !important; // needed to counteract base.css * {margin-top: 0;} max-height: inherit; position: relative; } :host { display: block; margin-bottom: 0 !important; pointer-events: all; /* Needed for carousels within modals */ max-width: 100%; } :host(:not(.focusmode)) .inner { max-height: inherit; min-height: 100px; padding: var(--carousel-shadow-offset) var(--carousel-shadow-offset) var(--carousel-shadow-offset); // needed padding on top to show box-shadow position: relative; overflow: hidden; } /* Carousel causes overflow on ios 14. It's not related to ::backdrop/dialog but we can target those older browsers that way */ @supports not selector(::backdrop) { :host(:not(.focusmode)) .inner { overflow: hidden; } } .strip { margin: 0; padding: 0; list-style-type: ''; } :host(:not(.focusmode)) .strip { display: flex; gap: var(--carousel-gap); max-height: inherit; min-width: 100%; margin-bottom: var(--carousel-strip-spacing); } :host(:not(.notransition)) .strip { --transformSpeed: 0.01s; transition: transform var(--transformSpeed) ease-in-out; } @media(prefers-reduced-motion: no-preference) { :host(:not(.notransition)) .strip { --transformSpeed: 0.3s; } } :host(.focusmode) .strip { transform: none !important; } :host([single]) .strip { align-items: center; } .strip > ::slotted(*) { flex-shrink: 0; } .control { --_size: 2.75rem; --_display: inline-flex; --_opacity: 0; position: absolute; background: var(--carousel-control-background-color) no-repeat center; border: 0; border-radius: 50%; box-shadow: 0 3px 6px rgba(0,0,0,.16); display: var(--_display); height: var(--_size); top: 50%; opacity: var(--_opacity); padding: 0; transform-origin: center center; transition: scale 0.3s, opacity 0.3s; width: var(--_size); z-index: 1210; pointer-events: all; } @media (min-width: 48em) { .control { --_size: 3.75rem; --_opacity: 1; } } .control:focus-within { --_opacity: 1; } .control--prev { background-image: var(--carousel-control-background-image-start); left: 0; translate: -50% -50%; } .control--next { background-image: var(--carousel-control-background-image-end); right: 0; translate: 50% -50%; } :host(.focusmode) .control, .control--inactive { opacity: 0; } :host(.focusmode) .control:focus-visible, .control--inactive:focus-visible { opacity: 0.5; } .control:is(:hover, :focus) { scale: 1.1; } .control:focus-visible { outline: var(--wm-theme-site-focus-outline-width) solid var(--wm-color-ui-interactive); } img { max-height: inherit; } wm-modal img[src], .loaded { min-height: 0; max-height: 100%; } :host([single]) ::slotted(img) { object-fit: cover; width: 100%; height: 100%; } .dots { display: flex; gap: var(--carousel-dots-gap-s); justify-content: center; /* margin-top: 0.3rem; */ padding-left: var(--carousel-shadow-offset); padding-right: var(--carousel-shadow-offset); } @media (min-width: 48em) { .dots { gap: var(--carousel-dots-gap); } } .dots wm-button { flex-shrink: 0; } .dots button { --_background: var(--carousel-dots-color); --_bordercolor: var(--carousel-dots-border-color); border-radius: 50%; border: 1px solid var(--_bordercolor); background: var(--_background); display: block; outline: 1px solid transparent; padding: 0; height: 0.8rem; width: 0.8rem; } .dots button:is(:hover, :focus-visible), .dots .active { --_background: var(--carousel-dots-color--active); } .autoplay-controls { display: flex; } .autoplay-controls button { --_background: var(--carousel-dots-color); --_size: 25px; color: var(--wm-color-fastschwarz); --_hover-color: var(--wm-color-weiss); display: flex; background: var(--_background); border-radius: 50%; border: none; display: block; height: var(--_size); width: var(--_size); padding: 0; } .autoplay-controls button:is(:hover, :focus-visible) { --_background: var(--carousel-dots-color--active); color: var(--_hover-color); } .navigation { display: flex; justify-content: center; align-items: center; gap: 1rem; padding-left: var(--carousel-shadow-offset); padding-right: var(--carousel-shadow-offset); padding-bottom: var(--carousel-navigation-spacing); } [role=\"status\"] { position: absolute; white-space: nowrap; width: 1px; height: 1px; overflow: hidden; clip-path: inset(50%); margin: -1px; } @media print { :host() .inner { overflow: visible !important; } .strip { flex-wrap: wrap; } .navigation { display: none; } } `]",
              "type": {
                "text": "array"
              }
            },
            {
              "kind": "method",
              "name": "_move",
              "parameters": [
                {
                  "name": "direction"
                },
                {
                  "description": "'next' or 'prev'",
                  "name": "elemdirectionent",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Move carousel",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_positionSlide",
              "description": "Moves the next, prev, or current item into view",
              "parameters": [
                {
                  "name": "slide",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_firstOrLast",
              "description": "Is the current currentSlide the first or the last slide",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_prevSlide",
              "description": "Only called when a click on the prev buttons happens",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_nextSlide",
              "description": "Only called when a click on the next buttons happens",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "prev",
              "description": "Zum nächsten Slide springen"
            },
            {
              "kind": "method",
              "name": "next",
              "description": "Zum vorherigen Slide springen"
            },
            {
              "kind": "method",
              "name": "slide",
              "parameters": [
                {
                  "name": "n",
                  "description": "0-basierter Index",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "name": "transition",
                  "default": "true",
                  "description": "Slidewechsel animieren",
                  "type": {
                    "text": "Boolean"
                  }
                }
              ],
              "description": "Zu einem bestimmten Slide springen"
            },
            {
              "kind": "method",
              "name": "_changeSlide",
              "parameters": [
                {
                  "name": "slide"
                }
              ],
              "description": "Change the current slide",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_lazyLoadContent",
              "parameters": [
                {
                  "name": "index"
                }
              ],
              "description": "If there's an img or iframe with data-src, load it\r\nLoad lazy content",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_switchSourceAttributes",
              "parameters": [
                {
                  "name": "element"
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ]
            },
            {
              "kind": "method",
              "name": "firstUpdated"
            },
            {
              "kind": "method",
              "name": "_onResize",
              "description": "Reposition the active slide on resize",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_keyEvents",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "add key events",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_removeEvents",
              "description": "Remove events",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleTouch",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Check if double tab or pinch zoom",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleTouchEnd",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Check if touch stopped",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleSwipe",
              "description": "swipe left or right",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_leaveFocusMode",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_initFocusMode",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Switch in to a special mode for images that have been zoomed",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_addEvents",
              "description": "add events",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_setItemClasses",
              "description": "set current, last, and first classes",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_observeItems",
              "description": "observe item visibility with 90% visibility within root",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_setWidth",
              "description": "set the width of each item for single carousels",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleIntersection",
              "parameters": [
                {
                  "name": "entries"
                }
              ],
              "description": "Make slides active/inactive",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleImageIntersection",
              "parameters": [
                {
                  "name": "entries"
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_listenToOnLoadOnImages",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_positionCaption",
              "parameters": [
                {
                  "name": "parent"
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "toggleAutoplay",
              "description": "Toggles the autoplay state"
            },
            {
              "kind": "method",
              "name": "_startAutoplay",
              "description": "Starts the autoplay",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_stopAutoplay",
              "description": "Stops the autoplay",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_renderAutoplayControls",
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "_renderDots",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "dots",
              "type": {
                "text": "Boolean"
              },
              "description": "Indikatoren unter dem Karussell anzeigen.",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "autoplay",
              "type": {
                "text": "Boolean"
              },
              "description": "Indikatoren und Play/Pause Button unter dem Karussell anzeigen (nur in Kombination).",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_autoplaying",
              "type": {
                "text": "Boolean"
              },
              "description": "Automatische Wiedergabe aktiviert.",
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "autoplayInterval",
              "type": {
                "text": "Number"
              },
              "description": "Intervall für die automatische Wiedergabe in Millisekunden.",
              "default": "5000"
            },
            {
              "kind": "field",
              "name": "_autoplayInterval",
              "type": {
                "text": "Number|null"
              },
              "description": "Wert returned von der setInterval() method.",
              "privacy": "private",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "label",
              "description": "Semantische Bezeichnung des Karussells (Pflichtfeld).",
              "type": {
                "text": "String"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "single",
              "description": "Wenn nur ein Element angezeigt werden soll, Breite in Pixel übergeben.",
              "type": {
                "text": "Number"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "nextLabel",
              "type": {
                "text": "String"
              },
              "description": "Label für den Button rechts",
              "default": "\"Nächstes Element\""
            },
            {
              "kind": "field",
              "name": "prevLabel",
              "type": {
                "text": "String"
              },
              "description": "Label für den Button links",
              "default": "\"Vorheriges Element\""
            },
            {
              "kind": "field",
              "name": "position",
              "type": {
                "text": "String|last"
              },
              "description": "Index beginnend bei 1 oder Keyword",
              "default": "1"
            },
            {
              "kind": "field",
              "name": "_first",
              "type": {
                "text": "String"
              },
              "description": "Erstes Element aktiv?",
              "privacy": "private",
              "default": "true"
            },
            {
              "kind": "field",
              "name": "_last",
              "type": {
                "text": "String"
              },
              "description": "Letztes Element aktiv?",
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_currentSlide",
              "type": {
                "text": "Number"
              },
              "description": "Aktueller Slide",
              "privacy": "private",
              "default": "1"
            },
            {
              "kind": "field",
              "name": "_offset",
              "type": {
                "text": "Number"
              },
              "description": "Versatz",
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "_focusMode",
              "type": {
                "text": "Boolean"
              },
              "description": "Determine",
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_canMove",
              "type": {
                "text": "Boolean"
              },
              "description": "Is it okay to move to the next slide?",
              "privacy": "private",
              "default": "true"
            },
            {
              "kind": "field",
              "name": "_initialized",
              "type": {
                "text": "Boolean"
              },
              "description": "Is carousel ready",
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_imageZoom",
              "type": {
                "text": "object"
              },
              "description": "Container for image zoom settings",
              "privacy": "private",
              "default": "{}"
            },
            {
              "kind": "field",
              "name": "_swipeTreshold",
              "type": {
                "text": "number"
              },
              "description": "Determines when a swipe is a swipe and not a tap",
              "privacy": "private",
              "default": "80"
            },
            {
              "kind": "field",
              "name": "_touchstartX",
              "type": {
                "text": "number"
              },
              "description": "Touch x pos for image zoom",
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "_touchstartY",
              "type": {
                "text": "number"
              },
              "description": "Touch y pos for image zoom",
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "_touches",
              "type": {
                "text": "number"
              },
              "description": "How many fingers are on the screen",
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "_isList",
              "type": {
                "text": "boolean"
              },
              "description": "Determines if the carousel should be rendered as a list in HTML",
              "privacy": "private",
              "default": "false"
            }
          ],
          "events": [
            {
              "name": "wm-slide-changed",
              "type": {
                "text": "CustomEvent"
              },
              "description": "Slide wurde gewechselt"
            }
          ],
          "superclass": {
            "name": "s",
            "module": "/dist/js/lit-element-8bc32369.js"
          },
          "summary": "Button/Button, Icon/Icon\r\n\r\n* Mit einem Karussell kann man mehrere Cards in einer Reihe anbieten\r\n* Pfeile zeigen an, in welche Richtung man weiterdrehen kann\r\n* Sliden ist auch on touch / swipe möglich",
          "tagName": "wm-carousel",
          "customElement": true
        },
        {
          "kind": "variable",
          "name": "tagName",
          "type": {
            "text": "string"
          },
          "default": "\"wm-carousel\""
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "wm-carousel",
          "declaration": {
            "name": "Carousel",
            "module": "dist/js/components/Carousel/Carousel.js"
          }
        },
        {
          "kind": "js",
          "name": "Carousel",
          "declaration": {
            "name": "Carousel",
            "module": "dist/js/components/Carousel/Carousel.js"
          }
        },
        {
          "kind": "js",
          "name": "tagName",
          "declaration": {
            "name": "tagName",
            "module": "dist/js/components/Carousel/Carousel.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/Checkbox/Checkbox.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Checkbox",
          "members": [
            {
              "kind": "field",
              "name": "properties",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...super.properties, hasError: { type: Boolean, reflect: true }, error: { type: String }, errormessage: { type: String }, summaryErrormessage: { type: String, attribute: \"summary-errormessage\" }, validate: { type: Boolean, reflect: true }, showErrors: { type: Boolean, reflect: true }, info: { type: String }, _infoOpen: { type: Boolean }, _initialCheckedValues: { state: true }, }"
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleChange",
              "parameters": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "description": "Override checkValidity to better handle error messages for the error summary"
            },
            {
              "kind": "method",
              "name": "showError",
              "parameters": [
                {
                  "name": "message",
                  "description": "Error message to display",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Public method to show an error message"
            },
            {
              "kind": "method",
              "name": "clearError",
              "description": "Public method to clear error state"
            },
            {
              "kind": "method",
              "name": "setDisabled",
              "parameters": [
                {
                  "name": "isDisabled",
                  "description": "Whether the checkbox component should be disabled",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Sets the disabled state of the checkbox component and all its options",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "_performValidation",
              "description": "Override _performValidation from FormStateManager",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_handleEvent",
              "parameters": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "kind": "method",
              "name": "reset"
            },
            {
              "kind": "method",
              "name": "formResetCallback"
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ]
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "'checkbox'"
              },
              "description": "Art des Eingabefelds",
              "privacy": "private",
              "default": "\"checkbox\""
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "Array"
              },
              "description": "Selected values",
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "errormessage",
              "type": {
                "text": "String"
              },
              "description": "Fehlermeldung bei ungültiger Eingabe\nDiese Meldung wird direkt am Checkbox-Element angezeigt, wenn es validiert wird und ungültig ist.",
              "default": "\"\""
            },
            {
              "kind": "field",
              "name": "summaryErrormessage",
              "type": {
                "text": "String"
              },
              "description": "Spezifische Fehlermeldung für die Fehlerübersicht\nDiese Meldung wird in der Fehlerübersicht (wm-formerrorsummary) anstelle der normalen\nFehlermeldung angezeigt. Dies ist nützlich, um in der Übersicht kontextspezifischere\nFehlermeldungen anzuzeigen, z.B. \"Bitte stimmen Sie den AGB bei 'Nutzungsbedingungen' zu\"\nstatt nur \"Bitte wählen Sie mindestens eine Option aus\".",
              "default": "\"\""
            },
            {
              "kind": "field",
              "name": "hasError",
              "type": {
                "text": "Boolean"
              },
              "description": "Gibt an, ob das Element einen Fehler hat\nDies ist ein Statusattribut, das anzeigt, ob aktuell ein Validierungsfehler vorliegt.\nEs wird auf true gesetzt, wenn die Validierung fehlschlägt, und auf false, wenn die Validierung erfolgreich ist.",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "String"
              },
              "description": "Aktuelle Fehlermeldung",
              "default": "\"\""
            },
            {
              "kind": "field",
              "name": "showErrors",
              "type": {
                "text": "Boolean"
              },
              "description": "Steuert die Anzeige von Fehlermeldungen\nIm Gegensatz zu 'hasError' steuert dieses Attribut, ob Fehlermeldungen angezeigt werden sollen.\nWenn auf true gesetzt, werden Validierungsfehler sofort angezeigt, ohne auf eine Formularübermittlung zu warten.\nWird typischerweise vom übergeordneten wm-form Element gesteuert.",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "validate",
              "type": {
                "text": "Boolean"
              },
              "description": "Aktiviert die Validierung bei Eingabe\nWenn auf true gesetzt, werden Eingaben sofort validiert und Fehler angezeigt,\nohne auf eine Formularübermittlung zu warten.\nWird typischerweise vom übergeordneten wm-form Element gesteuert.",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "info",
              "description": "Zusätzliche Informationen zum Feld",
              "type": {
                "text": "String"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "_infoOpen",
              "type": {
                "text": "Boolean"
              },
              "description": "Steuerung der Info-Anzeige",
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_initialCheckedValues",
              "type": {
                "text": "Array"
              },
              "privacy": "private",
              "description": "Initial checked values for reset functionality",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "_errorController",
              "default": "new ErrorStateController(this)"
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "dist/js/components/Checkbox/Checkbox.js"
          },
          "tagName": "wm-checkbox",
          "customElement": true
        },
        {
          "kind": "variable",
          "name": "tagName",
          "type": {
            "text": "string"
          },
          "default": "\"wm-checkbox\""
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "wm-checkbox",
          "declaration": {
            "name": "Checkbox",
            "module": "dist/js/components/Checkbox/Checkbox.js"
          }
        },
        {
          "kind": "js",
          "name": "Checkbox",
          "declaration": {
            "name": "Checkbox",
            "module": "dist/js/components/Checkbox/Checkbox.js"
          }
        },
        {
          "kind": "js",
          "name": "tagName",
          "declaration": {
            "name": "tagName",
            "module": "dist/js/components/Checkbox/Checkbox.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/Chip/Chip.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Komponente zur Darstellung von Kategorien und Eigenschaften",
          "name": "Chip",
          "cssProperties": [
            {
              "description": "Hintergrundfarbe",
              "name": "--chip-background-color"
            },
            {
              "description": "Hintergrundfarbe bei Hover & Focus",
              "name": "--chip-background-color--hover"
            },
            {
              "description": "Rahmenfarbe",
              "name": "--chip-border-color"
            },
            {
              "description": "Rahmenfarbe bei Hover & Focus",
              "name": "--chip-border-color--hover"
            },
            {
              "description": "Rahmenabrundung",
              "name": "--chip-border-radius"
            },
            {
              "description": "Schriftfarbe",
              "name": "--chip-font-color"
            },
            {
              "description": "Schriftfarbe bei Hover & Focus",
              "name": "--chip-font-color--hover"
            },
            {
              "description": "Schriftgröße",
              "name": "--chip-font-size"
            },
            {
              "description": "Abstand innen",
              "name": "--chip-padding"
            },
            {
              "description": "Abstand zwischen Icon und Text",
              "name": "--chip-gap"
            }
          ],
          "slots": [
            {
              "description": "Text, Link oder Button",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "properties",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ color: { type: String, reflect: true }, size: { type: String, reflect: true } }"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "color",
              "type": {
                "text": "'abendstimmung'|'flieder'|'frischgruen'|'goldgelb'|'morgenrot'|'nebelgrau'|'wasserblau'"
              },
              "description": "Farbe",
              "default": "\"nebelgrau\""
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'s'|'m'|'l'"
              },
              "description": "Größe",
              "default": "\"m\""
            }
          ],
          "superclass": {
            "name": "s",
            "module": "/dist/js/lit-element-8bc32369.js"
          },
          "tagName": "wm-chip",
          "customElement": true
        },
        {
          "kind": "variable",
          "name": "tagName",
          "type": {
            "text": "string"
          },
          "default": "\"wm-chip\""
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "wm-chip",
          "declaration": {
            "name": "Chip",
            "module": "dist/js/components/Chip/Chip.js"
          }
        },
        {
          "kind": "js",
          "name": "Chip",
          "declaration": {
            "name": "Chip",
            "module": "dist/js/components/Chip/Chip.js"
          }
        },
        {
          "kind": "js",
          "name": "tagName",
          "declaration": {
            "name": "tagName",
            "module": "dist/js/components/Chip/Chip.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/Copyright/Copyright.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Automatische Auflistung von Copyright-Information am Ende der Seite.",
          "name": "Copyright",
          "members": [
            {
              "kind": "field",
              "name": "_images",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "properties",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ label: { type: String }, _credits: { type: Array }, }"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[styles]"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "String"
              },
              "description": "Die Bezeichnung der Liste",
              "default": "\"Foto-Credits\""
            },
            {
              "kind": "field",
              "name": "_credits",
              "type": {
                "text": "Array"
              },
              "description": "An array with all image credits",
              "privacy": "private",
              "default": "[]"
            }
          ],
          "superclass": {
            "name": "s",
            "module": "/dist/js/lit-element-8bc32369.js"
          },
          "summary": "Details/Details, List/List",
          "tagName": "wm-copyright",
          "customElement": true
        },
        {
          "kind": "variable",
          "name": "tagName",
          "type": {
            "text": "string"
          },
          "default": "\"wm-copyright\""
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "wm-copyright",
          "declaration": {
            "name": "Copyright",
            "module": "dist/js/components/Copyright/Copyright.js"
          }
        },
        {
          "kind": "js",
          "name": "Copyright",
          "declaration": {
            "name": "Copyright",
            "module": "dist/js/components/Copyright/Copyright.js"
          }
        },
        {
          "kind": "js",
          "name": "tagName",
          "declaration": {
            "name": "tagName",
            "module": "dist/js/components/Copyright/Copyright.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/Details/Details.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Disclosure Widget",
          "name": "Details",
          "cssProperties": [
            {
              "description": "Rahmen",
              "name": "--details-border"
            },
            {
              "description": "Dropdown Icon",
              "name": "--details-icon"
            },
            {
              "description": "Innenabstand",
              "name": "--details-padding"
            },
            {
              "description": "Innenabstand im Button",
              "name": "--details-padding-button"
            },
            {
              "description": "Innenabstand im Inhalt",
              "name": "--details-padding-content"
            },
            {
              "description": "Schriftstärke für WM Variablefont",
              "name": "--details-font-variation-settings"
            },
            {
              "description": "Standard-Schriftstärke",
              "name": "--details-font-weight"
            }
          ],
          "slots": [
            {
              "description": "Bezeichnung",
              "name": "label"
            },
            {
              "description": "Inhalt",
              "name": "content"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "properties",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ full: { type: Boolean, reflect: true }, open: { type: Boolean, reflect: true }, min: { type: String, reflect: true }, selectable: { type: Boolean, reflect: true }, _active: { type: Boolean }, _opened: { type: Boolean, reflect: true }, }"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[styles]"
            },
            {
              "kind": "field",
              "name": "_content",
              "description": "content",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_wrap",
              "description": "content wrapper",
              "type": {
                "text": "Node"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "_addEvents",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "toggleDetails",
              "description": "Sichtbarkeit umschalten"
            },
            {
              "kind": "method",
              "name": "_isActive",
              "description": "Add breakpoint and (de)activate component accordingly",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "full",
              "type": {
                "text": "Boolean"
              },
              "description": "Über die volle Breite anzeigen.",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "Boolean"
              },
              "description": "Offen oder nicht",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "min",
              "description": "Wenn erst ab einer bestimmten Viewportbreite getoggelt werden soll, zum Beispiel 48em, 64em.",
              "type": {
                "text": "String"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "_active",
              "type": {
                "text": "Boolean"
              },
              "description": "Is the toggle active or not",
              "privacy": "private",
              "default": "true"
            },
            {
              "kind": "field",
              "name": "selectable",
              "type": {
                "text": "Boolean"
              },
              "description": "Text kann ausgewählt werden. Wenn false, ist die ganze Fläche klickbar.",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_opened",
              "type": {
                "text": "Boolean"
              },
              "description": "Zustand nach der Animation",
              "privacy": "private",
              "default": "false"
            }
          ],
          "superclass": {
            "name": "s",
            "module": "/dist/js/lit-element-8bc32369.js"
          },
          "summary": "Button/Button",
          "tagName": "wm-details",
          "customElement": true
        },
        {
          "kind": "variable",
          "name": "tagName",
          "type": {
            "text": "string"
          },
          "default": "\"wm-details\""
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "wm-details",
          "declaration": {
            "name": "Details",
            "module": "dist/js/components/Details/Details.js"
          }
        },
        {
          "kind": "js",
          "name": "Details",
          "declaration": {
            "name": "Details",
            "module": "dist/js/components/Details/Details.js"
          }
        },
        {
          "kind": "js",
          "name": "tagName",
          "declaration": {
            "name": "tagName",
            "module": "dist/js/components/Details/Details.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/Fetch/Fetch.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Daten von einer API holen.",
          "name": "Fetch",
          "cssProperties": [
            {
              "description": "Abstand zwischen Komponenten",
              "name": "--fetch-gap"
            }
          ],
          "slots": [
            {
              "description": "Ausgabe der Daten",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "properties",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ json: { type: String }, url: { type: String }, dataset: { type: String }, pagination: { type: String, reflect: true }, itemsPerPage: { type: Number, reflect: true }, total: { type: Number, reflect: true }, _offset: { type: Number }, _itemsPerSet: { type: Number }, _results: { type: Array }, _debug: { type: Boolean }, }"
            },
            {
              "kind": "field",
              "name": "_pagination",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_content",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_attributes",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_template",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_table",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "createRenderRoot",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_fetchData",
              "description": "Fetch data from the API",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_processData",
              "parameters": [
                {
                  "name": "data"
                }
              ],
              "description": "Doe something with the fetched data",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_overrideSortingInTables",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_reset",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_displayData",
              "description": "Takes markup from the slotted template and replaces fields and attributes with data",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_replaceAttributes",
              "parameters": [
                {
                  "name": "elements"
                },
                {
                  "name": "result"
                }
              ],
              "description": "Scans template for attributes",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_loadMore",
              "description": "Load and display the next set of entries",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "setJSON",
              "parameters": [
                {
                  "name": "d"
                },
                {
                  "name": "data",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "description": "JSON mit Daten übergeben"
            },
            {
              "kind": "method",
              "name": "firstUpdated"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "json",
              "type": {
                "text": "String"
              },
              "description": "JSON String (Alternative zur Url)",
              "default": "\"\""
            },
            {
              "kind": "field",
              "name": "url",
              "type": {
                "text": "String"
              },
              "description": "Url zur API",
              "default": "\"\""
            },
            {
              "kind": "field",
              "name": "dataset",
              "description": "Feld im Datensatz in dem sich die Ergebnisse befinden",
              "type": {
                "text": "String"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "_results",
              "type": {
                "text": "String"
              },
              "description": "All results",
              "privacy": "private",
              "default": "\"\""
            },
            {
              "kind": "field",
              "name": "itemsPerPage",
              "type": {
                "text": "String"
              },
              "description": "Wieviele Ergebnisse sollen pro Seite angezeigt werden",
              "default": "5"
            },
            {
              "kind": "field",
              "name": "_itemsPerSet",
              "description": "Items per set, equals either itemPerPage or less",
              "type": {
                "text": "String"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_offset",
              "type": {
                "text": "String"
              },
              "description": "Offset for pagination",
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "pagination",
              "description": "Art der Paginierung",
              "type": {
                "text": "'number'|'button'"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "total",
              "type": {
                "text": "number"
              },
              "default": "0"
            },
            {
              "kind": "field",
              "name": "_debug",
              "type": {
                "text": "Boolean"
              },
              "description": "Debug mode",
              "privacy": "private",
              "default": "false"
            }
          ],
          "events": [
            {
              "name": "wm-fetched",
              "type": {
                "text": "CustomEvent"
              },
              "description": "Daten wurden erfolgreich geladen",
              "summary": "Anzahl der Ergebnisse"
            },
            {
              "name": "wm-defined",
              "type": {
                "text": "CustomEvent"
              },
              "description": "Web Component ist bereit"
            }
          ],
          "superclass": {
            "name": "s",
            "module": "/dist/js/lit-element-8bc32369.js"
          },
          "summary": "Button/Button, Stack/Stack, Pagination/Pagination",
          "tagName": "wm-fetch",
          "customElement": true
        },
        {
          "kind": "variable",
          "name": "tagName",
          "type": {
            "text": "string"
          },
          "default": "\"wm-fetch\""
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "wm-fetch",
          "declaration": {
            "name": "Fetch",
            "module": "dist/js/components/Fetch/Fetch.js"
          }
        },
        {
          "kind": "js",
          "name": "Fetch",
          "declaration": {
            "name": "Fetch",
            "module": "dist/js/components/Fetch/Fetch.js"
          }
        },
        {
          "kind": "js",
          "name": "tagName",
          "declaration": {
            "name": "tagName",
            "module": "dist/js/components/Fetch/Fetch.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/Figure/Figure.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Die Figure-Komponente ermöglicht es, Bilder, Videos und andere Medieninhalte in einem Container anzuzeigen.\n Die Größe des Containers wird automatisch an den Inhalt angepasst (zum Beispiel schmales Bild, viel Beschreibungstext).",
          "name": "Figure",
          "slots": [
            {
              "description": "HTML figure content",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[styles]",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_debounce",
              "parameters": [
                {
                  "name": "func",
                  "description": "The function to debounce.",
                  "type": {
                    "text": "Function"
                  }
                },
                {
                  "name": "wait",
                  "description": "The number of milliseconds to delay.",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Creates a debounced version of the provided function.",
              "return": {
                "type": {
                  "text": "Function"
                }
              }
            },
            {
              "kind": "method",
              "name": "_adjustSize",
              "parameters": [
                {
                  "name": "retries",
                  "default": "15",
                  "description": "The number of retries to attempt if the width is not immediately available (iframe).",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Adjusts the size of the figure element based on its media content."
            },
            {
              "kind": "method",
              "name": "render",
              "description": "Renders the slot content.",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "field",
              "name": "observer",
              "default": "new MutationObserver(() => this._debouncedAdjustSize())"
            },
            {
              "kind": "field",
              "name": "_debouncedAdjustSize"
            }
          ],
          "superclass": {
            "name": "s",
            "module": "/dist/js/lit-element-8bc32369.js"
          },
          "tagName": "wm-figure",
          "customElement": true
        },
        {
          "kind": "variable",
          "name": "tagName",
          "type": {
            "text": "string"
          },
          "default": "\"wm-figure\""
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "wm-figure",
          "declaration": {
            "name": "Figure",
            "module": "dist/js/components/Figure/Figure.js"
          }
        },
        {
          "kind": "js",
          "name": "Figure",
          "declaration": {
            "name": "Figure",
            "module": "dist/js/components/Figure/Figure.js"
          }
        },
        {
          "kind": "js",
          "name": "tagName",
          "declaration": {
            "name": "tagName",
            "module": "dist/js/components/Figure/Figure.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/Filter/Filter.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Filter",
          "name": "Filter",
          "cssProperties": [
            {
              "description": "Hintergrundfarbe der Controls",
              "name": "--filter-controls-background-color"
            },
            {
              "description": "Hintergrundfarbe Dropdown",
              "name": "--filter-dropdown-background-color"
            },
            {
              "description": "Rahmen Dropdown",
              "name": "--filter-dropdown-border"
            },
            {
              "description": "Schatten Dropdown",
              "name": "--filter-dropdown-shadow"
            },
            {
              "description": "Farbe der unteren Rahmenlinie am Toggle-Button",
              "name": "--filter-dropdown-button-border"
            }
          ],
          "slots": [
            {
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_fieldsets",
              "description": "Slotted Groups of checkboxes",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_lists",
              "description": "Rendered lists of checkboxes",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_inputs",
              "description": "Checkboxes",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_dropdownButton",
              "description": "Button that toggles the filter",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_output",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "properties",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ label: { type: String, reflect: true }, searchLabel: { type: String, reflect: true }, dismissLabel: { type: String, reflect: true }, selectedLabel: { type: String, reflect: true }, selectLabel: { type: String, reflect: true }, type: { type: String, reflect: true }, open: { type: Boolean, reflect: true }, controls: { type: Boolean, reflect: true }, totals: { type: Object, attribute: false }, _selection: { type: Array, attribute: false }, _newSelection: { type: Array, attribute: false, reflect: true }, }"
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ]
            },
            {
              "kind": "method",
              "name": "firstUpdated"
            },
            {
              "kind": "method",
              "name": "_updateTotalChecked",
              "description": "Update totals",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_addEvents",
              "description": "Add events",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_clickOutSide",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Close when clicking somewhere outside the dialog",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_uncheck",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Uncheck checkboxes",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_check",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Check checkboxes",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_updateParentCheckbox",
              "parameters": [
                {
                  "name": "idx"
                }
              ],
              "description": "(Un)check “check all” checkbox",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_registerCheckboxes",
              "description": "Gather information about current list of checkboxes",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_checkAll",
              "parameters": [
                {
                  "name": "idx"
                },
                {
                  "name": "e"
                }
              ],
              "description": "Check all boxes at once",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_updateCheckboxes",
              "description": "(Un)check boxes",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_abort",
              "description": "Dismiss current selection",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "submit",
              "description": "Aktuelle Auswahl speichern"
            },
            {
              "kind": "method",
              "name": "updateSelection",
              "description": "Wenn es eine Filter Selection gibt, kann man diese clientseitig aktualisieren"
            },
            {
              "kind": "method",
              "name": "_showSelection",
              "parameters": [
                {
                  "name": "selection"
                }
              ],
              "description": "Send data to FilterSelection",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_toggleDropdown",
              "description": "Open or close dropdown Filter",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_renderCheckboxes",
              "description": "List of checkboxes",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_renderTotalSelected",
              "description": "Totals in parenthesis",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_renderFilterControls",
              "description": "Search and dismiss button",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_renderFilters",
              "description": "Filter wrapper",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "createRenderRoot",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "String"
              },
              "description": "Bezeichnung für das Dropdown",
              "default": "\"Erweiterte Filter\""
            },
            {
              "kind": "field",
              "name": "searchLabel",
              "type": {
                "text": "String"
              },
              "description": "Text für Suchen-Button",
              "default": "\"Anwenden\""
            },
            {
              "kind": "field",
              "name": "dismissLabel",
              "type": {
                "text": "String"
              },
              "description": "Text für Abbrechen-Button",
              "default": "\"Abbrechen\""
            },
            {
              "kind": "field",
              "name": "selectLabel",
              "type": {
                "text": "String"
              },
              "description": "Text für auswählen-Text in Dropdown",
              "default": "\"Auswählen\""
            },
            {
              "kind": "field",
              "name": "selectedLabel",
              "type": {
                "text": "String"
              },
              "description": "Text für ausgewählt-Text in Dropdown",
              "default": "\"ausgewählt\""
            },
            {
              "kind": "field",
              "name": "type",
              "description": "Art des Filters",
              "type": {
                "text": "'dropdown'"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "Boolean"
              },
              "description": "Ist das Dropdown geöffnet",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "controls",
              "type": {
                "text": "Boolean"
              },
              "description": "Buttons zu Senden/Schließen/Abbrechen anzeigen",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "totals",
              "type": {
                "text": "Object"
              },
              "description": "Anzahl der Elemente insgesamt und der ausgewählten",
              "default": "{ all: { total: this._inputs.length, checked: 0, active: 0, }, }"
            },
            {
              "kind": "field",
              "name": "_selection",
              "type": {
                "text": "Boolean"
              },
              "description": "Array that holds information about all checkboxes",
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "_newSelection",
              "type": {
                "text": "Boolean"
              },
              "description": "Array that holds information about all selected, but not yet confirmed checkboxes",
              "privacy": "private",
              "default": "[]"
            }
          ],
          "events": [
            {
              "name": "wm-filter-selection-submitted",
              "type": {
                "text": "CustomEvent"
              },
              "description": "Wenn eine Auswahl getroffen und angewendet worden ist",
              "summary": "Object mit allen Filter Daten"
            },
            {
              "name": "wm-filter-selected",
              "type": {
                "text": "CustomEvent"
              },
              "description": "Wenn eine Auswahl getroffen worden ist",
              "summary": "Object mit allen Filter Daten"
            }
          ],
          "superclass": {
            "name": "s",
            "module": "/dist/js/lit-element-8bc32369.js"
          },
          "tagName": "wm-filter",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "wm-filter",
          "declaration": {
            "name": "Filter",
            "module": "dist/js/components/Filter/Filter.js"
          }
        },
        {
          "kind": "js",
          "name": "Filter",
          "declaration": {
            "name": "Filter",
            "module": "dist/js/components/Filter/Filter.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/FilterSelection/FilterSelection.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "FilterSelection",
          "members": [
            {
              "kind": "field",
              "name": "properties",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ filterid: { type: String, reflect: true }, resetlabel: { type: String, reflect: true }, categorize: { type: Boolean, reflect: true }, _selectedElements: { type: Array }, }"
            },
            {
              "kind": "method",
              "name": "_addEvents",
              "description": "Add events from filters",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_getSelections",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Add events from filters",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_remove",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Remove items from list and filter",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "createRenderRoot"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "filterid",
              "description": "ids der Filter, die abgebildet werden sollen (Komma-separierte Liste)",
              "type": {
                "text": "String"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "resetLabel",
              "type": {
                "text": "String"
              },
              "description": "Label für den Zurücksetzen Button",
              "default": "\"Alle entfernen\""
            },
            {
              "kind": "field",
              "name": "_selectedElements",
              "type": {
                "text": "Array"
              },
              "description": "Filtered elements",
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "categorize",
              "type": {
                "text": "Boolean"
              },
              "description": "Alternative Darstellung",
              "default": "false"
            }
          ],
          "events": [
            {
              "name": "wm-filter-updated",
              "type": {
                "text": "CustomEvent"
              }
            }
          ],
          "superclass": {
            "name": "s",
            "module": "/dist/js/lit-element-8bc32369.js"
          },
          "tagName": "wm-filter-selection",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "wm-filter-selection",
          "declaration": {
            "name": "FilterSelection",
            "module": "dist/js/components/FilterSelection/FilterSelection.js"
          }
        },
        {
          "kind": "js",
          "name": "FilterSelection",
          "declaration": {
            "name": "FilterSelection",
            "module": "dist/js/components/FilterSelection/FilterSelection.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/Footnote/Footnote.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Ein benutzerdefiniertes Webkomponente für die Verwaltung von Fußnoten in einem Dokument. Es werden verweise auf Fußnoten im Text gesucht und in einer Liste am Ende des Dokuments aufgeführt.\nEine Referenz im Text wird durch eine Zahl markiert, die auf die entsprechende Fußnote verweist.\nFußnoten sind numerierte Verweise am Ende einer Seite, die zusätzliche Informationen oder Erklärungen zu bestimmten Textpassagen bieten.\nBei Klick auf eine Fußnote wird der Benutzer zur entsprechenden Referenz im Text zurückgeführt.",
          "name": "Footnote",
          "members": [
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[styles]"
            },
            {
              "kind": "field",
              "name": "properties",
              "static": true,
              "readonly": true
            },
            {
              "kind": "method",
              "name": "collectFootnotes"
            },
            {
              "kind": "method",
              "name": "processFootnote",
              "parameters": [
                {
                  "name": "footnote"
                },
                {
                  "name": "index"
                }
              ]
            },
            {
              "kind": "method",
              "name": "generateId",
              "parameters": [
                {
                  "name": "index"
                }
              ]
            },
            {
              "kind": "method",
              "name": "getContent",
              "parameters": [
                {
                  "name": "footnote"
                }
              ]
            },
            {
              "kind": "method",
              "name": "updateFootnoteElement",
              "parameters": [
                {
                  "name": "footnote"
                },
                {
                  "name": "id"
                }
              ]
            },
            {
              "kind": "method",
              "name": "createLink",
              "parameters": [
                {
                  "name": "id"
                }
              ]
            },
            {
              "kind": "method",
              "name": "createRenderRoot"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "footnotes",
              "type": {
                "text": "array"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "\"Fußnoten\""
            },
            {
              "kind": "field",
              "name": "referenceLabel",
              "type": {
                "text": "string"
              },
              "default": "\"Zur Fußnote springen\""
            },
            {
              "kind": "field",
              "name": "footnoteLabel",
              "type": {
                "text": "string"
              },
              "default": "\"Zurück zu Referenz der Fußnote springen\""
            }
          ],
          "superclass": {
            "name": "s",
            "module": "/dist/js/lit-element-8bc32369.js"
          },
          "tagName": "wm-footnote",
          "customElement": true
        },
        {
          "kind": "variable",
          "name": "tagName",
          "type": {
            "text": "string"
          },
          "default": "\"wm-footnote\""
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "wm-footnote",
          "declaration": {
            "name": "Footnote",
            "module": "dist/js/components/Footnote/Footnote.js"
          }
        },
        {
          "kind": "js",
          "name": "Footnote",
          "declaration": {
            "name": "Footnote",
            "module": "dist/js/components/Footnote/Footnote.js"
          }
        },
        {
          "kind": "js",
          "name": "tagName",
          "declaration": {
            "name": "tagName",
            "module": "dist/js/components/Footnote/Footnote.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/Form/Form.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Beschreibung",
          "name": "Form",
          "slots": [
            {
              "description": "Contains the HTML form element und all form fields",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_form",
              "description": "The HTML form element",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_fields",
              "description": "All possible form field web components",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "properties",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ validate: { type: Boolean }, hideMaxlength: { type: Boolean }, hasValidationError: { type: Boolean, reflect: true }, }",
              "description": "Template for items the list of errors",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "firstUpdated"
            },
            {
              "kind": "method",
              "name": "_registerFormControls",
              "description": "Register all form controls with the form control registry",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_onSubmit",
              "description": "Validate form on submit",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_onReset",
              "description": "Handles form reset events\n\nResets all form fields, including custom components with formResetCallback\nmethods like wm-select.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_checkValidity",
              "description": "Iterate over fields and check validity",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleErrors",
              "description": "Toggle error summary and manage focus",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_setGlobalFormOptions",
              "description": "Propagate form options to all form fields",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "setErrors",
              "parameters": [
                {
                  "name": "errors",
                  "description": "Array of error objects { nodeName, id, msg }",
                  "type": {
                    "text": "Array"
                  }
                }
              ],
              "description": "Public method to set errors externally",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getErrors",
              "description": "Public method to get current errors",
              "return": {
                "type": {
                  "text": "Array"
                }
              }
            },
            {
              "kind": "method",
              "name": "createRenderRoot",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "render",
              "description": "Render the error summary based on reactive state"
            },
            {
              "kind": "field",
              "name": "validate",
              "type": {
                "text": "Boolean"
              },
              "description": "Eingabefeld live validieren\nWenn auf true gesetzt, werden alle Kindelemente mit dem Attribut \"validate\" versehen,\nwodurch diese bei jeder Eingabe validiert werden und Fehlermeldungen sofort anzeigen.\nDies ermöglicht eine sofortige Rückmeldung an den Benutzer, ohne auf die Formularübermittlung zu warten.",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "hideMaxlength",
              "type": {
                "text": "Boolean"
              },
              "description": "Verfügbare Zeichenanzahl in Text-Eingabefeldern verbergen",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "hasValidationError",
              "type": {
                "text": "Boolean"
              },
              "description": "Gibt an, ob das Formular Validierungsfehler enthält\nWird auf true gesetzt, wenn nach einer Validierung Fehler vorhanden sind.\nWird verwendet, um den Status des gesamten Formulars anzuzeigen.",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_formControlRegistry",
              "description": "Form control registry for managing form elements",
              "type": {
                "text": "FormControlRegistry"
              },
              "privacy": "private",
              "default": "new FormControlRegistry()"
            },
            {
              "kind": "field",
              "name": "_validationController",
              "default": "new FormValidationController(this, this._formControlRegistry)"
            }
          ],
          "superclass": {
            "name": "s",
            "module": "/dist/js/lit-element-8bc32369.js"
          },
          "summary": "FormErrorsummary/FormErrorsummary",
          "tagName": "wm-form",
          "customElement": true
        },
        {
          "kind": "variable",
          "name": "tagName",
          "type": {
            "text": "string"
          },
          "default": "\"wm-form\""
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "wm-form",
          "declaration": {
            "name": "Form",
            "module": "dist/js/components/Form/Form.js"
          }
        },
        {
          "kind": "js",
          "name": "Form",
          "declaration": {
            "name": "Form",
            "module": "dist/js/components/Form/Form.js"
          }
        },
        {
          "kind": "js",
          "name": "tagName",
          "declaration": {
            "name": "tagName",
            "module": "dist/js/components/Form/Form.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/FormBlock/FormBlock.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Blöcke in Formularen",
          "name": "FormBlock",
          "cssProperties": [
            {
              "description": "Hintergrundfarbe für Formularblöcke",
              "name": "--formblock-color"
            },
            {
              "description": "Innenabstand (Mobilansicht unter 64em)",
              "name": "--formblock-padding--mobil"
            },
            {
              "description": "Maximalbreite für den Content",
              "name": "--formblock-max-inline-size"
            },
            {
              "description": "Innenabstand (Desktopansicht ab 64em)",
              "name": "--formblock-padding--desktop"
            },
            {
              "description": "Hintergrundfarbe für Formularelemente auf nicht-weißem Hintergrund",
              "name": "--formblock-input-background"
            },
            {
              "description": "Abstand zwischen Blöcken",
              "name": "--formblock-gap"
            }
          ],
          "slots": [
            {
              "description": "Text",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "properties",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ duplicate: { type: String, reflect: true }, deleteLabel: { type: String }, duplicateLabel: { type: String }, cloneHeadingLabel: { type: String }, highlight: { type: String, reflect: true }, min: { type: Number }, max: { type: Number }, type: { type: String, reflect: true }, _clone: { type: Node }, _cloned: { type: String, reflect: true }, _last: { type: Boolean }, }"
            },
            {
              "kind": "field",
              "name": "_deleteButton",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_clones",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_formChildComponents",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[formStyles, styles]"
            },
            {
              "kind": "method",
              "name": "_deleteBlock",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Delete the block",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_focusFormBlockItem",
              "parameters": [
                {
                  "name": "block"
                }
              ],
              "description": "Focus the first focusable element",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_rewriteUniqueAttributeValues",
              "parameters": [
                {
                  "name": "clone"
                },
                {
                  "name": "count"
                },
                {
                  "name": "clean",
                  "default": "false"
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_rewriteUniqueAttributeValue",
              "parameters": [
                {
                  "name": "element",
                  "description": "The element you want to edit",
                  "type": {
                    "text": "Node"
                  }
                },
                {
                  "name": "attribute",
                  "description": "The affected attribute",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "count",
                  "description": "Counter",
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "description": "When we clone elements, we need to rewrite attribute values like id, for, name, etc. so that they are unique",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_addDeleteButton",
              "parameters": [
                {
                  "name": "clone"
                }
              ],
              "description": "Clone and append delete button",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_rewriteHeadings",
              "description": "Reset counter in headings if necessary",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_duplicateBlock",
              "description": "Duplicate a block",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_setupClone",
              "parameters": [
                {
                  "name": "clone",
                  "type": {
                    "text": "Node"
                  }
                },
                {
                  "name": "index"
                },
                {
                  "name": "clean",
                  "default": "false"
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getUpdateComplete"
            },
            {
              "kind": "method",
              "name": "_checkForClones",
              "description": "Clones can be created manually\nThis function accounts for manually created clones",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "cloneHeadingLabel",
              "description": "Benutzerdefinierte Überschrift",
              "type": {
                "text": "String"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "highlight",
              "description": "Section mit oder ohne Hintergrund.",
              "type": {
                "text": "'nebelgrau'"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "type",
              "description": "Art des Blocks",
              "type": {
                "text": "'text'"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "duplicateLabel",
              "type": {
                "text": "String"
              },
              "description": "Label des \"Duplizieren\"-Buttons",
              "default": "\"Weitere hinzufügen\""
            },
            {
              "kind": "field",
              "name": "deleteLabel",
              "type": {
                "text": "String"
              },
              "description": "Label des Löschen-Buttons",
              "default": "\"Löschen\""
            },
            {
              "kind": "field",
              "name": "duplicate",
              "description": "'true' für das gesamte Element oder ID für das Element, das dupliziert werden soll",
              "type": {
                "text": "String"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "min",
              "type": {
                "text": "Number"
              },
              "description": "Mindestanzahl von Blöcken",
              "default": "1"
            },
            {
              "kind": "field",
              "name": "max",
              "description": "Maximalanzahl von Blöcken",
              "type": {
                "text": "Number"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "_clone",
              "description": "the clone",
              "type": {
                "text": "Node"
              },
              "privacy": "private",
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "_cloned",
              "description": "id of the clones element",
              "type": {
                "text": "String"
              },
              "privacy": "private",
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "_last",
              "type": {
                "text": "Boolean"
              },
              "description": "Is this the last block?",
              "privacy": "private",
              "default": "true"
            }
          ],
          "events": [
            {
              "name": "delete",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "wm-block-deleted",
              "type": {
                "text": "CustomEvent"
              },
              "description": "Block wurde gelöscht.",
              "summary": "{ totalBlocks, totalClones, deletedBlock }"
            },
            {
              "name": "wm-block-duplicated",
              "type": {
                "text": "CustomEvent"
              },
              "description": "Block wurde dupliziert.",
              "summary": "Boolean"
            }
          ],
          "superclass": {
            "name": "s",
            "module": "/dist/js/lit-element-8bc32369.js"
          },
          "summary": "Button/Button",
          "tagName": "wm-formblock",
          "customElement": true
        },
        {
          "kind": "variable",
          "name": "tagName",
          "type": {
            "text": "string"
          },
          "default": "\"wm-formblock\""
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "wm-formblock",
          "declaration": {
            "name": "FormBlock",
            "module": "dist/js/components/FormBlock/FormBlock.js"
          }
        },
        {
          "kind": "js",
          "name": "FormBlock",
          "declaration": {
            "name": "FormBlock",
            "module": "dist/js/components/FormBlock/FormBlock.js"
          }
        },
        {
          "kind": "js",
          "name": "tagName",
          "declaration": {
            "name": "tagName",
            "module": "dist/js/components/FormBlock/FormBlock.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/FormErrorsummary/FormErrorsummary.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Auflistung von Fehlern in einem Formular, wenn es auf einer Seite mehrere Fehler gibt.\n\nDiese Komponente zeigt eine Zusammenfassung aller Validierungsfehler in einem Formular an.\nFehler werden als anklickbare Liste dargestellt, die zum entsprechenden Feld navigieren.\n\nDie Fehlermeldungen können über das Attribut 'summary-errormessage' an den Formularfeldern\nangepasst werden. Dies ermöglicht unterschiedliche Fehlermeldungen in der Zusammenfassung\nim Vergleich zu den Fehlermeldungen am Feld selbst.\n\nBeispiel:\n```html\n<wm-select\n  required\n  errormessage=\"Bitte wählen Sie eine Option\"\n  summary-errormessage=\"Bitte wählen Sie eine Option bei 'Antragsart'\"\n></wm-select>\n```",
          "name": "FormErrorsummary",
          "slots": [
            {
              "description": "Text bzw. Fehlereinträge (normalerweise vom Formular automatisch befüllt)",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "properties",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ heading: { type: String }, noFocus: { type: Boolean }, errors: { type: Number }, _errorItems: { state: true, type: Array } }"
            },
            {
              "kind": "field",
              "name": "_errors",
              "description": "Gibt die Liste der Fehlereinträge zurück",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "NodeList"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[globalStyles, styles]"
            },
            {
              "kind": "method",
              "name": "_focusFirstError",
              "description": "Fokussiert den ersten Fehlereintrag, wenn vorhanden\nDies verbessert die Barrierefreiheit, indem die Tastaturnavigation\nautomatisch zum ersten Fehler geleitet wird.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleSlotChange",
              "description": "Aktualisiert die Anzahl der Fehler und setzt den Fokus\nDiese Methode wird aufgerufen, wenn sich der Inhalt des Slots ändert,\nz.B. wenn neue Fehlereinträge hinzugefügt oder entfernt werden.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_jumpToError",
              "parameters": [
                {
                  "name": "e",
                  "description": "Das Klick-Event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Fokussiert das fehlerhafte Feld, wenn auf einen Fehlereintrag geklickt wird\n\nDiese Methode ermöglicht die Navigation zu fehlerhaften Feldern durch Klick\nauf die entsprechenden Einträge in der Fehlerübersicht.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "setSummaryMessage",
              "parameters": [
                {
                  "name": "errorId",
                  "description": "Die ID des fehlerhaften Feldes",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "message",
                  "description": "Die anzuzeigende Fehlermeldung in der Zusammenfassung",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Setzt eine benutzerdefinierte Fehlermeldung für einen bestimmten Fehlereintrag\n\nDiese Methode kann verwendet werden, um die Fehlermeldung in der Zusammenfassung\nprogrammatisch zu ändern, nachdem die Fehler bereits angezeigt wurden.\n\nBeispiel:\n```javascript\nconst errorSummary = document.querySelector('wm-formerrorsummary');\nerrorSummary.setSummaryMessage('inputField', 'Bitte geben Sie einen gültigen Namen ein');\n```",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "clearErrorTracking",
              "description": "Clear all processed error IDs - should be called when form is reset\nor when a new validation cycle begins",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "continueToNextError",
              "description": "Continue to the next set of errors while preserving error history\nThis is useful for multi-step validation where you want to handle\nerrors one at a time or in batches",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "hasMoreErrors",
              "description": "Check if there are more errors in previous iterations",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "_isErrorDuplicate",
              "parameters": [
                {
                  "name": "id",
                  "description": "The error ID to check",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if an error with the given ID already exists to prevent duplicates",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_trackError",
              "parameters": [
                {
                  "name": "id",
                  "description": "The error ID to track",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Track an error ID to prevent duplicates",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "updateWithErrors",
              "parameters": [
                {
                  "name": "errors",
                  "description": "Array of error objects",
                  "type": {
                    "text": "Array"
                  }
                },
                {
                  "name": "itemTemplate",
                  "description": "Template for error items",
                  "type": {
                    "text": "HTMLTemplateElement"
                  }
                }
              ],
              "description": "Update with error objects, preventing duplicates based on ID",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "_mergeErrorLists",
              "parameters": [
                {
                  "name": "passedErrors",
                  "description": "Errors passed to updateWithErrors",
                  "type": {
                    "text": "Array"
                  }
                },
                {
                  "name": "trackedErrors",
                  "description": "Errors from the central tracker",
                  "type": {
                    "text": "Array"
                  }
                }
              ],
              "description": "Merges the passed error list with errors from the central tracker",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "addError",
              "parameters": [
                {
                  "name": "error",
                  "description": "Error object with id, msg, and optional summaryMsg",
                  "type": {
                    "text": "Object"
                  }
                },
                {
                  "name": "itemTemplate",
                  "description": "Template for error item",
                  "type": {
                    "text": "HTMLTemplateElement"
                  }
                }
              ],
              "description": "Adds a single error to the summary",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "heading",
              "description": "Überschrift für die Fehlerliste. [ERRORS] ist ein Platzhalter für die Anzahl der Fehler, der automatisch ersetzt wird.",
              "type": {
                "text": "String"
              },
              "default": "`Es gibt [ERRORS] Fehler auf der Seite:`"
            },
            {
              "kind": "field",
              "name": "noFocus",
              "type": {
                "text": "Boolean"
              },
              "description": "Autofocus deaktivieren\nWenn auf 'true' gesetzt, wird der erste Fehlereintrag nicht automatisch fokussiert,\nwas nützlich sein kann, wenn die Fehlerübersicht in einem Modal oder einer anderen\nKomponente verwendet wird, die ihren eigenen Fokus verwaltet.",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "errors",
              "type": {
                "text": "Number"
              },
              "description": "Anzahl der Fehler\nDiese Eigenschaft wird automatisch aktualisiert, wenn Fehlereinträge hinzugefügt\noder entfernt werden. Der Wert wird in der Überschrift angezeigt.",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "_errorItems",
              "type": {
                "text": "Array"
              },
              "privacy": "private",
              "description": "Array of error items to render",
              "default": "[]"
            }
          ],
          "events": [
            {
              "description": "Wird ausgelöst, wenn auf einen Fehlereintrag geklickt wird Der Event enthält die ID des Feldes als `event.detail.id`",
              "name": "jump-to-error"
            }
          ],
          "superclass": {
            "name": "s",
            "module": "/dist/js/lit-element-8bc32369.js"
          },
          "summary": "FormBlock/FormBlock, Notification/Notification, List/List",
          "tagName": "wm-formerrorsummary",
          "customElement": true
        },
        {
          "kind": "variable",
          "name": "tagName",
          "type": {
            "text": "string"
          },
          "default": "\"wm-formerrorsummary\""
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "wm-formerrorsummary",
          "declaration": {
            "name": "FormErrorsummary",
            "module": "dist/js/components/FormErrorsummary/FormErrorsummary.js"
          }
        },
        {
          "kind": "js",
          "name": "FormErrorsummary",
          "declaration": {
            "name": "FormErrorsummary",
            "module": "dist/js/components/FormErrorsummary/FormErrorsummary.js"
          }
        },
        {
          "kind": "js",
          "name": "tagName",
          "declaration": {
            "name": "tagName",
            "module": "dist/js/components/FormErrorsummary/FormErrorsummary.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/FormGroup/FormGroup.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Gruppiert Formularelemente und führt Validierung für die gesamte Gruppe durch.\n\nEine FormGroup fasst thematisch zusammengehörige Formularelemente in einer\nFieldset-Struktur zusammen und ermöglicht die Validierung aller enthaltenen\nElemente als Einheit. Bei Validierungsfehlern wird eine Fehlermeldung für die\ngesamte Gruppe angezeigt.\n\nBeispiel:\n```html\n<wm-form-group legend=\"Adressdaten\" errormessage=\"Bitte füllen Sie alle Adressdaten aus\">\n  <wm-input id=\"street\" label=\"Straße\" required></wm-input>\n  <wm-input id=\"city\" label=\"Stadt\" required></wm-input>\n</wm-form-group>\n```",
          "name": "FormGroup",
          "slots": [
            {
              "description": "Formularelemente, die gruppiert werden sollen",
              "name": "default"
            },
            {
              "description": "Benutzerdefinierte Fehlermeldung (optional)",
              "name": "error"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "properties",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ errormessage: { type: String, attribute: \"errormessage\" }, summaryErrormessage: { type: String, attribute: \"summary-errormessage\" }, hasGroupError: { type: Boolean, reflect: true }, error: { type: String }, legend: { type: String, reflect: true }, _hasInteracted: { type: Boolean, state: true }, validate: { type: Boolean, reflect: true } }",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[globalStyles, formStyles]"
            },
            {
              "kind": "method",
              "name": "_setupMutationObserver",
              "description": "Sets up a mutation observer to track when form elements are added or removed",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_setupChildEventListeners",
              "description": "Sets up event listeners on all child form elements",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_onChildInput",
              "parameters": [
                {
                  "name": "event",
                  "description": "The input event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handles input events from child elements",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_onChildChange",
              "parameters": [
                {
                  "name": "event",
                  "description": "The change event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handles change events from child elements",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_onChildBlur",
              "parameters": [
                {
                  "name": "event",
                  "description": "The blur event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handles blur events from child elements",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_debounceValidation",
              "description": "Debounces validation to prevent excessive validation calls",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "description": "Bridge method to support Form's validation flow",
              "return": {
                "type": {
                  "text": "String"
                }
              },
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "method",
              "name": "validateGroup",
              "description": "Validiert alle untergeordneten Formularfelder in der Gruppe.\n\nDiese Methode durchläuft alle unterstützten Formularelemente innerhalb der Gruppe\nund prüft deren Gültigkeit. Wenn mindestens ein Element ungültig ist, wird die\nGruppe als fehlerhaft markiert.",
              "return": {
                "type": {
                  "text": "Object|String"
                }
              }
            },
            {
              "kind": "method",
              "name": "_setErrorDirectly",
              "parameters": [
                {
                  "name": "value",
                  "description": "Error message to set",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "description": "Internal method to set error state without triggering recursion",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "error",
              "description": "Setzt eine benutzerdefinierte Fehlermeldung für die Gruppe.",
              "type": {
                "text": "String"
              },
              "default": "undefined",
              "return": {
                "type": {
                  "text": "String"
                }
              },
              "parameters": [
                {
                  "description": "Die anzuzeigende Fehlermeldung",
                  "name": "value",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "method",
              "name": "showError",
              "parameters": [
                {
                  "name": "message"
                }
              ],
              "description": "Add showError and clearError methods that use the errorController"
            },
            {
              "kind": "method",
              "name": "clearError"
            },
            {
              "kind": "method",
              "name": "setDisabled",
              "parameters": [
                {
                  "name": "isDisabled",
                  "description": "Whether the form group should be disabled",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Sets the disabled state of the form group and all its child form elements",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "errormessage",
              "type": {
                "text": "String"
              },
              "description": "Fehlermeldung bei ungültiger Gruppeneingabe\nDiese Meldung wird angezeigt, wenn die Validierung der Gruppe fehlschlägt,\nz.B. wenn Pflichtfelder in der Gruppe nicht ausgefüllt sind.",
              "default": "\"\""
            },
            {
              "kind": "field",
              "name": "summaryErrormessage",
              "type": {
                "text": "String"
              },
              "description": "Spezifische Fehlermeldung für die Fehlerübersicht\nDiese Meldung wird in der Fehlerübersicht (wm-formerrorsummary) anstelle der normalen\nFehlermeldung angezeigt. Dies ist nützlich, um in der Übersicht kontextspezifischere\nFehlermeldungen anzuzeigen, z.B. \"Bitte geben Sie alle erforderlichen Adressdaten ein\"\nstatt nur \"Group validation error\".",
              "default": "\"\""
            },
            {
              "kind": "field",
              "name": "hasGroupError",
              "type": {
                "text": "Boolean"
              },
              "description": "Gibt an, ob die Gruppe einen Fehler hat\nWird auf \"true\" gesetzt, wenn mindestens ein Feld in der Gruppe nicht gültig ist.\nSteuert die Anzeige der Fehlermeldung und der visuellen Fehlermarkierung.",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_error",
              "type": {
                "text": "String"
              },
              "description": "Aktuelle Fehlermeldung der Gruppe",
              "privacy": "private",
              "default": "\"\""
            },
            {
              "kind": "field",
              "name": "legend",
              "type": {
                "text": "String"
              },
              "description": "Text für die Legende des Fieldsets\nDieser Text wird als Beschriftung der Formulargruppe verwendet.\nKann sowohl über das legend-Attribut als auch über einen legend-Slot angepasst werden.",
              "default": "\"Gruppe\""
            },
            {
              "kind": "field",
              "name": "_hasInteracted",
              "type": {
                "text": "Boolean"
              },
              "description": "Whether the user has interacted with the group",
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "validate",
              "type": {
                "text": "Boolean"
              },
              "description": "Whether to validate on input",
              "default": "false",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "_errorController",
              "description": "Add error state controller for centralized error handling",
              "type": {
                "text": "ErrorStateController"
              },
              "privacy": "private",
              "default": "new ErrorStateController(this)",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "_inErrorSetting",
              "type": {
                "text": "Boolean"
              },
              "description": "Flag to prevent infinite recursion in error handling",
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_isValidating",
              "type": {
                "text": "Boolean"
              },
              "description": "Flag to prevent infinite recursion in validation",
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_item",
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "static": true,
              "default": "true",
              "description": "Allow fields to participate in form submission and validation",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...s.shadowRootOptions, delegatesFocus: true, }",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "method",
              "name": "_defineErrorMessages",
              "description": "Define some custom error messages based on error and input type",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "method",
              "name": "_setValidity",
              "description": "Allow custom element to participate in form validation",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "method",
              "name": "_renderLabel",
              "parameters": [
                {
                  "name": "label"
                },
                {
                  "name": "id"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "method",
              "name": "_showRequired",
              "description": "Show * or required text",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "method",
              "name": "_dispatchFormEvent",
              "parameters": [
                {
                  "name": "eventName"
                },
                {
                  "name": "detail",
                  "default": "{}"
                }
              ],
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "method",
              "name": "_dispatchCustomEvent",
              "parameters": [
                {
                  "name": "eventName"
                },
                {
                  "name": "detail",
                  "default": "{}"
                }
              ],
              "description": "Helper method to dispatch events consistently",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "method",
              "name": "_handleBlur",
              "parameters": [
                {
                  "name": "e",
                  "description": "Blur Event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Custom blur event",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "method",
              "name": "_handleFocus",
              "parameters": [
                {
                  "name": "e",
                  "description": "focus Event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Custom focus event",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "method",
              "name": "_handleInvalid",
              "parameters": [
                {
                  "name": "errormessage"
                }
              ],
              "description": "Custom invalid event",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "method",
              "name": "reset",
              "description": "Reset the form control to its initial value",
              "privacy": "public",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "method",
              "name": "_renderWrapper",
              "parameters": [
                {
                  "name": "content"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "hasError",
              "type": {
                "text": "Boolean"
              },
              "description": "Is there an error?",
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "hideAsterisk",
              "type": {
                "text": "Boolean"
              },
              "description": "Text statt Sternchen darstellen",
              "default": "false",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "id",
              "description": "optionale ID",
              "type": {
                "text": "String"
              },
              "default": "undefined",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "description": "Name-Attribute in HTML",
              "type": {
                "text": "String"
              },
              "default": "undefined",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "String"
              },
              "description": "Wert des Elements",
              "default": "\"\"",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "String"
              },
              "description": "Bezeichnung des Eingabefeldes",
              "default": "\"\"",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "Boolean"
              },
              "description": "Pflichtfeld",
              "default": "false",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "requiredText",
              "type": {
                "text": "String"
              },
              "description": " Text für Pflichtfeld-Hinweis",
              "default": "\"Pflichtfeld\"",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "_internals",
              "description": "Attach internals for form submission and validation",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "_slotController",
              "description": "Slotcontroller",
              "type": {
                "text": "class"
              },
              "privacy": "private",
              "default": "new SlotController(this)",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "_id",
              "description": "Random id",
              "type": {
                "text": "String"
              },
              "privacy": "private",
              "default": "`${randomHash()}`",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "_formId",
              "description": "Form id",
              "type": {
                "text": "String"
              },
              "privacy": "private",
              "default": "`wm-form-item-${this._id}`",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "hint",
              "description": "Hinweis",
              "type": {
                "text": "String"
              },
              "default": "undefined",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "_hasHint",
              "type": {
                "text": "Boolean"
              },
              "description": "Is there a hint?",
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            }
          ],
          "mixins": [
            {
              "name": "FormWrapper",
              "module": "/dist/js/components/misc/form-wrapper.js"
            }
          ],
          "superclass": {
            "name": "s",
            "module": "/dist/js/lit-element-8bc32369.js"
          },
          "summary": "Form/Form, FormBlock/FormBlock",
          "tagName": "wm-form-group",
          "customElement": true,
          "events": [
            {
              "name": "eventName",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "name": "blur",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "name": "focus",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "name": "invalid",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "name": "reset",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "wm-form-group",
          "declaration": {
            "name": "FormGroup",
            "module": "dist/js/components/FormGroup/FormGroup.js"
          }
        },
        {
          "kind": "js",
          "name": "FormGroup",
          "declaration": {
            "name": "FormGroup",
            "module": "dist/js/components/FormGroup/FormGroup.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/FormProgress/FormProgress.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Fortschrittsanzeige für mehrseitige Formulare",
          "name": "FormProgress",
          "cssProperties": [
            {
              "description": "Standardfarbe",
              "name": "--formprogress-background-color"
            },
            {
              "description": "Farbe für aktive Schritte",
              "name": "--formprogress-background-color--active"
            },
            {
              "description": "Schriftfarbe für Schritte",
              "name": "--formprogress-font-color"
            },
            {
              "description": "Schriftfarbe für aktive Schritte",
              "name": "--formprogress-font-color--active"
            }
          ],
          "slots": [
            {
              "description": "Liste",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_list",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_steps",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_currentStep",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "properties",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ current: { type: Number, reflect: true }, label: { type: String }, }"
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_setCurrentStep",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_addEvents",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "current",
              "type": {
                "text": "Number"
              },
              "description": "Aktiver Schritt",
              "default": "1"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "Accessible Name der Navigation-Landmark",
              "default": "\"Fortschrittsanzeige\""
            }
          ],
          "superclass": {
            "name": "s",
            "module": "/dist/js/lit-element-8bc32369.js"
          },
          "tagName": "wm-formprogress",
          "customElement": true
        },
        {
          "kind": "variable",
          "name": "tagName",
          "type": {
            "text": "string"
          },
          "default": "\"wm-formprogress\""
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "wm-formprogress",
          "declaration": {
            "name": "FormProgress",
            "module": "dist/js/components/FormProgress/FormProgress.js"
          }
        },
        {
          "kind": "js",
          "name": "FormProgress",
          "declaration": {
            "name": "FormProgress",
            "module": "dist/js/components/FormProgress/FormProgress.js"
          }
        },
        {
          "kind": "js",
          "name": "tagName",
          "declaration": {
            "name": "tagName",
            "module": "dist/js/components/FormProgress/FormProgress.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/Gallery/Gallery.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Galerie",
          "name": "Gallery",
          "cssProperties": [
            {
              "description": "Breite der Bilder",
              "name": "--gallery-size"
            }
          ],
          "slots": [
            {
              "description": "Text",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "properties",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ fixed: { type: Boolean, reflect: true }, size: { type: Number }, }"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[styles]"
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ]
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "Number"
              },
              "description": "Größe der Vorschaubilder",
              "default": "208"
            },
            {
              "kind": "field",
              "name": "fixed",
              "type": {
                "text": "Boolean"
              },
              "description": "Größe der Vorschaubilder ist nicht fluide, sondern immer fix.",
              "default": "false"
            }
          ],
          "superclass": {
            "name": "s",
            "module": "/dist/js/lit-element-8bc32369.js"
          },
          "tagName": "wm-gallery",
          "customElement": true
        },
        {
          "kind": "variable",
          "name": "tagName",
          "type": {
            "text": "string"
          },
          "default": "\"wm-gallery\""
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "wm-gallery",
          "declaration": {
            "name": "Gallery",
            "module": "dist/js/components/Gallery/Gallery.js"
          }
        },
        {
          "kind": "js",
          "name": "Gallery",
          "declaration": {
            "name": "Gallery",
            "module": "dist/js/components/Gallery/Gallery.js"
          }
        },
        {
          "kind": "js",
          "name": "tagName",
          "declaration": {
            "name": "tagName",
            "module": "dist/js/components/Gallery/Gallery.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/Grid/Grid.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Komponente zur Darstellung eines Grid Layouts",
          "name": "Grid",
          "cssProperties": [
            {
              "description": "Abstand",
              "name": "--grid-spacing"
            }
          ],
          "slots": [
            {
              "name": "Cards"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "properties",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ gap: { type: String, reflect: true }, size: { type: String, reflect: true }, }"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[styles]"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "gap",
              "type": {
                "text": "'xs'|'s'|'m'|'l'"
              },
              "description": "Abstand zwischen Elementen",
              "default": "\"xs\""
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'s'|'m'|'l'|'full'"
              },
              "description": "Größe der Elemente - Cards",
              "default": "\"m\""
            }
          ],
          "superclass": {
            "name": "s",
            "module": "/dist/js/lit-element-8bc32369.js"
          },
          "tagName": "wm-grid",
          "customElement": true
        },
        {
          "kind": "variable",
          "name": "tagName",
          "type": {
            "text": "string"
          },
          "default": "\"wm-grid\""
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "wm-grid",
          "declaration": {
            "name": "Grid",
            "module": "dist/js/components/Grid/Grid.js"
          }
        },
        {
          "kind": "js",
          "name": "Grid",
          "declaration": {
            "name": "Grid",
            "module": "dist/js/components/Grid/Grid.js"
          }
        },
        {
          "kind": "js",
          "name": "tagName",
          "declaration": {
            "name": "tagName",
            "module": "dist/js/components/Grid/Grid.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/Header/Header.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Header der Website. Alternative zu &gt;header&lt;.\nWird automatisch kleiner auf großen Viewports, wenn die Seite gescrolled wurde.",
          "name": "Header",
          "cssProperties": [
            {
              "description": "Abstand zwischen Elementen in der 2. Zeile",
              "name": "--header-actions-gap"
            },
            {
              "description": "Hintergrundfarbe Navigation Level 1",
              "name": "--header-nav-level1-background-color"
            },
            {
              "description": "Hintergrundfarbe Navigation Level 2",
              "name": "--header-nav-level2-background-color"
            },
            {
              "description": "Hintergrundfarbe Navigation Level 3",
              "name": "--header-nav-level3-background-color"
            },
            {
              "description": "Hintergrundfarbe Navigationsflyout (Desktop)",
              "name": "--header-nav-flyout-background-color--desktop"
            },
            {
              "description": "Schriftfarbe der Navigations-Links",
              "name": "--header-nav-link-color"
            },
            {
              "description": "Schriftfarbe der Navigations-Links im Navigationsflyout (Desktop)",
              "name": "--header-nav-flyout-link-color--desktop"
            }
          ],
          "slots": [
            {
              "description": "1 oder 2 divs",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "properties",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ color: { type: String }, _scrolledOffset: { type: Number }, }"
            },
            {
              "kind": "field",
              "name": "_navAndActionsBar",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_actions",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[styles]"
            },
            {
              "kind": "method",
              "name": "_addGlobalEvents",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_scrollHeader",
              "description": "Check if page scrolled and apply or remove class that shrinks or expands the header",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "addAction",
              "parameters": [
                {
                  "name": "node",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Eine Action von außen hinzufügen"
            },
            {
              "kind": "method",
              "name": "_appendAction",
              "parameters": [
                {
                  "name": "node"
                }
              ],
              "description": "Adds a node to the actions wrapper",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "createRenderRoot",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "_scrolledOffset",
              "type": {
                "text": "Number"
              },
              "description": "When should the header expand/shrink",
              "privacy": "private",
              "default": "30"
            },
            {
              "kind": "field",
              "name": "color",
              "description": "Farbe der 2. Zeile im Header",
              "type": {
                "text": "'flieder'|'goldgelb'|'abendstimmung'|'morgenrot'|'frischgruen'|'wasserblau'"
              },
              "default": "undefined"
            }
          ],
          "superclass": {
            "name": "s",
            "module": "/dist/js/lit-element-8bc32369.js"
          },
          "tagName": "wm-header",
          "customElement": true
        },
        {
          "kind": "variable",
          "name": "tagName",
          "type": {
            "text": "string"
          },
          "default": "\"wm-header\""
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "wm-header",
          "declaration": {
            "name": "Header",
            "module": "dist/js/components/Header/Header.js"
          }
        },
        {
          "kind": "js",
          "name": "Header",
          "declaration": {
            "name": "Header",
            "module": "dist/js/components/Header/Header.js"
          }
        },
        {
          "kind": "js",
          "name": "tagName",
          "declaration": {
            "name": "tagName",
            "module": "dist/js/components/Header/Header.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/Highlight/Highlight.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Farbliche Texthervorhebung\n\nHighlight mit Hintergrundfarbe kann eingesetzt werden, um einzelne Sätze oder Absätze farblich hervorzuheben.\n\nHighlight mit Rahmenlinien heben Inhalte hervor, zum Beispiel kurzfristig geänderte Öffnungszeiten oder ein kurzfristig nicht verfügbares Service. Fastschwarz ist üblich für Archiv-Inhalte.",
          "name": "Highlight",
          "cssProperties": [
            {
              "description": "Hintergrundfarbe",
              "name": "--highlight-background-color"
            },
            {
              "description": "Rahmenfarbe",
              "name": "--highlight-border-color"
            },
            {
              "description": "Rahmenstärke",
              "name": "--highlight-border-width"
            },
            {
              "description": "Textfarbe",
              "name": "--highlight-font-color"
            },
            {
              "description": "Innenabstand",
              "name": "--highlight-padding"
            },
            {
              "description": "Innenabstand der Large-Variante in der Desktopansicht (ab 64em)",
              "name": "--highlight-padding--large"
            }
          ],
          "slots": [
            {
              "description": "HTML oder Text-Content",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "properties",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ color: { type: String, reflect: true }, type: { type: String, reflect: true } }"
            },
            {
              "kind": "method",
              "name": "createRenderRoot",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "color",
              "type": {
                "text": "'abendstimmung'|'abendstimmung-light'|'flieder'|'flieder-light'|'frischgruen'|'frischgruen-light'|'goldgelb'|'goldgelb-light'|'morgenrot'|'morgenrot-light'|'nebelgrau'|'nebelgrau-light'|'wasserblau'|'wasserblau-light'"
              },
              "description": "Farbe",
              "default": "\"nebelgrau-light\""
            },
            {
              "kind": "field",
              "name": "type",
              "description": "Art der Hervorhebung",
              "type": {
                "text": "'prominent'"
              },
              "default": "undefined"
            }
          ],
          "superclass": {
            "name": "s",
            "module": "/dist/js/lit-element-8bc32369.js"
          },
          "tagName": "wm-highlight",
          "customElement": true
        },
        {
          "kind": "variable",
          "name": "tagName",
          "type": {
            "text": "string"
          },
          "default": "\"wm-highlight\""
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "wm-highlight",
          "declaration": {
            "name": "Highlight",
            "module": "dist/js/components/Highlight/Highlight.js"
          }
        },
        {
          "kind": "js",
          "name": "Highlight",
          "declaration": {
            "name": "Highlight",
            "module": "dist/js/components/Highlight/Highlight.js"
          }
        },
        {
          "kind": "js",
          "name": "tagName",
          "declaration": {
            "name": "tagName",
            "module": "dist/js/components/Highlight/Highlight.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/Icon/Icon.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Icon aus dem vordefinierten Spritesheet",
          "name": "Icon",
          "slots": [
            {
              "description": "Beschreibung des Icons. Nur befüllen, wenn der Inhalt auch wirklich im Accessbility Tree sein soll.",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "properties",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ iconid: { type: String }, width: { type: Number }, height: { type: Number }, class: { type: String }, _accessibleName: { type: String, attribute: false }, }"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[styles]"
            },
            {
              "kind": "method",
              "name": "firstUpdated"
            },
            {
              "kind": "method",
              "name": "_attrDefined",
              "parameters": [
                {
                  "name": "value",
                  "description": "a string",
                  "type": {
                    "text": "(string)"
                  }
                },
                {
                  "name": "returnvalue",
                  "description": "if defined, the value the function should return for the attribute",
                  "type": {
                    "text": "(string)"
                  }
                }
              ],
              "description": "Checks whether a value is defined and returns either the value or a custom value (second param)",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_renderSVG",
              "description": "The svg only has an accessible name and role=img if this._accessibleName is defined\nIf this._accessibleName is not defined, aria-hidden is set to true",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "width",
              "type": {
                "text": "Number"
              },
              "description": "Standardbreite in Pixel",
              "default": "26"
            },
            {
              "kind": "field",
              "name": "height",
              "description": "Entspricht Breite wenn nicht definiert",
              "type": {
                "text": "Number"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "class",
              "description": "Additional classes",
              "type": {
                "text": "String"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "iconid",
              "type": {
                "text": "'amtswege'|'burger'|'check'|'chevron-down'|'chevron-left'|'chevron-double-left'|'chevron-right'|'chevron-double-right'|'chevron-up'|'clock'|'close'|'contact'|'contact_alternative'|'contact_loggedin'|'contact_notification'|'download'|'email'|'embed'|'error'|'euro'|'external'|'facebook'|'fullscreen'|'gams'|'gamesno'|'grid'|'handson'|'home'|'hide'|'info'|'instagram'|'language'|'link'|'linkedin'|'message'|'money'|'park'|'pause'|'pin'|'play'|'play-button'|'search'|'settings'|'share'|'sidebar'|'show'|'sound'|'success'|'twitter'|'trash'|'water'|'waterno'|'warning'|'whatsapp'|'wien-bot'|'wifi'|'youtube'|'x'|'xing'|'zoom'"
              },
              "description": "ID",
              "default": "\"\""
            },
            {
              "kind": "field",
              "name": "_accessibleName",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "\"\""
            }
          ],
          "superclass": {
            "name": "s",
            "module": "/dist/js/lit-element-8bc32369.js"
          },
          "tagName": "wm-icon",
          "customElement": true
        },
        {
          "kind": "variable",
          "name": "tagName",
          "type": {
            "text": "string"
          },
          "default": "\"wm-icon\""
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "wm-icon",
          "declaration": {
            "name": "Icon",
            "module": "dist/js/components/Icon/Icon.js"
          }
        },
        {
          "kind": "js",
          "name": "Icon",
          "declaration": {
            "name": "Icon",
            "module": "dist/js/components/Icon/Icon.js"
          }
        },
        {
          "kind": "js",
          "name": "tagName",
          "declaration": {
            "name": "tagName",
            "module": "dist/js/components/Icon/Icon.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/Iframe/Iframe.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Wrapper für Iframes",
          "name": "Iframe",
          "slots": [
            {
              "description": "Text",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "properties",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ _iframe: { type: Node }, _src: { type: String }, _observer: { type: IntersectionObserver }, }"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[ i` :host { display: block; } `, ]"
            },
            {
              "kind": "method",
              "name": "_handleIntersection",
              "parameters": [
                {
                  "name": "entries"
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_removeSource",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "_iframe",
              "privacy": "private",
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "_src",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "\"\""
            },
            {
              "kind": "field",
              "name": "_observer",
              "privacy": "private",
              "default": "undefined"
            }
          ],
          "superclass": {
            "name": "s",
            "module": "/dist/js/lit-element-8bc32369.js"
          },
          "tagName": "wm-iframe",
          "customElement": true
        },
        {
          "kind": "variable",
          "name": "tagName",
          "type": {
            "text": "string"
          },
          "default": "\"wm-iframe\""
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "wm-iframe",
          "declaration": {
            "name": "Iframe",
            "module": "dist/js/components/Iframe/Iframe.js"
          }
        },
        {
          "kind": "js",
          "name": "Iframe",
          "declaration": {
            "name": "Iframe",
            "module": "dist/js/components/Iframe/Iframe.js"
          }
        },
        {
          "kind": "js",
          "name": "tagName",
          "declaration": {
            "name": "tagName",
            "module": "dist/js/components/Iframe/Iframe.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/Input/Input.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Input",
          "cssProperties": [
            {
              "description": "Hintergrund Combobox",
              "name": "--input-combobox-background-color"
            },
            {
              "description": "Hintergrund hervorgehobenes Element",
              "name": "--input-combobox-background-color--active"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "properties",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ type: { type: String, reflect: true }, dataset: { type: String }, toggleButton: { type: Boolean }, setvalue: { type: String }, _originalType: { type: String }, _passwordVisible: { type: Boolean }, _value: { type: String }, disabled: { type: Boolean, reflect: true }, pattern: { type: String }, hasError: { type: Boolean, reflect: true }, showErrors: { type: Boolean, reflect: true }, validate: { type: Boolean, reflect: true }, value: { type: String }, suppressError: { type: Boolean }, errormessage: { type: String, attribute: 'errormessage' }, summaryErrormessage: { type: String, attribute: 'summary-errormessage' }, validator: { type: Function }, _initialValue: { state: true }, _hasInteracted: { state: true } // Tracks if the user has interacted with the input }",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "method",
              "name": "_showPassword",
              "description": "Umschalten der Info-Anzeige",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_setupValidationObservers",
              "description": "Sets up observers to trigger validation when validate attributes change\nThis is essential for proper live validation behavior",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_updateFormValue",
              "description": "Updates the form value if this element is form-associated",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ],
              "description": "Captures initial value from DOM after first render",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "method",
              "name": "getOptions",
              "parameters": [
                {
                  "name": "value",
                  "description": "Der aktuelle Eingabewert für die Suche",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "url",
                  "description": "Die URL, von der Daten abgerufen werden sollen",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "description": "Abrufen von Optionen aus einer Datenquelle\n\nDiese Methode bietet Combobox-Komponenten die Möglichkeit, Daten von einer API abzurufen.\nIm folgenden Format sollten die zurückgegebenen Daten genutzt werden:\n```\n[\n  {\n    text: \"Anzeigetext\",\n    value: \"tatsächlicher_wert\",\n    children: [] // Optional für verschachtelte Optionen\n  }\n]\n```",
              "return": {
                "type": {
                  "text": "Promise<Array|null>"
                }
              },
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "setOptions",
              "parameters": [
                {
                  "name": "structuredData",
                  "description": "Array von Option-Objekten im erforderlichen Format",
                  "type": {
                    "text": "Array"
                  }
                }
              ],
              "description": "Liste in Combobox befüllen\n\nDiese Methode legt dynamisch Optionen für die Combobox fest.\nOptionen sollten im folgenden Format bereitgestellt werden:\n```\n[\n  {\n    text: \"Anzeigetext\", // Der Text, der angezeigt wird\n    value: \"eigentlicher_wert\", // Der Wert, der im Formular übermittelt wird\n    children: [] // Optional für verschachtelte Optionen\n  }\n]\n```\n\nFür Barrierefreiheit und optimale Nutzung beachten Sie:\n- Begrenzen Sie die Anzahl der Optionen für bessere Leistung\n- Stellen Sie sicher, dass jede Option eindeutige Werte hat",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "_handleClick",
              "description": "Click Event on combobox when this.toggleButton is true",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleInput",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Close submenus automatically when leaving sub menu list using the keyboard",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "method",
              "name": "_handleChange",
              "parameters": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleBlur",
              "parameters": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleFocus",
              "parameters": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleKeyDown",
              "parameters": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleKeyUp",
              "parameters": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "kind": "method",
              "name": "reset",
              "description": "Resets the component to its initial state",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "description": "Reset the component to its initial state (called by forms)",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "method",
              "name": "setValue",
              "parameters": [
                {
                  "name": "value",
                  "description": "The new value to set",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "options",
                  "default": "{}",
                  "description": "Additional options",
                  "type": {
                    "text": "@param {boolean} options.validate - Whether to validate after setting (default: true)\n\t * @param {boolean} options.silent - Whether to skip dispatching events (default: false)\n\t * "
                  }
                }
              ],
              "description": "Public method to set the input value programmatically\nThis ensures all side effects are properly triggered",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "setDisabled",
              "parameters": [
                {
                  "name": "isDisabled",
                  "description": "Whether the component should be disabled",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Sets or removes disabled state",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "validateField",
              "description": "Forces validation of the component",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "updateUI",
              "description": "Explicitly forces the component to update its UI state",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "_setValue",
              "parameters": [
                {
                  "name": "newValue",
                  "description": "Value to set",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Helper to ensure proper value setting with all necessary side effects",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "description": "Standard validation method that respects component state",
              "privacy": "public",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "parameters": [
                {
                  "name": "message"
                }
              ],
              "description": "Public method to set a custom validation message",
              "privacy": "public",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "method",
              "name": "reportValidity"
            },
            {
              "kind": "method",
              "name": "_toggleOptions",
              "description": "Combobox-Optionen umschalten\n\nSchaltet die Sichtbarkeit des Dropdown-Menüs der Combobox um.\nDies wird intern verwendet, wenn der Benutzer auf den Toggle-Button klickt.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "method",
              "name": "_cancelSearch",
              "description": "Cancel search/reset filtering state when Escape is pressed.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "method",
              "name": "hideOptions",
              "parameters": [
                {
                  "name": "setFocus",
                  "default": "true",
                  "description": "Fokus auf Input legen (true)",
                  "type": {
                    "text": "Boolean"
                  }
                }
              ],
              "description": "Liste in Combobox verbergen",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ],
              "description": "Override of updated lifecycle to handle attribute/property changes",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "method",
              "name": "showError",
              "parameters": [
                {
                  "name": "message",
                  "description": "The error message to display",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Shows an error message for this input"
            },
            {
              "kind": "method",
              "name": "clearError",
              "description": "Clears any error state from this input"
            },
            {
              "kind": "method",
              "name": "_performValidation",
              "description": "Override _performValidation from FormStateManager to use ErrorStateController",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "method",
              "name": "_validateWithoutController",
              "description": "Validation method that doesn't use the controller to avoid circular references",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "'combobox'|'date'|'datetime-local'|'email'|'number'|'password'|'tel'|'text'|'time'|'url'"
              },
              "description": "Art des Eingabefelds",
              "default": "\"text\""
            },
            {
              "kind": "field",
              "name": "_originalType",
              "type": {
                "text": "string"
              },
              "description": "Ursprünglicher Eingabetyp (relevant für das Umschalten der Sichtbarkeit bei Passwort-Eingabefeldern)",
              "privacy": "private",
              "default": "\"text\""
            },
            {
              "kind": "field",
              "name": "_passwordVisible",
              "type": {
                "text": "Boolean"
              },
              "description": "Info-Anzeige aktiv",
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "dataset",
              "type": {
                "text": "Boolean"
              },
              "description": "Combobox: Feld in der Response, das die Daten enthält, zum Beispiel bei OGD üblicherweise \"features\"",
              "default": "\"\""
            },
            {
              "kind": "field",
              "name": "toggleButton",
              "type": {
                "text": "Boolean"
              },
              "description": "Button in Combobox anzeigen",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "setvalue",
              "type": {
                "text": "Boolean"
              },
              "description": "Combobox: Wert programmatisch setzen",
              "default": "\"\""
            },
            {
              "kind": "field",
              "name": "_value",
              "description": "Eine Combobox kann einen sichtbaren Wert und einen übermittelten Wert haben. _value speichert den übermittelten Wert.",
              "privacy": "private",
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "Boolean"
              },
              "description": "Gibt an, ob das Element deaktiviert ist oder nicht",
              "default": "false",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "field",
              "name": "pattern",
              "description": "Regulärer Expressen RegEx für die Validierung",
              "type": {
                "text": "String"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "hasError",
              "type": {
                "text": "Boolean"
              },
              "description": "Gibt an, ob das Element einen Fehler hat\nDies ist ein Statusattribut, das anzeigt, ob aktuell ein Validierungsfehler vorliegt.\nEs wird auf true gesetzt, wenn die Validierung fehlschlägt, und auf false zurückgesetzt,\nwenn die Validierung erfolgreich ist oder das Formular zurückgesetzt wird.",
              "default": "false",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "field",
              "name": "showErrors",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Steuert die Anzeige von Fehlermeldungen\nIm Gegensatz zu 'hasError' steuert dieses Attribut, ob Fehlermeldungen angezeigt werden sollen.\nWenn auf true gesetzt, werden Validierungsfehler sofort angezeigt, ohne auf eine Formularübermittlung zu warten.\nWird typischerweise vom übergeordneten wm-form Element gesteuert.",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "field",
              "name": "validate",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Aktiviert die Validierung bei Eingabe\nWenn auf true gesetzt, werden Eingaben sofort validiert und Fehler entsprechend angezeigt,\nohne auf eine Formularübermittlung zu warten.\nWird typischerweise vom übergeordneten wm-form Element gesteuert.",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Aktueller Wert des Eingabefelds",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "field",
              "name": "defaultValue",
              "type": {
                "text": "String"
              },
              "description": "Standardwert für das Zurücksetzen des Formulars",
              "default": "''",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "field",
              "name": "suppressError",
              "type": {
                "text": "Boolean"
              },
              "description": "Unterdrückt die Anzeige von Fehlermeldungen",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "errormessage",
              "type": {
                "text": "String"
              },
              "description": "Fehlermeldung bei ungültiger Eingabe\nDiese Meldung wird direkt am Eingabefeld angezeigt, wenn es validiert wird und ungültig ist.",
              "default": "\"\""
            },
            {
              "kind": "field",
              "name": "summaryErrormessage",
              "type": {
                "text": "String"
              },
              "description": "Spezifische Fehlermeldung für die Fehlerübersicht\nDiese Meldung wird in der Fehlerübersicht (wm-formerrorsummary) anstelle der normalen\nFehlermeldung angezeigt. Dies ist nützlich, um in der Übersicht kontextspezifischere\nFehlermeldungen anzuzeigen, z.B. \"Bitte geben Sie Ihren Namen bei 'Kontaktdaten' ein\"\nstatt nur \"Dieses Feld ist erforderlich\".",
              "default": "\"\""
            },
            {
              "kind": "field",
              "name": "_initialValue",
              "type": {
                "text": "String"
              },
              "description": "Initial value for reset functionality",
              "default": "''",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "field",
              "name": "_hasInteracted",
              "type": {
                "text": "Boolean"
              },
              "description": "Tracks if the user has interacted with the input",
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_errorController",
              "default": "new ErrorStateController(this)"
            },
            {
              "kind": "field",
              "name": "STATES",
              "static": true,
              "readonly": true,
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "method",
              "name": "_resetToInitialValue",
              "description": "Fallback reset implementation",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "method",
              "name": "_getInputElement",
              "description": "Helper method to find input element in shadow DOM",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "method",
              "name": "_changeState",
              "parameters": [
                {
                  "name": "newState",
                  "description": "The target state",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "options",
                  "default": "{}",
                  "description": "Additional options for the transition",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "description": "Transitions the component to a new state",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "method",
              "name": "_handleStateTransition",
              "parameters": [
                {
                  "name": "oldState",
                  "description": "Previous state",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "newState",
                  "description": "New state",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "options",
                  "default": "{}",
                  "description": "Additional options",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "description": "Handle component-specific behavior for state transitions",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "method",
              "name": "_updateErrorState",
              "parameters": [
                {
                  "name": "errorMessage",
                  "description": "Error message to display",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "description": "Centralized method to update component error state",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "method",
              "name": "_getFormControlElement",
              "description": "Returns the form control element from shadow DOM\nComponents should override this to return their specific control element",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "method",
              "name": "_announceStateChange",
              "parameters": [
                {
                  "name": "state",
                  "description": "State to announce",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "description": "Announces state changes to screen readers",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "parameters": [
                {
                  "name": "disabled",
                  "description": "Whether the control should be disabled",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Called when the element's form sets the disabled state",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "field",
              "name": "_componentState",
              "privacy": "private",
              "description": "Current component state",
              "type": {
                "text": "String"
              },
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "field",
              "name": "_previousState",
              "type": {
                "text": "String"
              },
              "privacy": "private",
              "description": "Previous component state for transitions",
              "default": "null",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "String"
              },
              "description": "Current error message",
              "default": "''",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[globalStyles, formStyles, formItemStyles]",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "field",
              "name": "_output",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "method",
              "name": "_setAriaSelected",
              "parameters": [
                {
                  "name": "current",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "method",
              "name": "_filterOptions",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Filter existing options in a filterable combobox",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "method",
              "name": "_addEvents",
              "description": "Add click and key events for option list",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "method",
              "name": "_markOption",
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "description": "Highlight the current option in the list of options",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "method",
              "name": "_clickOutSide",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "method",
              "name": "showOptions",
              "description": "Liste in Combobox anzeigen",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "method",
              "name": "_announceOptions",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "method",
              "name": "_selectOption",
              "parameters": [
                {
                  "name": "cur"
                },
                {
                  "name": "elements",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Turn Nodelist into Array",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "method",
              "name": "_renderElement",
              "parameters": [
                {
                  "name": "content"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "method",
              "name": "_defineErrorMessages",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "method",
              "name": "_handleValidation",
              "description": "Centralizes validation handling for consistent behavior",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "method",
              "name": "clearErrorState",
              "description": "Clear error state and validation message",
              "privacy": "public",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "method",
              "name": "_synchronizeErrorState",
              "parameters": [
                {
                  "name": "message",
                  "default": "''",
                  "description": "Error message or empty string to clear error",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "description": "Synchronizes the error state between component, underlying input,\nand form association API",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "field",
              "name": "announcementText",
              "type": {
                "text": "String"
              },
              "description": "Text, der angekündigt wird, wenn Optionen angezeigt werden",
              "default": "\"Suchvorschläge werden angezeigt. Verwenden Sie Pfeiltasten um zu navigieren\"",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "field",
              "name": "maxlength",
              "description": "Maximale Zeichenanzahl, die eingegeben werden darf",
              "type": {
                "text": "Number"
              },
              "default": "undefined",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "field",
              "name": "placeholder",
              "description": "placeholder-Attribut in HTML",
              "type": {
                "text": "String"
              },
              "default": "undefined",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "field",
              "name": "search",
              "description": "Art des Suchfeldes",
              "type": {
                "text": "'hidden'|'visible'|'hiddenmobile'"
              },
              "default": "undefined",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "field",
              "name": "size",
              "description": "size-Attribute in HTML",
              "type": {
                "text": "String"
              },
              "default": "undefined",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "field",
              "name": "filter",
              "type": {
                "text": "Boolean"
              },
              "description": "Liste in Combobox beim Tippen filtern",
              "default": "false",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "field",
              "name": "hideMaxlength",
              "type": {
                "text": "Boolean"
              },
              "description": "Verfügbare Zeichenanzahl verbergen",
              "default": "false",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "field",
              "name": "_highlightedOptionID",
              "description": "id of the currently Highlight Option",
              "type": {
                "text": "String"
              },
              "privacy": "private",
              "default": "undefined",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "field",
              "name": "maxlengthText",
              "type": {
                "text": "String"
              },
              "description": "Text for maxlength message",
              "default": "\"Es sind noch {remaining} Zeichen verfügbar\"",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "field",
              "name": "patternMismatchMessage",
              "type": {
                "text": "String"
              },
              "description": "Pattern validation message",
              "default": "\"Bitte geben Sie einen gültigen Wert ein\"",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "field",
              "name": "info",
              "default": "undefined",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "field",
              "name": "_infoOpen",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            }
          ],
          "mixins": [
            {
              "name": "FormStateManager",
              "module": "/dist/js/components/misc/form-state-manager.js"
            },
            {
              "name": "FormText",
              "module": "/dist/js/components/misc/form-text.js"
            }
          ],
          "superclass": {
            "name": "s",
            "module": "/dist/js/lit-element-8bc32369.js"
          },
          "summary": "Button/Button, Icon/Icon, Stack/Stack",
          "tagName": "wm-input",
          "customElement": true,
          "events": [
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "tagName",
          "type": {
            "text": "string"
          },
          "default": "\"wm-input\""
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "wm-input",
          "declaration": {
            "name": "Input",
            "module": "dist/js/components/Input/Input.js"
          }
        },
        {
          "kind": "js",
          "name": "Input",
          "declaration": {
            "name": "Input",
            "module": "dist/js/components/Input/Input.js"
          }
        },
        {
          "kind": "js",
          "name": "tagName",
          "declaration": {
            "name": "tagName",
            "module": "dist/js/components/Input/Input.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/List/List.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Darstellung von Listen vertikal, horizontal oder mit Trenner",
          "name": "List",
          "cssProperties": [
            {
              "description": "Rahmen zwischen Listenelementen",
              "name": "--list-border"
            },
            {
              "description": "Rahmenfarbe",
              "name": "--list-border-color"
            },
            {
              "description": "Abstand zwischen Elementen",
              "name": "--list-gap"
            },
            {
              "description": "Hintergrundbild des 2. Buttons",
              "name": "--list-link-background-image"
            }
          ],
          "slots": [
            {
              "description": "<ol> oder <ul>",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "properties",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ alignment: { type: String, reflect: true }, block: { type: Boolean, reflect: true }, clean: { type: Boolean, reflect: true }, gap: { type: String, reflect: true }, separator: { type: String, reflect: true }, type: { type: String, reflect: true }, }"
            },
            {
              "kind": "method",
              "name": "createRenderRoot",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "clean",
              "type": {
                "text": "Boolean"
              },
              "description": "Liste ohne Aufzählungszeichen, Innen- und Außenabstand",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "gap",
              "type": {
                "text": "'xxs'|'xs'|'s'|'m'|'l'|'none'"
              },
              "description": "Abstand zwischen Elementen",
              "default": "\"s\""
            },
            {
              "kind": "field",
              "name": "type",
              "description": "Art der Darstellung",
              "type": {
                "text": "'horizontal'|'row'"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "separator",
              "description": "Trennzeichen zwischen Elementen",
              "type": {
                "text": "'pipe'"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "alignment",
              "description": "Ausrichtung der Elemente",
              "type": {
                "text": "'center'"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "block",
              "type": {
                "text": "Boolean"
              },
              "description": "Ganze Zeile verlinken?",
              "default": "false"
            }
          ],
          "superclass": {
            "name": "s",
            "module": "/dist/js/lit-element-8bc32369.js"
          },
          "tagName": "wm-list",
          "customElement": true
        },
        {
          "kind": "variable",
          "name": "tagName",
          "type": {
            "text": "string"
          },
          "default": "\"wm-list\""
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "wm-list",
          "declaration": {
            "name": "List",
            "module": "dist/js/components/List/List.js"
          }
        },
        {
          "kind": "js",
          "name": "List",
          "declaration": {
            "name": "List",
            "module": "dist/js/components/List/List.js"
          }
        },
        {
          "kind": "js",
          "name": "tagName",
          "declaration": {
            "name": "tagName",
            "module": "dist/js/components/List/List.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/Map/Map.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Stadtplan-Beta Karten",
          "name": "Map",
          "cssProperties": [
            {
              "description": "Höhe",
              "name": "--map-height"
            },
            {
              "description": "Seitenverhältnis",
              "name": "--map-ratio"
            },
            {
              "description": "Pin",
              "name": "--map-defaultPinAlt"
            }
          ],
          "slots": [
            {
              "description": "Mapmarker",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_input",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_options",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "properties",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ center: { type: String }, cluster: { type: Boolean }, id: { type: String }, controls: { type: Boolean }, zoom: { type: Number }, _mapLoaded: { type: Boolean, attribute: false }, _markers: { type: Array, attribute: false }, _markersLayer: { type: Object, attribute: false }, _isInViewport: { type: Boolean }, _searchVisible: { type: Boolean }, _debug: { type: Boolean }, }"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[mtk, styles]"
            },
            {
              "kind": "method",
              "name": "_checkVisibility",
              "parameters": [
                {
                  "name": "threshold",
                  "default": "0.2"
                }
              ],
              "description": "Check if the map is visible in the viewport",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ],
              "description": "Load MTK only as soon as the map is visible in the viewport",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleIntersection",
              "parameters": [
                {
                  "name": "entries"
                }
              ],
              "description": "Map visible in viewport?",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_getMarkers",
              "description": "Parse slotted markers",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "resetBounds",
              "description": "Kartenausschnitt aktualisieren"
            },
            {
              "kind": "method",
              "name": "setCenter",
              "parameters": [
                {
                  "name": "lng",
                  "description": "Longitude",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "lat",
                  "description": "Latitude",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "description": "Karte zentrieren"
            },
            {
              "kind": "method",
              "name": "_coordsToArray",
              "parameters": [
                {
                  "name": "str"
                }
              ],
              "description": "Transform coords string to array",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_initMTK",
              "description": "Initialize map toolkit",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_popUpAddControls",
              "parameters": [
                {
                  "name": "text"
                },
                {
                  "name": "data",
                  "type": {
                    "text": "Object"
                  }
                },
                {
                  "name": "marker",
                  "type": {
                    "text": "Object"
                  }
                },
                {
                  "name": "id",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "description": "Add button wrapper and buttons to component",
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "_popUpAddDeleteButton",
              "parameters": [
                {
                  "name": "marker",
                  "type": {
                    "text": "Object"
                  }
                },
                {
                  "name": "id",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "description": "Add delete button to draggable markers",
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "_popUpAddApplyButton",
              "parameters": [
                {
                  "name": "data",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "description": "Add apply button to draggable markers",
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "_hideOptions",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_loadOptions",
              "parameters": [
                {
                  "name": "text"
                },
                {
                  "name": "data",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "marker",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "id",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "fn",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "deleteAll",
              "description": "Alle Marker löschen"
            },
            {
              "kind": "method",
              "name": "addMarker",
              "parameters": [
                {
                  "name": "id",
                  "description": "Einzigartige id",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "data",
                  "description": "Objekt, dass alle Daten enthält (text, lng, lat, address, value)",
                  "type": {
                    "text": "Object"
                  }
                },
                {
                  "name": "text",
                  "description": "Kurzes Label für den Marker",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "draggable",
                  "default": "false",
                  "description": "Kann der Pin bewegt werden?",
                  "type": {
                    "text": "Boolean"
                  }
                },
                {
                  "name": "html",
                  "description": "HTML-Content",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "color",
                  "default": "\"#ff5a64\"",
                  "description": "Update options for draggable pins",
                  "type": {
                    "text": "Boolean"
                  }
                },
                {
                  "name": "custompin",
                  "description": "URL to custom pin",
                  "type": {
                    "text": "Boolean"
                  }
                },
                {
                  "name": "updateOptions",
                  "default": "false"
                }
              ],
              "description": "Marker hinzufügen"
            },
            {
              "kind": "method",
              "name": "_embedScript",
              "parameters": [
                {
                  "name": "file",
                  "description": "Path to the external script",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "init",
                  "default": "false",
                  "description": "Call onload script",
                  "type": {
                    "text": "Boolean"
                  }
                }
              ],
              "description": "Embed external scripts",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_onLoad",
              "parameters": [
                {
                  "name": "e",
                  "description": "onLoad event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Load MTK",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_setLayer",
              "description": "updates the layer",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "reRender",
              "description": "Mapinhalte und Abgrenzungen neu berechnen"
            },
            {
              "kind": "method",
              "name": "_handleInput",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Input event calls the debounced search method",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_search",
              "parameters": [
                {
                  "name": "val"
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_searchGetTopics",
              "parameters": [
                {
                  "name": "search",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "description": "Get topics from search\r\nNote: Probably not possible because we don't know how to display themes and make pins clickable",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_searchGetAddresses",
              "parameters": [
                {
                  "name": "ogd",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "description": "Parse OGD address data",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_searchGetPois",
              "parameters": [
                {
                  "name": "search",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "description": "Parse POIs",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_fetchData",
              "parameters": [
                {
                  "name": "value"
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_fetchOGD",
              "parameters": [
                {
                  "name": "url",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "description": "Fetch OGD data",
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "_OGDReverseGeocode",
              "parameters": [
                {
                  "name": "coordinates",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "_setMarkerData",
              "parameters": [
                {
                  "name": "text",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "coordinates",
                  "type": {
                    "text": "object"
                  }
                },
                {
                  "name": "type",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "address",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Construct data object for markers",
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "_setMarker",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Sets a marker when a search result gets selected",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_showSearch",
              "description": "Toggle search",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_dropMarker",
              "description": "Drop a marker in the middle of the map",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "center",
              "type": {
                "text": "String"
              },
              "description": "Mittelpunkt der Karte",
              "default": "\"16.35649860253831, 48.2110270434633\""
            },
            {
              "kind": "field",
              "name": "id",
              "type": {
                "text": "String"
              },
              "description": "Einzigartige ID",
              "default": "\"\""
            },
            {
              "kind": "field",
              "name": "controls",
              "type": {
                "text": "Boolean"
              },
              "description": "Steuerelemente einfügen",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "cluster",
              "type": {
                "text": "Boolean"
              },
              "description": "Marker clustern",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "zoom",
              "type": {
                "text": "Number"
              },
              "description": "Zoomlevel der Karte",
              "default": "16"
            },
            {
              "kind": "field",
              "name": "_mapLoaded",
              "type": {
                "text": "Boolean"
              },
              "description": "Ist die Map geladen",
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_bounds",
              "type": {
                "text": "Object"
              },
              "description": "Abgrezungen",
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "_markers",
              "type": {
                "text": "Array"
              },
              "description": "Abgrezungen",
              "privacy": "private",
              "default": "{}"
            },
            {
              "kind": "field",
              "name": "_markersLayer",
              "type": {
                "text": "Object"
              },
              "description": "Collection layer for markers",
              "privacy": "private",
              "default": "{}"
            },
            {
              "kind": "field",
              "name": "_isInViewport",
              "type": {
                "text": "Boolean"
              },
              "description": "Is the map currently visible in the browser viewport",
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_onInput",
              "description": "Wrapper for the search function.",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_searchVisible",
              "type": {
                "text": "Boolean"
              },
              "description": "Is the search currently visible",
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_debug",
              "type": {
                "text": "Boolean"
              },
              "description": "Debug mode",
              "privacy": "private",
              "default": "false"
            }
          ],
          "events": [
            {
              "name": "wm-map-ready",
              "type": {
                "text": "CustomEvent"
              },
              "description": "Map ist bereit"
            },
            {
              "name": "wm-map-marker-removed",
              "type": {
                "text": "CustomEvent"
              },
              "description": "Marker wurde entfernt"
            },
            {
              "name": "wm-map-marker-submit",
              "type": {
                "text": "CustomEvent"
              },
              "description": "“Übernehmen\"-Button in marker wurde geklickt"
            },
            {
              "name": "wm-map-marker-added",
              "type": {
                "text": "CustomEvent"
              },
              "description": "Marker wurde hinzugefügt"
            }
          ],
          "superclass": {
            "name": "s",
            "module": "/dist/js/lit-element-8bc32369.js"
          },
          "summary": "Button/Button, Input/Input, Icon/Icon",
          "tagName": "wm-map",
          "customElement": true
        },
        {
          "kind": "variable",
          "name": "tagName",
          "type": {
            "text": "string"
          },
          "default": "\"wm-map\""
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "wm-map",
          "declaration": {
            "name": "Map",
            "module": "dist/js/components/Map/Map.js"
          }
        },
        {
          "kind": "js",
          "name": "Map",
          "declaration": {
            "name": "Map",
            "module": "dist/js/components/Map/Map.js"
          }
        },
        {
          "kind": "js",
          "name": "tagName",
          "declaration": {
            "name": "tagName",
            "module": "dist/js/components/Map/Map.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/Map/MapAlt.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Stadtplan-Beta Karten",
          "name": "MapAlt",
          "slots": [
            {
              "description": "Mapmarker",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_map",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "properties",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ center: { type: String }, id: { type: String }, mapid: { type: String }, zoom: { type: Number }, _mapLoaded: { type: Boolean, attribute: false }, _markers: { type: Array, attribute: false }, _isInViewport: { type: Boolean }, _mapInitialized: { type: Boolean, attribute: false } }"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[globalStyles, leaftletStyles, leafletClusterStyles, styles, i` .pin { background: var(--map-defaultPinAlt); } `]"
            },
            {
              "kind": "method",
              "name": "_checkVisibility",
              "parameters": [
                {
                  "name": "threshold",
                  "default": "0.2"
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleIntersection",
              "parameters": [
                {
                  "name": "entries"
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_getMarkers",
              "description": "Geslottete Marker auslesen",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_addMarkersBatch",
              "parameters": [
                {
                  "name": "markersData",
                  "description": "An array of marker data objects. Each object should have the following properties:",
                  "type": {
                    "text": "Array"
                  }
                },
                {
                  "description": "The latitude of the marker.",
                  "name": "markersData[].lat",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "description": "The longitude of the marker.",
                  "name": "markersData[].lng",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "description": "The type of pin to be used for the marker.",
                  "name": "markersData[].pin",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "description": "The label to be displayed in the popup.",
                  "name": "markersData[].label",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "description": "The content to be displayed in the popup.",
                  "name": "markersData[].content",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Adds a batch of markers to the map.\n\nThis method creates a markers layer if it doesn't already exist, caches icons to avoid recreating them,\nand adds markers to the layer in a batch. It also binds popups to markers if label or content is provided."
            },
            {
              "kind": "method",
              "name": "resetBounds",
              "description": "Kartenausschnitt aktualisieren"
            },
            {
              "kind": "method",
              "name": "_coordsToArray",
              "parameters": [
                {
                  "name": "str"
                }
              ],
              "description": "Transform coords string to array",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_initMap"
            },
            {
              "kind": "method",
              "name": "clearLayers",
              "description": "Marker entfernen"
            },
            {
              "kind": "method",
              "name": "reRender",
              "description": "Mapinhalte und Abgrenzungen neu berechnen"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "center",
              "type": {
                "text": "String"
              },
              "description": "Mittelpunkt der Karte",
              "default": "\"48.2110270434633, 16.35649860253831\""
            },
            {
              "kind": "field",
              "name": "id",
              "type": {
                "text": "String"
              },
              "description": "Einzigartige ID",
              "default": "\"\""
            },
            {
              "kind": "field",
              "name": "_mapLoaded",
              "type": {
                "text": "Boolean"
              },
              "description": "Ist die Map geladen",
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "zoom",
              "type": {
                "text": "Number"
              },
              "description": "Zoomlevel der Karte",
              "default": "15"
            },
            {
              "kind": "field",
              "name": "_bounds",
              "type": {
                "text": "Object"
              },
              "description": "Abgrezungen",
              "privacy": "private",
              "default": "{}"
            },
            {
              "kind": "field",
              "name": "_markers",
              "type": {
                "text": "Array"
              },
              "description": "Abgrezungen",
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "_isInViewport",
              "type": {
                "text": "Boolean"
              },
              "description": "Is the map currently visible in the browser viewport",
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_mapInitialized",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            }
          ],
          "superclass": {
            "name": "s",
            "module": "/dist/js/lit-element-8bc32369.js"
          },
          "tagName": "wm-map-alt",
          "customElement": true
        },
        {
          "kind": "variable",
          "name": "tagName",
          "type": {
            "text": "string"
          },
          "default": "\"wm-map-alt\""
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "wm-map-alt",
          "declaration": {
            "name": "MapAlt",
            "module": "dist/js/components/Map/MapAlt.js"
          }
        },
        {
          "kind": "js",
          "name": "MapAlt",
          "declaration": {
            "name": "MapAlt",
            "module": "dist/js/components/Map/MapAlt.js"
          }
        },
        {
          "kind": "js",
          "name": "tagName",
          "declaration": {
            "name": "tagName",
            "module": "dist/js/components/Map/MapAlt.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/Map/MapMarker.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Stadtplan - Beta Kartenmarker",
          "name": "MapMarker",
          "slots": [
            {
              "description": "HTML-Inhalt",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "properties",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ color: { type: String }, label: { type: String }, lat: { type: String }, lng: { type: String }, pin: { type: String }, }"
            },
            {
              "kind": "field",
              "name": "color",
              "type": {
                "text": "string"
              },
              "description": "Farbe des Markers",
              "default": "'#ff5a64'"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "Bezeichnung des Markers",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "lat",
              "type": {
                "text": "string"
              },
              "description": "Latitude",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "lng",
              "type": {
                "text": "string"
              },
              "description": "Longitude",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "pin",
              "type": {
                "text": "string"
              },
              "description": "Datei muss in /icons/pins/pin-{string}.svg Pfad liegen",
              "default": "''"
            }
          ],
          "superclass": {
            "name": "s",
            "module": "/dist/js/lit-element-8bc32369.js"
          },
          "tagName": "wm-mapmarker",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "wm-mapmarker",
          "declaration": {
            "name": "MapMarker",
            "module": "dist/js/components/Map/MapMarker.js"
          }
        },
        {
          "kind": "js",
          "name": "MapMarker",
          "declaration": {
            "name": "MapMarker",
            "module": "dist/js/components/Map/MapMarker.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/Modal/Modal.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Ein Modal mit einer größeren Ansicht öffnet sich bei Klick auf Bilder, Videos oder einen Linktext. Bei Klick auf die Hintergrundfläche, das x-Feld oder die Escape-Taste schließt sich das Feld. Bilder innerhalb des Modals sollten im Format 16:9 sein und eine Maximalgröße von 1070×602px haben.",
          "name": "Modal",
          "cssProperties": [
            {
              "description": "Maximalbreite",
              "name": "--modal-max-width"
            },
            {
              "description": "Hintergrundfarbe des Buttons",
              "name": "--modal-button-background-color"
            },
            {
              "description": "Rahmenfarbe des Buttons",
              "name": "--modal-button-border-color"
            },
            {
              "description": "Hintergrundbild des Buttons",
              "name": "--modal-button-background-image"
            },
            {
              "description": "Caption Innenabstand",
              "name": "--modal-caption-padding"
            },
            {
              "description": "Hintergrundfarbe des Schließen-Buttons",
              "name": "--modal-close-button-background-color"
            },
            {
              "description": "Farbe der Outline um Thumbs",
              "name": "--modal-thumb-outline-color"
            },
            {
              "description": "Innenabstand unten",
              "name": "--modal-padding-block-end"
            },
            {
              "description": "Innenabstand oben",
              "name": "--modal-padding-block-start"
            },
            {
              "description": "Hintergrundfarbe eines Slides",
              "name": "--modal-slide-background-color"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_dialog",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_carousel",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_content",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_triggers",
              "description": "All links with a data-modal attribute",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "properties",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ isopen: { type: Boolean, reflect: true }, _label: { type: String }, size: { type: String, reflect: true }, _type: { type: String }, _caption: { type: String }, _captionSelectable: { type: Boolean }, _trigger: { type: Node }, _thumbs: { type: Array, attribute: false }, _currentThumb: { type: Number }, captionLabel: { type: String } }"
            },
            {
              "kind": "method",
              "name": "_addEvents",
              "description": "Add events",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_addGlovalEvents",
              "description": "Add gloval events",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_prepareContent",
              "parameters": [
                {
                  "name": "target",
                  "default": "null"
                },
                {
                  "name": "pos"
                }
              ],
              "description": "Get HTML content, imags, thumbs, etc. and open the modal",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "toModal",
              "parameters": [
                {
                  "name": "trigger",
                  "description": "Link oder Button",
                  "type": {
                    "text": "node"
                  }
                },
                {
                  "name": "content",
                  "default": "null",
                  "description": "Element, dessen HTML-Inhalt man im Modal anzeigen möchte",
                  "type": {
                    "text": "node"
                  }
                }
              ],
              "description": "Alternative zum data-modal Attribut. Hilfreich bei dynamisch erzeugten Buttons."
            },
            {
              "kind": "method",
              "name": "_closeEvent",
              "description": "Fired when the modal gets closed",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_checkCaptionSelectable",
              "parameters": [
                {
                  "name": "figcaption",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "_getImage",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_switchSlide",
              "parameters": [
                {
                  "name": "n"
                }
              ],
              "description": "Move slide if it's a modal carousel",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_getThumbs",
              "description": "Collect thumbs if present",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_getHTML",
              "parameters": [
                {
                  "name": "target"
                }
              ],
              "description": "Append html from template",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_updateCaption",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_clickOutSide",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Close when clicking somewhere outside the dialog",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "open",
              "parameters": [
                {
                  "name": "pos"
                }
              ],
              "description": "Modal öffnen"
            },
            {
              "kind": "method",
              "name": "close",
              "description": "Modal schließen"
            },
            {
              "kind": "method",
              "name": "_cleanUpAfterClose",
              "description": "Dispatch event helper",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_controlCarousel",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Control carousel if focus is on the modal itself",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_prepareTriggers",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "firstUpdated"
            },
            {
              "kind": "method",
              "name": "createRenderRoot",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "isopen",
              "type": {
                "text": "Boolean"
              },
              "description": "Ist Modal geöffnet oder nicht.",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'fit-content'|'max-content'"
              },
              "description": "Art der Größe",
              "default": "\"fit-content\""
            },
            {
              "kind": "field",
              "name": "_type",
              "type": {
                "text": "Boolean"
              },
              "description": "Type of content to attach",
              "privacy": "private",
              "default": "\"image\""
            },
            {
              "kind": "field",
              "name": "_caption",
              "type": {
                "text": "Boolean"
              },
              "description": "Captions for images",
              "privacy": "private",
              "default": "\"\""
            },
            {
              "kind": "field",
              "name": "_captionSelectable",
              "type": {
                "text": "Boolean"
              },
              "description": "Should text in the caption be selectable",
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_thumbs",
              "type": {
                "text": "Array"
              },
              "description": "Array of thumb element",
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "_currentThumb",
              "type": {
                "text": "Boolean"
              },
              "description": "The selected thumb",
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "_trigger",
              "description": "The element that triggered the modal",
              "type": {
                "text": "Node"
              },
              "privacy": "private",
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "_label",
              "description": "Bezeichnung des Dialogs",
              "type": {
                "text": "Boolean"
              },
              "privacy": "private",
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "captionLabel",
              "type": {
                "text": "String"
              },
              "description": "Label für \"bildbeschreibung\"",
              "default": "\"Bildbeschreibung\""
            }
          ],
          "events": [
            {
              "name": "wm-modal-closed",
              "type": {
                "text": "CustomEvent"
              },
              "description": "Wenn das Modal geschlossen wurde."
            },
            {
              "name": "wm-modal-opened",
              "type": {
                "text": "CustomEvent"
              },
              "description": "Wenn das Modal geöffnet wurde."
            }
          ],
          "superclass": {
            "name": "s",
            "module": "/dist/js/lit-element-8bc32369.js"
          },
          "summary": "Button/Button, Icon/Icon, Details/Details",
          "tagName": "wm-modal",
          "customElement": true
        },
        {
          "kind": "variable",
          "name": "tagName",
          "type": {
            "text": "string"
          },
          "default": "\"wm-modal\""
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "wm-modal",
          "declaration": {
            "name": "Modal",
            "module": "dist/js/components/Modal/Modal.js"
          }
        },
        {
          "kind": "js",
          "name": "Modal",
          "declaration": {
            "name": "Modal",
            "module": "dist/js/components/Modal/Modal.js"
          }
        },
        {
          "kind": "js",
          "name": "tagName",
          "declaration": {
            "name": "tagName",
            "module": "dist/js/components/Modal/Modal.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/NavMain/NavMain.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Hauptmenü für wien.gv.at und Microsites",
          "name": "NavMain",
          "cssProperties": [
            {
              "description": "Breite des Wrappers im Menü",
              "name": "--navmain-wrapperwidth"
            },
            {
              "description": "Schriftstärke der Menüpunkte",
              "name": "--navmain-font-weight"
            },
            {
              "description": "Abstand zwischen Menüpunkten auf der 1. Ebene",
              "name": "--navmain-gap"
            }
          ],
          "slots": [
            {
              "description": "Liste",
              "name": "default"
            },
            {
              "description": "Header der Navigation",
              "name": "precontent"
            },
            {
              "description": "Inhalt nach den Listen",
              "name": "postcontent"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_dialog",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_content",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "properties",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ label: { type: String }, labelOpen: { type: String }, labelOpenIcon: {type: String}, labelClose: { type: String }, isopen: { type: Boolean, reflect: true }, microsite: { type: Boolean, reflect: true }, type: { type: String, reflect: true }, _listsVisible: { type: Boolean, reflect: true }, hideLabel: { type: Boolean }, _items: { type: Array }, _openItem: { type: Number, attribute: false }, _lastFocusedElement: { type: Node, attribute: false }, _level: { type: Number, attribute: false }, }"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[styles]"
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_addGlovalEvents",
              "description": "Add global events to the document",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_moveFocus",
              "description": "Move focus to last clicked button",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleClickOutside",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Close on click outside of .content",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_addEvents",
              "description": "Add events",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_closeOnTransitionEnd",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Fire the native close event when the nav is out of view",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_nativeClose",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Remove transition class when the native close event fires",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_getLayout",
              "description": "Determine the layout of the nav based on setting and viewport viel (mobile, desktop, or mobile and desktop)",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "open",
              "description": "Menü öffnen"
            },
            {
              "kind": "method",
              "name": "close",
              "description": "Menü schließen"
            },
            {
              "kind": "method",
              "name": "_getContents",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Take the slotted content and wrap it in the new markup",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_openCloseSub",
              "parameters": [
                {
                  "name": "j"
                },
                {
                  "name": "i"
                },
                {
                  "name": "list"
                },
                {
                  "name": "e"
                }
              ],
              "description": "Toggle sub menus",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_openSub",
              "parameters": [
                {
                  "name": "j"
                },
                {
                  "name": "i"
                },
                {
                  "name": "list"
                }
              ],
              "description": "Open sub menus",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_closeSub",
              "parameters": [
                {
                  "name": "list"
                },
                {
                  "name": "i"
                }
              ],
              "description": "Close sub menus",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_openCloseNav",
              "description": "Close sub menus",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleKeyDown",
              "parameters": [
                {
                  "name": "list"
                },
                {
                  "name": "e"
                }
              ],
              "description": "Close submenus automatically when leaving sub menu list using the keyboard",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleButtonMouseOver",
              "parameters": [
                {
                  "name": "i"
                },
                {
                  "name": "j"
                },
                {
                  "name": "list"
                },
                {
                  "name": "e"
                }
              ],
              "description": "Show submenu on mouseover",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleLinkMouseOver",
              "parameters": [
                {
                  "name": "list"
                }
              ],
              "description": "Close open submenüs when hovering a link on the same level",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_burgerTemplate",
              "description": "Markup for the burger/close icon",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_renderLinkOrButton",
              "parameters": [
                {
                  "name": "item",
                  "description": "Data for menu item",
                  "type": {
                    "text": "Object"
                  }
                },
                {
                  "name": "i",
                  "description": "Index of current item",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "name": "list",
                  "description": "Index of parent list (if there are multiple)",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "name": "parent",
                  "description": "Index of parent element",
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "_renderList",
              "parameters": [
                {
                  "name": "items",
                  "description": "List of Elements to render",
                  "type": {
                    "text": "Array"
                  }
                },
                {
                  "name": "level",
                  "description": "Current level of nesting",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "name": "hidden",
                  "default": "false",
                  "description": "List index",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "name": "list"
                },
                {
                  "name": "parent"
                }
              ],
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "_listsTemplate",
              "description": "Render Lists and other content",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "String"
              },
              "description": "Accessible Name der Navigations-Landmark",
              "default": "\"Haupt\""
            },
            {
              "kind": "field",
              "name": "labelOpen",
              "type": {
                "text": "String"
              },
              "description": "Label Menü geschlossen",
              "default": "\"Menü\""
            },
            {
              "kind": "field",
              "name": "labelOpenIcon",
              "type": {
                "text": "String"
              },
              "description": "Icon Menü geschlossen",
              "default": "\"burger\""
            },
            {
              "kind": "field",
              "name": "labelClose",
              "type": {
                "text": "String"
              },
              "description": "Label Menü offen",
              "default": "\"Schließen\""
            },
            {
              "kind": "field",
              "name": "hideLabel",
              "type": {
                "text": "Boolean"
              },
              "description": "Soll das Label angezeigt werden",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_items",
              "type": {
                "text": "array"
              },
              "description": "Contains items to display in the navigation",
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "isopen",
              "type": {
                "text": "Boolean"
              },
              "description": "Menü offen oder zu",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "microsite",
              "type": {
                "text": "Boolean"
              },
              "description": "Microsite oder Hauptseite",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "'hidden'|'visible'|'hiddenmobile'"
              },
              "description": "Art des Menüs (immer versteckt, immer sichtbar oder nur auf kleinen Viewsports versteckt)",
              "default": "\"visible\""
            },
            {
              "kind": "field",
              "name": "_listsVisible",
              "type": {
                "text": "Boolean"
              },
              "description": "Is the navigation hidden behind a burger or not",
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_openItem",
              "description": "Which item with children is currently expanded",
              "type": {
                "text": "String"
              },
              "privacy": "private",
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "_lastFocusedElement",
              "description": "the last button that opended a submenu",
              "type": {
                "text": "String"
              },
              "privacy": "private",
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "_level",
              "type": {
                "text": "Number"
              },
              "description": "the last button that opended a submenu",
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_nativeCloseEvent",
              "description": "Event references",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_closeOnTransitionEndEvent",
              "description": "Event references",
              "privacy": "private"
            }
          ],
          "superclass": {
            "name": "s",
            "module": "/dist/js/lit-element-8bc32369.js"
          },
          "summary": "Button/Button",
          "tagName": "wm-nav-main",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "wm-nav-main",
          "declaration": {
            "name": "NavMain",
            "module": "dist/js/components/NavMain/NavMain.js"
          }
        },
        {
          "kind": "js",
          "name": "NavMain",
          "declaration": {
            "name": "NavMain",
            "module": "dist/js/components/NavMain/NavMain.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/NavPage/NavPage.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Lokale Navigation innerhalb einer Seite",
          "name": "NavPage",
          "cssProperties": [
            {
              "description": "Schatten der Navigation",
              "name": "--navpage-shadow"
            },
            {
              "description": "Innenabstand in Links (Mobilansicht unter 64em)",
              "name": "--navpage-link-padding--mobil"
            },
            {
              "description": "Schriftgröße (Mobilansicht unter 64em)",
              "name": "--navpage-link-size--mobil"
            },
            {
              "description": "Schriftfarbe (Mobilansicht unter 64em)",
              "name": "--navpage-link-color--mobil"
            },
            {
              "description": "Schriftfarbe des aktiven Links (Mobilansicht unter 64em)",
              "name": "--navpage-active-link-color--mobil"
            },
            {
              "description": "Link Hintergrundfarbe des aktiven Links in der Navigation (Mobilansicht unter 64em)",
              "name": "--navpage-active-link-background-color--mobil"
            },
            {
              "description": "Hintergrundfarbe der Navigation (Mobilansicht unter 64em)",
              "name": "--navpage-background-color--mobil"
            },
            {
              "description": "Innenabstand in Links (Desktopansicht ab 64em)",
              "name": "--navpage-link-padding--desktop"
            },
            {
              "description": "Schriftgröße (Desktopansicht ab 64em)",
              "name": "--navpage-link-size--desktop"
            },
            {
              "description": "Schriftfarbe (Desktopansicht ab 64em)",
              "name": "--navpage-link-color--desktop"
            },
            {
              "description": "Schriftfarbe des aktiven Links (Desktopansicht ab 64em)",
              "name": "--navpage-active-link-color--desktop"
            },
            {
              "description": "Link Hintergrundfarbe des aktiven Links in der Navigation (Desktopansicht ab 64em)",
              "name": "--navpage-active-link-background-color--desktop"
            },
            {
              "description": "Hintergrundfarbe der Navigation (Desktopansicht ab 64em)",
              "name": "--navpage-background-color--desktop"
            },
            {
              "description": "Abstand zwischen Content und Nav",
              "name": "--navpage-gap"
            },
            {
              "description": "Abstand auf der y-Achse",
              "name": "--navpage-inset"
            },
            {
              "description": "Abstand auf der y-Achse (Desktopansicht ab 64em)",
              "name": "--navpage-inset--desktop"
            },
            {
              "description": "Verschiebung auf der y-Achse (Default)",
              "name": "--navpage-transform--default"
            },
            {
              "description": "Verschiebung auf der y-Achse (Toggle)",
              "name": "--navpage-transform--scroll"
            },
            {
              "description": "Verschiebung auf der y-Achse bei gescrollter Seite",
              "name": "--navpage-transform--scrolled"
            },
            {
              "description": "Verschiebung auf der y-Achse bei gescrollter Seite (wien.gv.at)",
              "name": "--navpage-transform-wien--scrolled"
            },
            {
              "description": "Hintergrundfarbe",
              "name": "--section-background-color",
              "inheritedFrom": {
                "name": "Section",
                "module": "dist/js/components/Section/Section.js"
              }
            },
            {
              "description": "Rahmenfarbe",
              "name": "--section-border-color",
              "inheritedFrom": {
                "name": "Section",
                "module": "dist/js/components/Section/Section.js"
              }
            },
            {
              "description": "Rahmenstärke",
              "name": "--section-border-width",
              "inheritedFrom": {
                "name": "Section",
                "module": "dist/js/components/Section/Section.js"
              }
            },
            {
              "description": "Innenabstand",
              "name": "--section-padding",
              "inheritedFrom": {
                "name": "Section",
                "module": "dist/js/components/Section/Section.js"
              }
            },
            {
              "description": "Innenabstand hervorgehoben (Mobilansicht unter 64em)",
              "name": "--section-highlight-padding--mobil",
              "inheritedFrom": {
                "name": "Section",
                "module": "dist/js/components/Section/Section.js"
              }
            },
            {
              "description": "Innenabstand hervorgehoben (Desktopansicht ab 64em)",
              "name": "--section-highlight-padding--desktop",
              "inheritedFrom": {
                "name": "Section",
                "module": "dist/js/components/Section/Section.js"
              }
            },
            {
              "description": "Hintergrundfarbe hervorgehoben",
              "name": "--section-highlight-background-color",
              "inheritedFrom": {
                "name": "Section",
                "module": "dist/js/components/Section/Section.js"
              }
            }
          ],
          "slots": [
            {
              "description": "HTML oder Text-Content",
              "name": "default",
              "inheritedFrom": {
                "name": "Section",
                "module": "dist/js/components/Section/Section.js"
              }
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "properties",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ _links: { type: Array, attribute: false }, nav: { type: String, reflect: true }, togglebuttonlabel: { type: String, reflect: true }, _activeAnchor: { type: String, state: true }, // Add this property _observer: { state: true }, _activeId: { state: true } }",
              "inheritedFrom": {
                "name": "Section",
                "module": "dist/js/components/Section/Section.js"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[styles]"
            },
            {
              "kind": "field",
              "name": "_headings",
              "description": "Slotted headings",
              "type": {
                "text": "Object"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_nav",
              "description": "In page navigation",
              "type": {
                "text": "Node"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_toggleButton",
              "description": "Toggle button for in page navigation",
              "type": {
                "text": "Node"
              },
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_getOffsetFromTopEdge",
              "description": "Reads CSS custom properties that contain the header's height\r\nadd some extra spacing and converts the value to pixels",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_addControls",
              "description": "Add a toggle button to the wm-header's actions",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_addGlobalEvents",
              "description": "Watch global events",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_setupIntersectionObserver"
            },
            {
              "kind": "method",
              "name": "_getItems",
              "description": "Turn nodes into and array of object containing the label and id",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_removeLock",
              "description": "Unlock scrolling",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_closeNav",
              "description": "Close nav and unlock scrolling",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_contentChanged",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleAnchorClick",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Handle anchor clicks",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_setActiveAnchor",
              "parameters": [
                {
                  "name": "id"
                },
                {
                  "name": "shouldScroll",
                  "default": "true"
                }
              ],
              "description": "Set active anchor and update aria-current",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "render",
              "inheritedFrom": {
                "name": "Section",
                "module": "dist/js/components/Section/Section.js"
              }
            },
            {
              "kind": "field",
              "name": "nav",
              "type": {
                "text": "'scroll'|'toggle'"
              },
              "description": "Art der Navigation",
              "default": "\"scroll\""
            },
            {
              "kind": "field",
              "name": "togglebuttonlabel",
              "type": {
                "text": "String"
              },
              "description": "Label des Togglebuttons",
              "default": "\"Thema wählen\""
            },
            {
              "kind": "field",
              "name": "_links",
              "type": {
                "text": "Object"
              },
              "description": "Array of links for the in page nav",
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "_options",
              "type": {
                "text": "Object"
              },
              "description": "Settings for the navigation",
              "privacy": "private",
              "default": "{ offset: 0, }"
            },
            {
              "kind": "field",
              "name": "_activeAnchor",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "_observer",
              "type": {
                "text": "null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "_updateTimer",
              "type": {
                "text": "null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "highlight",
              "description": "Section mit oder ohne Hintergrund.",
              "type": {
                "text": "'abendstimmung'|'flieder'|'frischgruen'|'goldgelb'|'morgenrot'|'nebelgrau'|'wasserblau'"
              },
              "default": "undefined",
              "inheritedFrom": {
                "name": "Section",
                "module": "dist/js/components/Section/Section.js"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "description": "Bei Map-Einbindungen",
              "type": {
                "text": "'full'"
              },
              "default": "undefined",
              "inheritedFrom": {
                "name": "Section",
                "module": "dist/js/components/Section/Section.js"
              }
            },
            {
              "kind": "field",
              "name": "contentsize",
              "type": {
                "text": "'full'|'text'"
              },
              "description": "Wieviel Platz gibt es für Inhalt. Voll oder im Theme definiertes Maximum für Text.",
              "default": "\"full\"",
              "inheritedFrom": {
                "name": "Section",
                "module": "dist/js/components/Section/Section.js"
              }
            }
          ],
          "superclass": {
            "name": "Section",
            "module": "/dist/js/components/Section/Section.js"
          },
          "summary": "Button/Button",
          "tagName": "wm-nav-page",
          "customElement": true
        },
        {
          "kind": "variable",
          "name": "tagName",
          "type": {
            "text": "string"
          },
          "default": "\"wm-nav-page\""
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "wm-nav-page",
          "declaration": {
            "name": "NavPage",
            "module": "dist/js/components/NavPage/NavPage.js"
          }
        },
        {
          "kind": "js",
          "name": "NavPage",
          "declaration": {
            "name": "NavPage",
            "module": "dist/js/components/NavPage/NavPage.js"
          }
        },
        {
          "kind": "js",
          "name": "tagName",
          "declaration": {
            "name": "tagName",
            "module": "dist/js/components/NavPage/NavPage.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/Notification/Notification.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Info-, Warn- und Fehler-Hinweise",
          "name": "notification",
          "slots": [
            {
              "description": "Meldung",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "properties",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ dismissible: { type: Boolean }, dismissLabel: { type: String }, type: { type: String, reflect: true }, _types: { type: Object }, _color: { type: String }, _icon: { type: String }, iconSize: { type: String }, }"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[globalStyles, styles]"
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_dismiss",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "'info'|'warning'|'error'"
              },
              "description": "Art der Meldung",
              "default": "\"info\""
            },
            {
              "kind": "field",
              "name": "dismissible",
              "type": {
                "text": "Boolean"
              },
              "description": "Schließen-Button anzeigen",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "dismissLabel",
              "type": {
                "text": "String"
              },
              "description": "Accessible Name für den Entfernen-Button",
              "default": "\"Entfernen\""
            },
            {
              "kind": "field",
              "name": "_types",
              "type": {
                "text": "object"
              },
              "privacy": "private",
              "default": "{ error: { color: \"morgenrot-light\", icon: \"error\", }, info: { color: \"wasserblau-light\", icon: \"info\", }, warning: { color: \"goldgelb-light\", icon: \"warning\", }, success: { color: \"frischgruen-light\", icon: \"success\", }, }"
            },
            {
              "kind": "field",
              "name": "_color",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_icon",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "iconSize",
              "type": {
                "text": "string"
              },
              "default": "\"28\""
            }
          ],
          "superclass": {
            "name": "s",
            "module": "/dist/js/lit-element-8bc32369.js"
          },
          "summary": "Button/Button, Icon/Icon, Highlight/Highlight",
          "tagName": "wm-notification",
          "customElement": true
        },
        {
          "kind": "variable",
          "name": "tagName",
          "type": {
            "text": "string"
          },
          "default": "\"wm-notification\""
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "wm-notification",
          "declaration": {
            "name": "notification",
            "module": "dist/js/components/Notification/Notification.js"
          }
        },
        {
          "kind": "js",
          "name": "notification",
          "declaration": {
            "name": "notification",
            "module": "dist/js/components/Notification/Notification.js"
          }
        },
        {
          "kind": "js",
          "name": "tagName",
          "declaration": {
            "name": "tagName",
            "module": "dist/js/components/Notification/Notification.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/Pager/Pager.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Komponente zum Blättern von Kapiteln",
          "name": "Pager",
          "cssProperties": [
            {
              "description": "Einrückung der Überschrift",
              "name": "--pager-textpadding"
            }
          ],
          "slots": [
            {
              "description": "Verlinkung zur vorigen Seite",
              "name": "prevLink"
            },
            {
              "description": "Verlinkung zur nächsten Seite",
              "name": "nextLink"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "properties",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ prevText: { type: String }, nextText: { type: String }, hidePrev: { type: Boolean }, hideNext: { type: Boolean }, }"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[styles]"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "prevText",
              "type": {
                "text": "String"
              },
              "description": "Alternative Überschrift für Zurück-Link",
              "default": "\"Voriges Kapitel:\""
            },
            {
              "kind": "field",
              "name": "nextText",
              "type": {
                "text": "String"
              },
              "description": "Alternative Überschrift für Weiter-Link",
              "default": "\"Nächstes Kapitel:\""
            }
          ],
          "superclass": {
            "name": "s",
            "module": "/dist/js/lit-element-8bc32369.js"
          },
          "tagName": "wm-pager",
          "customElement": true
        },
        {
          "kind": "variable",
          "name": "tagName",
          "type": {
            "text": "string"
          },
          "default": "\"wm-pager\""
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "wm-pager",
          "declaration": {
            "name": "Pager",
            "module": "dist/js/components/Pager/Pager.js"
          }
        },
        {
          "kind": "js",
          "name": "Pager",
          "declaration": {
            "name": "Pager",
            "module": "dist/js/components/Pager/Pager.js"
          }
        },
        {
          "kind": "js",
          "name": "tagName",
          "declaration": {
            "name": "tagName",
            "module": "dist/js/components/Pager/Pager.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/Pagination/Pagination.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Paginierung",
          "name": "Pagination",
          "cssProperties": [
            {
              "description": "Hintergrundfarbe der Buttons",
              "name": "--pagination-background-color"
            },
            {
              "description": "Hintergrundfarbe des aktiven Buttons",
              "name": "--pagination-background-color--active"
            },
            {
              "description": "Hintergrundfarbe Hover & Focus",
              "name": "--pagination-background-color--hover"
            },
            {
              "description": "Rahmenfarbe der Buttons",
              "name": "--pagination-border-color"
            },
            {
              "description": "Rahmenfarbe des aktiven Buttons",
              "name": "--pagination-border-color--active"
            },
            {
              "description": "Rahmenfarbe Hover & Focus",
              "name": "--pagination-border-color--hover"
            },
            {
              "description": "Schriftfarbe der Buttons",
              "name": "--pagination-font-color"
            },
            {
              "description": "Schriftfarbe des aktiven Buttons",
              "name": "--pagination-font-color--active"
            },
            {
              "description": "Schriftfarbe Hover & Focus",
              "name": "--pagination-font-color--hover"
            }
          ],
          "slots": [
            {
              "description": "Text",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_output",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "properties",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ hideAllControls: { type: Boolean, reflect: true }, currentPage: { type: Number, reflect: true }, firstAndLast: { type: Boolean, reflect: true }, justify: { type: String, reflect: true }, label: { type: String, reflect: true }, maxPages: { type: Number, reflect: true }, perPage: { type: Number, reflect: true }, total: { type: Number, reflect: true }, _firstPage: { type: Number }, _items: { type: Array }, _pages: { type: Number }, }"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[styles]"
            },
            {
              "kind": "method",
              "name": "_prevPage"
            },
            {
              "kind": "method",
              "name": "_nextPage"
            },
            {
              "kind": "method",
              "name": "_click",
              "parameters": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_changePage",
              "parameters": [
                {
                  "name": "newPage"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_updateFirstPage"
            },
            {
              "kind": "method",
              "name": "_renderItems"
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ]
            },
            {
              "kind": "method",
              "name": "reset"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "method",
              "name": "_renderControlButton",
              "parameters": [
                {
                  "name": "page"
                },
                {
                  "name": "iconId"
                },
                {
                  "name": "isDisabled"
                },
                {
                  "name": "isHidden"
                },
                {
                  "name": "label"
                }
              ]
            },
            {
              "kind": "field",
              "name": "currentPage",
              "type": {
                "text": "Number"
              },
              "description": "Die Aktive Seite",
              "default": "1"
            },
            {
              "kind": "field",
              "name": "firstAndLast",
              "description": "Buttons für erste und letzte Seite anzeigen",
              "type": {
                "text": "Boolean"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "String"
              },
              "description": "Label für die navigation-Landmark",
              "default": "\"Weitere Seiten\""
            },
            {
              "kind": "field",
              "name": "maxPages",
              "type": {
                "text": "Number"
              },
              "description": "Maximale Anzahl an Seiten",
              "default": "10"
            },
            {
              "kind": "field",
              "name": "perPage",
              "type": {
                "text": "Number"
              },
              "description": "Anzahl an darzustellenden Elementen pro Seite",
              "default": "8"
            },
            {
              "kind": "field",
              "name": "total",
              "type": {
                "text": "Number"
              },
              "description": "Anzahl an darzustellenden Elementen ingesamt",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "justify",
              "description": "Ausrichtung auf der Hauptachse",
              "type": {
                "text": "'center'|'space-between'"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "_firstPage",
              "type": {
                "text": "number"
              },
              "description": "The first page",
              "privacy": "private",
              "default": "1"
            },
            {
              "kind": "field",
              "name": "_items",
              "type": {
                "text": "array"
              },
              "description": "Items to be rendered",
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "hideAllControls",
              "type": {
                "text": "Boolean"
              },
              "description": "Versteckt alle Controls",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_pages",
              "type": {
                "text": "number"
              },
              "description": "Number of pages",
              "privacy": "private",
              "default": "0"
            }
          ],
          "events": [
            {
              "name": "wm-page-changed",
              "type": {
                "text": "CustomEvent"
              },
              "description": "Seitenwechsel",
              "summary": "Aktuelle und vorherige Seite (object)"
            }
          ],
          "superclass": {
            "name": "s",
            "module": "/dist/js/lit-element-8bc32369.js"
          },
          "summary": "Icon/Icon",
          "tagName": "wm-pagination",
          "customElement": true
        },
        {
          "kind": "variable",
          "name": "tagName",
          "type": {
            "text": "string"
          },
          "default": "\"wm-pagination\""
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "wm-pagination",
          "declaration": {
            "name": "Pagination",
            "module": "dist/js/components/Pagination/Pagination.js"
          }
        },
        {
          "kind": "js",
          "name": "Pagination",
          "declaration": {
            "name": "Pagination",
            "module": "dist/js/components/Pagination/Pagination.js"
          }
        },
        {
          "kind": "js",
          "name": "tagName",
          "declaration": {
            "name": "tagName",
            "module": "dist/js/components/Pagination/Pagination.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/Quicklinks/Quicklinks.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Darstellung von Linklisten als CTA in 1-3 Spalten",
          "name": "Quicklinks",
          "cssProperties": [
            {
              "description": "Abstand zwischen Spalten",
              "name": "--quicklinks-gap"
            }
          ],
          "slots": [
            {
              "description": "Liste",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "properties",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ cols: { type: Number, reflect: true } }"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "cols",
              "type": {
                "text": "1|2|3"
              },
              "description": "Anzahl der Spalten",
              "default": "1"
            }
          ],
          "superclass": {
            "name": "s",
            "module": "/dist/js/lit-element-8bc32369.js"
          },
          "summary": "CTA/CTA",
          "tagName": "wm-quicklinks",
          "customElement": true
        },
        {
          "kind": "variable",
          "name": "tagName",
          "type": {
            "text": "string"
          },
          "default": "'wm-quicklinks'"
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "wm-quicklinks",
          "declaration": {
            "name": "Quicklinks",
            "module": "dist/js/components/Quicklinks/Quicklinks.js"
          }
        },
        {
          "kind": "js",
          "name": "Quicklinks",
          "declaration": {
            "name": "Quicklinks",
            "module": "dist/js/components/Quicklinks/Quicklinks.js"
          }
        },
        {
          "kind": "js",
          "name": "tagName",
          "declaration": {
            "name": "tagName",
            "module": "dist/js/components/Quicklinks/Quicklinks.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/Quote/Quote.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Darstellung eines Zitats",
          "name": "Quote",
          "slots": [
            {
              "description": "Optionales Bild",
              "name": "image"
            },
            {
              "description": "Zitat",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "properties",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ caption: { type: String }, source: { type: String }, type: { type: String, reflect: true }, }"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[styles]"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "'large'|'small'"
              },
              "description": "Größe des Bildes",
              "default": "\"small\""
            },
            {
              "kind": "field",
              "name": "source",
              "description": "Die Quelle des Zitats (unterstützt HTML-Tags)",
              "type": {
                "text": "String"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "caption",
              "description": "Untertitel der Quelle (unterstützt HTML-Tags)",
              "type": {
                "text": "String"
              },
              "default": "undefined"
            }
          ],
          "superclass": {
            "name": "s",
            "module": "/dist/js/lit-element-8bc32369.js"
          },
          "tagName": "wm-quote",
          "customElement": true
        },
        {
          "kind": "variable",
          "name": "tagName",
          "type": {
            "text": "string"
          },
          "default": "\"wm-quote\""
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "wm-quote",
          "declaration": {
            "name": "Quote",
            "module": "dist/js/components/Quote/Quote.js"
          }
        },
        {
          "kind": "js",
          "name": "Quote",
          "declaration": {
            "name": "Quote",
            "module": "dist/js/components/Quote/Quote.js"
          }
        },
        {
          "kind": "js",
          "name": "tagName",
          "declaration": {
            "name": "tagName",
            "module": "dist/js/components/Quote/Quote.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/Radio/Radio.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Radio",
          "members": [
            {
              "kind": "field",
              "name": "properties",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...super.properties, hasError: { type: Boolean, reflect: true }, error: { type: String }, errormessage: { type: String, attribute: \"errormessage\" }, summaryErrormessage: { type: String, attribute: \"summary-errormessage\" }, info: { type: String }, _infoOpen: { type: Boolean }, checked: { type: String, reflect: true }, showErrors: { type: Boolean, reflect: true }, validate: { type: Boolean, reflect: true }, _initialCheckedValue: { state: true }, disabled: { type: Boolean, reflect: true }, // global disable only disabledoptions: { type: String } // per-option configuration }"
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleChange",
              "parameters": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleEvent",
              "parameters": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "description": "Validates the current value against constraints",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "showError",
              "parameters": [
                {
                  "name": "message",
                  "description": "The error message to display",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Shows an error message for this radio component",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "clearError",
              "description": "Clears any error state from this radio component",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "_performValidation",
              "description": "Override _performValidation from FormStateManager",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "reset",
              "description": "Resets the component to its initial state",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "formResetCallback"
            },
            {
              "kind": "method",
              "name": "setDisabled",
              "parameters": [
                {
                  "name": "isDisabled",
                  "description": "Whether the radio component should be disabled",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Sets the disabled state of the radio component and all its options",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "_setOptionViaAttributes",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "'radio'"
              },
              "description": "Art des Eingabefelds",
              "privacy": "private",
              "default": "\"radio\""
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "String"
              },
              "description": "Ausgewählter Wert",
              "privacy": "private",
              "default": "\"\""
            },
            {
              "kind": "field",
              "name": "errormessage",
              "type": {
                "text": "String"
              },
              "description": "Fehlermeldung bei ungültiger Eingabe",
              "default": "\"\""
            },
            {
              "kind": "field",
              "name": "summaryErrormessage",
              "type": {
                "text": "String"
              },
              "description": "Spezifische Fehlermeldung für die Fehlerübersicht\nDiese Meldung wird in der Fehlerübersicht (wm-formerrorsummary) anstelle der normalen\nFehlermeldung angezeigt. Dies ist nützlich, um in der Übersicht kontextspezifischere\nFehlermeldungen anzuzeigen, z.B. \"Bitte wählen Sie eine Option bei 'Zahlungsart'\"\nstatt nur \"Auswahl erforderlich\".",
              "default": "\"\""
            },
            {
              "kind": "field",
              "name": "hasError",
              "type": {
                "text": "Boolean"
              },
              "description": "Gibt an, ob das Element einen Fehler hat\nDies ist ein Statusattribut, das anzeigt, ob aktuell ein Validierungsfehler vorliegt.\nEs wird auf true gesetzt, wenn die Validierung fehlschlägt, und auf false zurückgesetzt,\nwenn die Validierung erfolgreich ist oder das Formular zurückgesetzt wird.",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "showErrors",
              "type": {
                "text": "Boolean"
              },
              "description": "Steuert die Anzeige von Fehlermeldungen\nIm Gegensatz zu 'hasError' steuert dieses Attribut, ob Fehlermeldungen angezeigt werden sollen.\nWenn auf true gesetzt, werden Validierungsfehler sofort angezeigt, ohne auf eine Formularübermittlung zu warten.\nWird typischerweise vom übergeordneten wm-form Element gesteuert.",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "validate",
              "type": {
                "text": "Boolean"
              },
              "description": "Aktiviert die Validierung bei Eingabe\nWenn auf true gesetzt, werden Auswahländerungen sofort validiert und Fehler angezeigt,\nohne auf eine Formularübermittlung zu warten.\nWird typischerweise vom übergeordneten wm-form Element gesteuert.",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "String"
              },
              "description": "Aktuelle Fehlermeldung",
              "default": "\"\""
            },
            {
              "kind": "field",
              "name": "info",
              "description": "Zusätzliche Informationen zum Feld",
              "type": {
                "text": "String"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "_infoOpen",
              "type": {
                "text": "Boolean"
              },
              "description": "Steuerung der Info-Anzeige",
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "String"
              },
              "description": "Ausgewählter Wert (kann über 'checked' Attribut gesetzt werden)",
              "default": "\"\""
            },
            {
              "kind": "field",
              "name": "_initialCheckedValue",
              "type": {
                "text": "String"
              },
              "privacy": "private",
              "description": "Initial checked value for reset functionality",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "Boolean"
              },
              "description": "Global disabled state",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "disabledoptions",
              "type": {
                "text": "String"
              },
              "description": "Per-option configuration for disabled state",
              "default": "\"\""
            },
            {
              "kind": "field",
              "name": "_errorController",
              "default": "new ErrorStateController(this)"
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "dist/js/components/Radio/Radio.js"
          },
          "tagName": "wm-radio",
          "customElement": true
        },
        {
          "kind": "variable",
          "name": "tagName",
          "type": {
            "text": "string"
          },
          "default": "\"wm-radio\""
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "wm-radio",
          "declaration": {
            "name": "Radio",
            "module": "dist/js/components/Radio/Radio.js"
          }
        },
        {
          "kind": "js",
          "name": "Radio",
          "declaration": {
            "name": "Radio",
            "module": "dist/js/components/Radio/Radio.js"
          }
        },
        {
          "kind": "js",
          "name": "tagName",
          "declaration": {
            "name": "tagName",
            "module": "dist/js/components/Radio/Radio.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/Section/Section.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Mit Sections werden größere, thematisch abgegrenze Blöcke innerhalb einer Seite definiert.",
          "name": "Section",
          "cssProperties": [
            {
              "description": "Hintergrundfarbe",
              "name": "--section-background-color"
            },
            {
              "description": "Rahmenfarbe",
              "name": "--section-border-color"
            },
            {
              "description": "Rahmenstärke",
              "name": "--section-border-width"
            },
            {
              "description": "Innenabstand",
              "name": "--section-padding"
            },
            {
              "description": "Innenabstand hervorgehoben (Mobilansicht unter 64em)",
              "name": "--section-highlight-padding--mobil"
            },
            {
              "description": "Innenabstand hervorgehoben (Desktopansicht ab 64em)",
              "name": "--section-highlight-padding--desktop"
            },
            {
              "description": "Hintergrundfarbe hervorgehoben",
              "name": "--section-highlight-background-color"
            }
          ],
          "slots": [
            {
              "description": "HTML oder Text-Content",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "properties",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ highlight: { type: String, reflect: true }, type: { type: String, reflect: true }, contentsize: { type: String, reflect: true }, }"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "highlight",
              "description": "Section mit oder ohne Hintergrund.",
              "type": {
                "text": "'abendstimmung'|'flieder'|'frischgruen'|'goldgelb'|'morgenrot'|'nebelgrau'|'wasserblau'"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "type",
              "description": "Bei Map-Einbindungen",
              "type": {
                "text": "'full'"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "contentsize",
              "type": {
                "text": "'full'|'text'"
              },
              "description": "Wieviel Platz gibt es für Inhalt. Voll oder im Theme definiertes Maximum für Text.",
              "default": "\"full\""
            }
          ],
          "superclass": {
            "name": "s",
            "module": "/dist/js/lit-element-8bc32369.js"
          },
          "tagName": "wm-section",
          "customElement": true
        },
        {
          "kind": "variable",
          "name": "tagName",
          "type": {
            "text": "string"
          },
          "default": "\"wm-section\""
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "wm-section",
          "declaration": {
            "name": "Section",
            "module": "dist/js/components/Section/Section.js"
          }
        },
        {
          "kind": "js",
          "name": "Section",
          "declaration": {
            "name": "Section",
            "module": "dist/js/components/Section/Section.js"
          }
        },
        {
          "kind": "js",
          "name": "tagName",
          "declaration": {
            "name": "tagName",
            "module": "dist/js/components/Section/Section.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/Select/Select.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Select",
          "members": [
            {
              "kind": "field",
              "name": "properties",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...super.properties, multiple: { type: Boolean }, size: { type: Number }, type: { type: String, reflect: true }, disabled: { type: Boolean, reflect: true }, errormessage: { type: String, attribute: \"errormessage\" }, summaryErrormessage: { type: String, attribute: \"summary-errormessage\" }, hasError: { type: Boolean, reflect: true }, error: { type: String }, options: { type: String }, values: { type: String }, selected: { type: String, reflect: true }, validate: { type: Boolean, reflect: true }, showErrors: { type: Boolean, reflect: true }, _parsedOptions: { state: true }, _optionsCache: { state: true }, _lastOptionsSignature: { state: true }, _debounceTimer: { state: true }, _initialSelectedValues: { state: true }, disabledoptions: { type: String } }",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[globalStyles, formItemStyles, formStyles]",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "field",
              "name": "_selectElement",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "_getOptionsSignature",
              "description": "Generiert eine eindeutige Signatur basierend auf den aktuellen Optionen und Werten",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "String"
                }
              }
            },
            {
              "kind": "method",
              "name": "_parseDisabledOptions",
              "description": "Parst die deaktivierten Optionen aus dem Attribut",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Array<Boolean>"
                }
              }
            },
            {
              "kind": "method",
              "name": "_parseOptionsFromAttributes",
              "description": "Parst die Optionen, Werte und ausgewählten Attribute, um Optionselemente zu erstellen",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_updateSelectWithParsedOptions",
              "description": "Aktualisiert das Select-Element mit geparsten Optionen",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "updateOptions",
              "parameters": [
                {
                  "name": "newOptions",
                  "description": "Array of option elements to add",
                  "type": {
                    "text": "Array<HTMLOptionElement>"
                  }
                }
              ],
              "description": "Update the <option> elements inside the select from light DOM.\nMaintained for backward compatibility.",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "_updateValueState",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "parameters": [
                {
                  "name": "changedProperties",
                  "description": "Map of changed properties",
                  "type": {
                    "text": "Map"
                  }
                }
              ],
              "description": "Called when the element's first update is complete",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "method",
              "name": "_updateFormValue",
              "description": "Updates the form value with the current selection(s)",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleInput",
              "parameters": [
                {
                  "name": "e",
                  "description": "The input event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handles input events from the select element",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "method",
              "name": "_handleChange",
              "parameters": [
                {
                  "name": "e",
                  "description": "The change event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handles change events from the select element",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleFocus",
              "parameters": [
                {
                  "name": "e",
                  "description": "The focus event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handles focus events from the select element",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleBlur",
              "parameters": [
                {
                  "name": "e",
                  "description": "The blur event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handles blur events from the select element",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "description": "Validates the current value against the required constraint",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "method",
              "name": "clearErrorState",
              "description": "Clears the error state of the component",
              "privacy": "public",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "method",
              "name": "showError",
              "parameters": [
                {
                  "name": "message",
                  "description": "The error message to display",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Shows an error message for this select component",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "clearError",
              "description": "Clears any error state from this select component",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "_synchronizeErrorState",
              "parameters": [
                {
                  "name": "message",
                  "default": "''"
                }
              ],
              "description": "Updates the error state synchronization between the component and form association API",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "method",
              "name": "_performValidation",
              "description": "Override _performValidation from FormStateManager",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "method",
              "name": "reset"
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "description": "Reset the component to its initial state (called by forms)",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties",
                  "description": "Map of changed properties",
                  "type": {
                    "text": "Map"
                  }
                }
              ],
              "description": "Called when the element's properties have changed",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "method",
              "name": "render",
              "description": "The hidden slot prevents duplicate display of options in the DOM.\nOption elements are slotted in the light DOM for API access\nbut rendered only in the shadow DOM's select element."
            },
            {
              "kind": "method",
              "name": "setValue",
              "parameters": [
                {
                  "name": "value",
                  "description": "Der neue zu setzende Wert",
                  "type": {
                    "text": "string|Array"
                  }
                },
                {
                  "name": "options",
                  "default": "{}",
                  "description": "Zusätzliche Optionen",
                  "type": {
                    "text": "@param {boolean} options.validate - Ob nach dem Setzen validiert werden soll (Standard: true)\n\t * @param {boolean} options.silent - Ob das Versenden von Events übersprungen werden soll (Standard: false)\n\t * "
                  }
                }
              ],
              "description": "Öffentliche Methode zum programmatischen Setzen des Auswahlwerts\nDies stellt sicher, dass alle Seiteneffekte ordnungsgemäß ausgelöst werden",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "string|Array"
                }
              }
            },
            {
              "kind": "method",
              "name": "setDisabled",
              "parameters": [
                {
                  "name": "isDisabled",
                  "description": "Gibt an, ob die Komponente deaktiviert werden soll",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Setzt oder entfernt den deaktivierten Zustand",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "validateField",
              "description": "Erzwingt die Validierung der Komponente",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "updateUI",
              "description": "Erzwingt ausdrücklich ein Update des UI-Zustands der Komponente",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "_selectedToValue",
              "parameters": [
                {
                  "name": "selectedStr"
                }
              ],
              "description": "Helper method to convert from the selected attribute string to the value property",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_valueToSelected",
              "parameters": [
                {
                  "name": "value"
                }
              ],
              "description": "Helper method to convert from value property to selected attribute string",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_syncUIWithValue",
              "description": "Synchronizes the UI with the current value",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleSelectedAttributeChange",
              "description": "Handle the selected attribute changes specifically",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleValuePropertyChange",
              "parameters": [
                {
                  "name": "oldValue"
                }
              ],
              "description": "Handle value property changes",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "size",
              "description": "Anzahl der sichtbaren Optionen",
              "type": {
                "text": "String"
              },
              "default": "undefined",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "field",
              "name": "multiple",
              "type": {
                "text": "Boolean"
              },
              "description": "Mehrere Auswählbar",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "'select'"
              },
              "description": "Art des Eingabefelds",
              "privacy": "private",
              "default": "\"select\""
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "Boolean"
              },
              "description": "Gibt an, ob das Element deaktiviert ist oder nicht",
              "default": "false",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "field",
              "name": "errormessage",
              "type": {
                "text": "String"
              },
              "description": "Fehlermeldung bei ungültiger Eingabe\nDiese Meldung wird direkt am Select-Element angezeigt, wenn es validiert wird und ungültig ist.",
              "default": "\"\""
            },
            {
              "kind": "field",
              "name": "summaryErrormessage",
              "type": {
                "text": "String"
              },
              "description": "Spezifische Fehlermeldung für die Fehlerübersicht\nDiese Meldung wird in der Fehlerübersicht (wm-formerrorsummary) anstelle der normalen\nFehlermeldung angezeigt. Dies ist nützlich, um in der Übersicht kontextspezifischere\nFehlermeldungen anzuzeigen, z.B. \"Bitte wählen Sie eine Option bei 'Personendaten-Typ - Art des Antrags'\"\nstatt nur \"Auswahl erforderlich\".",
              "default": "\"\""
            },
            {
              "kind": "field",
              "name": "hasError",
              "type": {
                "text": "Boolean"
              },
              "description": "Gibt an, ob das Element einen Fehler hat",
              "default": "false",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "String"
              },
              "description": "Aktuelle Fehlermeldung",
              "default": "\"\"",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "field",
              "name": "validate",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Aktiviert die Validierung bei Eingabe",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "field",
              "name": "showErrors",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Sofortige Fehleranzeige",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "String"
              },
              "description": "Semikolon-getrennte Liste von Optionsbeschriftungen",
              "default": "\"\""
            },
            {
              "kind": "field",
              "name": "values",
              "type": {
                "text": "String"
              },
              "description": "Semikolon-getrennte Liste von Optionswerten",
              "default": "\"\""
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "String"
              },
              "description": "Semikolon-getrennte Liste von vorausgewählten Werten",
              "default": "\"\""
            },
            {
              "kind": "field",
              "name": "disabledoptions",
              "type": {
                "text": "String"
              },
              "description": "Semikolon-getrennte Liste von deaktivierten Optionen (true/false)",
              "deprecated": "Use 'disabled=\"true;false;true\"' syntax instead",
              "default": "\"\""
            },
            {
              "kind": "field",
              "name": "_parsedOptions",
              "type": {
                "text": "Array"
              },
              "privacy": "private",
              "description": "Geparste Optionselemente",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Aktueller Wert des Select-Elements",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "field",
              "name": "_optionsCache",
              "type": {
                "text": "Object"
              },
              "privacy": "private",
              "description": "Cache für generierte Optionen",
              "default": "{}"
            },
            {
              "kind": "field",
              "name": "_lastOptionsSignature",
              "type": {
                "text": "String"
              },
              "privacy": "private",
              "description": "Signatur der letzten Optionen für Änderungserkennung",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "_debouncedDispatchChange",
              "privacy": "private",
              "description": "Debounced Funktion zur Verzögerung des Change-Events",
              "type": {
                "text": "Function"
              }
            },
            {
              "kind": "field",
              "name": "_initialSelectedValues",
              "privacy": "private",
              "description": "Initial ausgewählte Werte für die Zurücksetzfunktionalität",
              "type": {
                "text": "Array|String"
              }
            },
            {
              "kind": "field",
              "name": "_errorController",
              "privacy": "private",
              "description": "Error-Controller für zentralisierte Fehlerbehandlung",
              "type": {
                "text": "Object"
              },
              "default": "new ErrorStateController(this)"
            },
            {
              "kind": "field",
              "name": "STATES",
              "static": true,
              "readonly": true,
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "method",
              "name": "_resetToInitialValue",
              "description": "Fallback reset implementation",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "method",
              "name": "_getInputElement",
              "description": "Helper method to find input element in shadow DOM",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "method",
              "name": "_changeState",
              "parameters": [
                {
                  "name": "newState",
                  "description": "The target state",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "options",
                  "default": "{}",
                  "description": "Additional options for the transition",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "description": "Transitions the component to a new state",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "method",
              "name": "_handleStateTransition",
              "parameters": [
                {
                  "name": "oldState",
                  "description": "Previous state",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "newState",
                  "description": "New state",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "options",
                  "default": "{}",
                  "description": "Additional options",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "description": "Handle component-specific behavior for state transitions",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "method",
              "name": "_updateErrorState",
              "parameters": [
                {
                  "name": "errorMessage",
                  "description": "Error message to display",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "description": "Centralized method to update component error state",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "method",
              "name": "_getFormControlElement",
              "description": "Returns the form control element from shadow DOM\nComponents should override this to return their specific control element",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "method",
              "name": "_announceStateChange",
              "parameters": [
                {
                  "name": "state",
                  "description": "State to announce",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "description": "Announces state changes to screen readers",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "parameters": [
                {
                  "name": "message",
                  "description": "Validation message",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "description": "Public method to set a custom validation message",
              "privacy": "public",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "parameters": [
                {
                  "name": "disabled",
                  "description": "Whether the control should be disabled",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Called when the element's form sets the disabled state",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "field",
              "name": "_componentState",
              "privacy": "private",
              "description": "Current component state",
              "type": {
                "text": "String"
              },
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "field",
              "name": "_previousState",
              "type": {
                "text": "String"
              },
              "privacy": "private",
              "description": "Previous component state for transitions",
              "default": "null",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "field",
              "name": "_initialValue",
              "type": {
                "text": "String"
              },
              "description": "Initial value of the component",
              "default": "''",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "field",
              "name": "defaultValue",
              "type": {
                "text": "String"
              },
              "description": "Default value of the component",
              "default": "''",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "field",
              "name": "_output",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "method",
              "name": "_setAriaSelected",
              "parameters": [
                {
                  "name": "current",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "method",
              "name": "_filterOptions",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Filter existing options in a filterable combobox",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "method",
              "name": "_addEvents",
              "description": "Add click and key events for option list",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "method",
              "name": "_markOption",
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "description": "Highlight the current option in the list of options",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "method",
              "name": "_clickOutSide",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "method",
              "name": "hideOptions",
              "parameters": [
                {
                  "name": "setFocus",
                  "default": "true",
                  "description": "Fokus auf Input legen (true)",
                  "type": {
                    "text": "Boolean"
                  }
                }
              ],
              "description": "Liste in Combobox verbergen",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "method",
              "name": "showOptions",
              "description": "Liste in Combobox anzeigen",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "method",
              "name": "_announceOptions",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "method",
              "name": "_toggleOptions",
              "description": "Toggle options",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "method",
              "name": "_selectOption",
              "parameters": [
                {
                  "name": "cur"
                },
                {
                  "name": "elements",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Turn Nodelist into Array",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "method",
              "name": "_cancelSearch",
              "description": "Cancel search/reset filtering state when Escape is pressed.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "method",
              "name": "_renderElement",
              "parameters": [
                {
                  "name": "content"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "method",
              "name": "_defineErrorMessages",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "method",
              "name": "_handleValidation",
              "description": "Centralizes validation handling for consistent behavior",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "field",
              "name": "announcementText",
              "type": {
                "text": "String"
              },
              "description": "Text, der angekündigt wird, wenn Optionen angezeigt werden",
              "default": "\"Suchvorschläge werden angezeigt. Verwenden Sie Pfeiltasten um zu navigieren\"",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "field",
              "name": "maxlength",
              "description": "Maximale Zeichenanzahl, die eingegeben werden darf",
              "type": {
                "text": "Number"
              },
              "default": "undefined",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "field",
              "name": "placeholder",
              "description": "placeholder-Attribut in HTML",
              "type": {
                "text": "String"
              },
              "default": "undefined",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "field",
              "name": "search",
              "description": "Art des Suchfeldes",
              "type": {
                "text": "'hidden'|'visible'|'hiddenmobile'"
              },
              "default": "undefined",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "field",
              "name": "filter",
              "type": {
                "text": "Boolean"
              },
              "description": "Liste in Combobox beim Tippen filtern",
              "default": "false",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "field",
              "name": "hideMaxlength",
              "type": {
                "text": "Boolean"
              },
              "description": "Verfügbare Zeichenanzahl verbergen",
              "default": "false",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "field",
              "name": "_highlightedOptionID",
              "description": "id of the currently Highlight Option",
              "type": {
                "text": "String"
              },
              "privacy": "private",
              "default": "undefined",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "field",
              "name": "maxlengthText",
              "type": {
                "text": "String"
              },
              "description": "Text for maxlength message",
              "default": "\"Es sind noch {remaining} Zeichen verfügbar\"",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "field",
              "name": "patternMismatchMessage",
              "type": {
                "text": "String"
              },
              "description": "Pattern validation message",
              "default": "\"Bitte geben Sie einen gültigen Wert ein\"",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "field",
              "name": "info",
              "default": "undefined",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "field",
              "name": "_infoOpen",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            }
          ],
          "mixins": [
            {
              "name": "FormStateManager",
              "module": "/dist/js/components/misc/form-state-manager.js"
            },
            {
              "name": "FormText",
              "module": "/dist/js/components/misc/form-text.js"
            }
          ],
          "superclass": {
            "name": "s",
            "module": "/dist/js/lit-element-8bc32369.js"
          },
          "tagName": "wm-select",
          "customElement": true,
          "events": [
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "tagName",
          "type": {
            "text": "string"
          },
          "default": "\"wm-select\""
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "wm-select",
          "declaration": {
            "name": "Select",
            "module": "dist/js/components/Select/Select.js"
          }
        },
        {
          "kind": "js",
          "name": "Select",
          "declaration": {
            "name": "Select",
            "module": "dist/js/components/Select/Select.js"
          }
        },
        {
          "kind": "js",
          "name": "tagName",
          "declaration": {
            "name": "tagName",
            "module": "dist/js/components/Select/Select.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/Sidebar/Sidebar.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Seitenleiste für Inhalte, die ständig, auch wenn Seiten gewechselt werden, angezeigt bzw. eingeblendet werden können sollen.",
          "name": "Sidebar",
          "cssProperties": [
            {
              "description": "Hintergrundfarbe",
              "name": "--sidebar-background-color"
            },
            {
              "description": "Hintergrundfarbe Balken",
              "name": "--sidebar-header-background-color"
            },
            {
              "description": "Textfarbe Balken",
              "name": "--sidebar-header-font-color"
            },
            {
              "description": "Außenabstand nach unten",
              "name": "--sidebar-header-margin"
            },
            {
              "description": "Hintergrundfarbe von Eingabefeldern",
              "name": "--sidebar-input-background-color"
            },
            {
              "description": "Innenabstand",
              "name": "--sidebar-padding"
            },
            {
              "description": "Breite",
              "name": "--sidebar-inline-size"
            }
          ],
          "slots": [
            {
              "description": "Jeglicher HTML-Content",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_closeButton",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_toggles",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "properties",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ _sidebarID: { type: String }, id: { type: String, reflect: true }, label: { type: String, reflect: true }, open: { type: Boolean, reflect: true }, shortcut: { type: String, reflect: true }, }"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[styles]"
            },
            {
              "kind": "method",
              "name": "_saveAndApplySettings",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_attachEvents",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_closeOnEsacape",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_activeToggleButtons",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_addKeyboardShortcut",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleClickOutside",
              "description": "Close on click outside of .content",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "toggleSidebar",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Sidebar öffnen oder schließen"
            },
            {
              "kind": "method",
              "name": "closeSidebar",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Sidebar schließen"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "Boolean"
              },
              "description": "Ist die Seitenleisten eingeblendet.",
              "default": "true"
            },
            {
              "kind": "field",
              "name": "id",
              "description": "Einzigartige ID",
              "type": {
                "text": "String"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "String"
              },
              "description": "Sichtbare Bezeichnung",
              "default": "\"\""
            },
            {
              "kind": "field",
              "name": "shortcut",
              "type": {
                "text": "String"
              },
              "description": "Keyboard-Shortcut zum Öffnen und Schließen, zum Beispiel: gs",
              "default": "\"s\""
            },
            {
              "kind": "field",
              "name": "_sidebarID",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "\"\""
            },
            {
              "kind": "field",
              "name": "_breakPoint",
              "privacy": "private"
            }
          ],
          "superclass": {
            "name": "s",
            "module": "/dist/js/lit-element-8bc32369.js"
          },
          "summary": "Button/Button",
          "tagName": "wm-sidebar",
          "customElement": true
        },
        {
          "kind": "variable",
          "name": "tagName",
          "type": {
            "text": "string"
          },
          "default": "\"wm-sidebar\""
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "wm-sidebar",
          "declaration": {
            "name": "Sidebar",
            "module": "dist/js/components/Sidebar/Sidebar.js"
          }
        },
        {
          "kind": "js",
          "name": "Sidebar",
          "declaration": {
            "name": "Sidebar",
            "module": "dist/js/components/Sidebar/Sidebar.js"
          }
        },
        {
          "kind": "js",
          "name": "tagName",
          "declaration": {
            "name": "tagName",
            "module": "dist/js/components/Sidebar/Sidebar.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/Stack/Stack.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Komponeten zur vertikalen oder horizontalen Ausrichtung von Elementen",
          "name": "Stack",
          "cssProperties": [
            {
              "description": "Abstand zwischen den Elementen",
              "name": "--stack-spacing"
            }
          ],
          "slots": [
            {
              "description": "HTML oder Text-Content",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "properties",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ gap: { type: String, reflect: true }, gapx: { type: String, reflect: true }, gapy: { type: String, reflect: true }, grow: { type: Boolean, reflect: true }, equal: { type: Boolean, reflect: true }, wrap: { type: Boolean, reflect: true }, vertical: { type: Boolean, reflect: true }, horizontal: { type: Boolean, reflect: true }, alignment: { type: String, reflect: true }, justify: { type: String, reflect: true }, }"
            },
            {
              "kind": "method",
              "name": "createRenderRoot",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "gap",
              "type": {
                "text": "'xxs'|'xs'|'s'|'m'|'l'"
              },
              "description": "Abstand zwischen Elementen",
              "default": "\"s\""
            },
            {
              "kind": "field",
              "name": "gapx",
              "description": "Horizontaler Abstand zwischen Elementen",
              "type": {
                "text": "'xxs'|'xs'|'s'|'m'|'l'"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "gapy",
              "description": "Vertikaler Abstand zwischen Elementen",
              "type": {
                "text": "'xxs'|'xs'|'s'|'m'|'l'"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "grow",
              "description": "Elternelement füllen. Entspricht der `flex-grow` Eigenschaft.",
              "type": {
                "text": "Boolean"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "equal",
              "description": "Wird mit `grow` verwendet und teilt den Platz nicht gleichmäßig auf, sondern macht alle Elemente gleich breit.",
              "type": {
                "text": "Boolean"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "wrap",
              "description": "Erlauben, dass Elemente wrappen können.",
              "type": {
                "text": "Boolean"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "vertical",
              "type": {
                "text": "Boolean"
              },
              "description": "Vertikal darstellen",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "horizontal",
              "type": {
                "text": "Boolean"
              },
              "description": "Immer horizontal darstellen",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "justify",
              "description": "Ausrichtung auf der Hauptachse",
              "type": {
                "text": "'center'|'end'|'space-between'"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "alignment",
              "description": "Ausrichtung auf der Gegenachse",
              "type": {
                "text": "'center'|'end'|'start'|'stretch'"
              },
              "default": "undefined"
            }
          ],
          "superclass": {
            "name": "s",
            "module": "/dist/js/lit-element-8bc32369.js"
          },
          "tagName": "wm-stack",
          "customElement": true
        },
        {
          "kind": "variable",
          "name": "tagName",
          "type": {
            "text": "string"
          },
          "default": "\"wm-stack\""
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "wm-stack",
          "declaration": {
            "name": "Stack",
            "module": "dist/js/components/Stack/Stack.js"
          }
        },
        {
          "kind": "js",
          "name": "Stack",
          "declaration": {
            "name": "Stack",
            "module": "dist/js/components/Stack/Stack.js"
          }
        },
        {
          "kind": "js",
          "name": "tagName",
          "declaration": {
            "name": "tagName",
            "module": "dist/js/components/Stack/Stack.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/Stage/Stage.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Titel der Seite, alternativ inklusive Links, Bild, Video und/oder Galerie.",
          "name": "Stage",
          "cssProperties": [
            {
              "description": "Hintergrundfarbe",
              "name": "--stage-media-background-color"
            },
            {
              "description": "Hintergrundfarbe Textcontainer",
              "name": "--stage-text-background-color"
            },
            {
              "description": "Schriftfarbe",
              "name": "--stage-font-color"
            },
            {
              "description": "Padding für den Inhalt",
              "name": "--stage-content-padding"
            },
            {
              "description": "Schriftgröße (Mobilansicht unter 64em)",
              "name": "--stage-font-size--mobil"
            },
            {
              "description": "Außenabstand nach unten (Mobilansicht unter 64em)",
              "name": "--stage-margin--mobil"
            },
            {
              "description": "Außenabstand nach unten (Desktopansicht ab 64em)",
              "name": "--stage-margin--desktop"
            }
          ],
          "slots": [
            {
              "description": "Textinhalt",
              "name": "content"
            },
            {
              "description": "Bild oder Video",
              "name": "media"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_galleryTrigger",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_video",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_gallery",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_media",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "properties",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ color: { type: String, reflect: true }, justify: { type: String, reflect: true }, media: { type: String, reflect: true }, _hasMedia: { type: Boolean, attribute: false, reflect: true }, _hasColor: { type: Boolean, attribute: false }, _playing: { type: Boolean, attribute: false, reflect: true }, playButtonLabel: { type: String }, }"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[styles]"
            },
            {
              "kind": "method",
              "name": "firstUpdated"
            },
            {
              "kind": "method",
              "name": "_toggleMedia",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Shoe and hide media based on breakpoint",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_toggleDocumentClass",
              "description": "Toggle class on the document",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_constructCarousel",
              "description": "Displays multiple images in a stage",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_renderMultipleImages",
              "description": "Shows one or three thumbsnails if 3 or more images are passed",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_playVideo",
              "description": "Handle click event",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "color",
              "description": "Hintergrund Farbe der Stage",
              "type": {
                "text": "'abendstimmung'|'flieder'|'frischgruen'|'goldgelb'|'morgenrot'|'nebelgrau'|'wasserblau'"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "justify",
              "description": "Position der Überschrift",
              "type": {
                "text": "'start'|'end'"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "media",
              "description": "Breakpoint, ab dem erst Medieninhalte angezeigt werden sollen (zum Beispiel 48em)",
              "type": {
                "text": "String"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "_hasColor",
              "type": {
                "text": "Boolean"
              },
              "description": "Does the stage have a background color",
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_hasMedia",
              "type": {
                "text": "Boolean"
              },
              "description": "Does the stage contain media like images or video",
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_hasVideo",
              "type": {
                "text": "Boolean"
              },
              "description": "Does the stage contain media video",
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_playing",
              "type": {
                "text": "Boolean"
              },
              "description": "Is the video playing",
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "playButtonLabel",
              "type": {
                "text": "Boolean"
              },
              "description": "Label des Play-Buttons, wenn es ein Video gibt",
              "privacy": "private",
              "default": "\"Video abspielen\""
            }
          ],
          "superclass": {
            "name": "s",
            "module": "/dist/js/lit-element-8bc32369.js"
          },
          "summary": "Button/Button, Carousel/Carousel",
          "tagName": "wm-stage",
          "customElement": true
        },
        {
          "kind": "variable",
          "name": "tagName",
          "type": {
            "text": "string"
          },
          "default": "\"wm-stage\""
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "wm-stage",
          "declaration": {
            "name": "Stage",
            "module": "dist/js/components/Stage/Stage.js"
          }
        },
        {
          "kind": "js",
          "name": "Stage",
          "declaration": {
            "name": "Stage",
            "module": "dist/js/components/Stage/Stage.js"
          }
        },
        {
          "kind": "js",
          "name": "tagName",
          "declaration": {
            "name": "tagName",
            "module": "dist/js/components/Stage/Stage.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/Status/Status.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Status",
          "name": "Status",
          "cssProperties": [
            {
              "description": "Abstand zwischen Kindelementen",
              "name": "--status-gap"
            },
            {
              "description": "Farbe des Status",
              "name": "--status-color"
            },
            {
              "description": "Größe des Status",
              "name": "--status-size"
            }
          ],
          "slots": [
            {
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "properties",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ label: { type: String, reflect: true }, loadingLabel: { type: String, reflect: true }, reverse: { type: Boolean, reflect: true }, status: { type: Number, reflect: true }, statusText: { type: String, reflect: true }, }"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[styles]"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "String"
              },
              "description": "Der Text vor der Statusanzeige",
              "default": "\"Auslastung:\""
            },
            {
              "kind": "field",
              "name": "loadingLabel",
              "type": {
                "text": "String"
              },
              "description": "Text, der angezeigt wird, solange Daten laden.",
              "default": "\"Lade Auslastung…\""
            },
            {
              "kind": "field",
              "name": "reverse",
              "type": {
                "text": "Boolean"
              },
              "description": "Text vor Status anzeigen",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "status",
              "type": {
                "text": "0|1|2|3|4|5|6"
              },
              "description": "ID des jeweiligen Status (0 = Schwarz, 1 = Grün, 2 = Gelb, 3 = Dunkelgelb, 4 = Orange, 5 = Rot, 6 = Hellgrau)",
              "default": "6"
            },
            {
              "kind": "field",
              "name": "statusText",
              "type": {
                "text": "String"
              },
              "description": "Text, der neben der visuellen Anzeige dargestellt wird",
              "default": "\"\""
            }
          ],
          "superclass": {
            "name": "s",
            "module": "/dist/js/lit-element-8bc32369.js"
          },
          "tagName": "wm-status",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "wm-status",
          "declaration": {
            "name": "Status",
            "module": "dist/js/components/Status/Status.js"
          }
        },
        {
          "kind": "js",
          "name": "Status",
          "declaration": {
            "name": "Status",
            "module": "dist/js/components/Status/Status.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/Switch/Switch.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Toggle-Switch in Formularen",
          "name": "Switch",
          "cssProperties": [
            {
              "description": "Hintergrundfarbe inaktiv",
              "name": "--switch-background-color"
            },
            {
              "description": "Hintergrundfarbe aktiv",
              "name": "--switch-background-color--active"
            },
            {
              "description": "Hintergrundfarbe des Reglers",
              "name": "--switch-background-knob-color"
            },
            {
              "description": "Farbe des Rahmens",
              "name": "--switch-border-color"
            }
          ],
          "slots": [
            {
              "description": "Text",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "properties",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ label: { type: String, reflect: true }, checked: { type: Boolean }, disabled: { type: Boolean, reflect: true }, errormessage: { type: String, attribute: \"errormessage\" }, summaryErrormessage: { type: String, attribute: \"summary-errormessage\" }, hasError: { type: Boolean, reflect: true }, error: { type: String }, validate: { type: Boolean, reflect: true }, showErrors: { type: Boolean, reflect: true }, _initialValue: { state: true }, _hasInteracted: { state: true } }",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[styles]"
            },
            {
              "kind": "method",
              "name": "_toggle",
              "parameters": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "description": "Standard validation method that respects component state",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "privacy": "public",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "method",
              "name": "showError",
              "parameters": [
                {
                  "name": "message"
                }
              ]
            },
            {
              "kind": "method",
              "name": "clearError"
            },
            {
              "kind": "method",
              "name": "_performValidation",
              "description": "Component-specific validation logic\nShould be overridden by component implementations",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "method",
              "name": "_getFormControlElement",
              "description": "Returns the form control element from shadow DOM\nComponents should override this to return their specific control element",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "method",
              "name": "reset",
              "description": "Reset the form control to its initial value",
              "privacy": "public",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "description": "Form reset callback - called by parent forms\nProvides standard reset behavior",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "method",
              "name": "_handleFocus",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Custom focus event",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "method",
              "name": "_handleBlur",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Custom blur event",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "method",
              "name": "_handleChange",
              "parameters": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "kind": "method",
              "name": "setDisabled",
              "parameters": [
                {
                  "name": "isDisabled",
                  "description": "Whether the switch should be disabled",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Sets the disabled state of the switch",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ],
              "privacy": "private",
              "description": "Override of updated lifecycle to handle attribute/property changes",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "String"
              },
              "description": "Bezeichnung des Eingabefeldes",
              "default": "\"Aktivieren\"",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "Boolean"
              },
              "description": "Whether the component is disabled",
              "default": "false",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "field",
              "name": "hasError",
              "type": {
                "text": "Boolean"
              },
              "description": "Whether the component has a validation error",
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "error",
              "description": "Current error message",
              "type": {
                "text": "String"
              },
              "default": "\"\"",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "errormessage",
              "type": {
                "text": "string"
              },
              "default": "\"\""
            },
            {
              "kind": "field",
              "name": "summaryErrormessage",
              "type": {
                "text": "string"
              },
              "default": "\"\""
            },
            {
              "kind": "field",
              "name": "validate",
              "type": {
                "text": "Boolean"
              },
              "description": "Whether to validate on input",
              "default": "false",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "showErrors",
              "type": {
                "text": "Boolean"
              },
              "description": "Whether to show validation errors immediately",
              "default": "false",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "string"
              },
              "default": "\"switch\""
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "String"
              },
              "description": "Wert des Elements",
              "default": "\"0\"",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "_initialValue",
              "type": {
                "text": "String"
              },
              "description": "Initial value of the component",
              "default": "\"0\"",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "field",
              "name": "_hasInteracted",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_errorController",
              "description": "Add error state controller for centralized error handling",
              "type": {
                "text": "ErrorStateController"
              },
              "privacy": "private",
              "default": "new ErrorStateController(this)",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "STATES",
              "static": true,
              "readonly": true,
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "privacy": "private",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ],
              "description": "Captures initial value from DOM after first render",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "method",
              "name": "_resetToInitialValue",
              "description": "Fallback reset implementation",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "method",
              "name": "_getInputElement",
              "description": "Helper method to find input element in shadow DOM",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "method",
              "name": "_changeState",
              "parameters": [
                {
                  "name": "newState",
                  "description": "The target state",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "options",
                  "default": "{}",
                  "description": "Additional options for the transition",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "description": "Transitions the component to a new state",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "method",
              "name": "_handleStateTransition",
              "parameters": [
                {
                  "name": "oldState",
                  "description": "Previous state",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "newState",
                  "description": "New state",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "options",
                  "default": "{}",
                  "description": "Additional options",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "description": "Handle component-specific behavior for state transitions",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "method",
              "name": "_updateErrorState",
              "parameters": [
                {
                  "name": "errorMessage",
                  "description": "Error message to display",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "description": "Centralized method to update component error state",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "method",
              "name": "_announceStateChange",
              "parameters": [
                {
                  "name": "state",
                  "description": "State to announce",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "description": "Announces state changes to screen readers",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "parameters": [
                {
                  "name": "message",
                  "description": "Validation message",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "description": "Public method to set a custom validation message",
              "privacy": "public",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "parameters": [
                {
                  "name": "disabled",
                  "description": "Whether the control should be disabled",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Called when the element's form sets the disabled state",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "field",
              "name": "_componentState",
              "privacy": "private",
              "description": "Current component state",
              "type": {
                "text": "String"
              },
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "field",
              "name": "_previousState",
              "type": {
                "text": "String"
              },
              "privacy": "private",
              "description": "Previous component state for transitions",
              "default": "null",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "field",
              "name": "defaultValue",
              "type": {
                "text": "String"
              },
              "description": "Default value of the component",
              "default": "''",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "field",
              "name": "_item",
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "static": true,
              "default": "true",
              "description": "Allow fields to participate in form submission and validation",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...s.shadowRootOptions, delegatesFocus: true, }",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "method",
              "name": "_defineErrorMessages",
              "description": "Define some custom error messages based on error and input type",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "method",
              "name": "_setValidity",
              "description": "Allow custom element to participate in form validation",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "method",
              "name": "_renderLabel",
              "parameters": [
                {
                  "name": "label"
                },
                {
                  "name": "id"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "method",
              "name": "_showRequired",
              "description": "Show * or required text",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "method",
              "name": "_dispatchFormEvent",
              "parameters": [
                {
                  "name": "eventName"
                },
                {
                  "name": "detail",
                  "default": "{}"
                }
              ],
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "method",
              "name": "_dispatchCustomEvent",
              "parameters": [
                {
                  "name": "eventName"
                },
                {
                  "name": "detail",
                  "default": "{}"
                }
              ],
              "description": "Helper method to dispatch events consistently",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "method",
              "name": "_handleInvalid",
              "parameters": [
                {
                  "name": "errormessage"
                }
              ],
              "description": "Custom invalid event",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "method",
              "name": "_renderWrapper",
              "parameters": [
                {
                  "name": "content"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "hideAsterisk",
              "type": {
                "text": "Boolean"
              },
              "description": "Text statt Sternchen darstellen",
              "default": "false",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "id",
              "description": "optionale ID",
              "type": {
                "text": "String"
              },
              "default": "undefined",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "description": "Name-Attribute in HTML",
              "type": {
                "text": "String"
              },
              "default": "undefined",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "Boolean"
              },
              "description": "Pflichtfeld",
              "default": "false",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "requiredText",
              "type": {
                "text": "String"
              },
              "description": " Text für Pflichtfeld-Hinweis",
              "default": "\"Pflichtfeld\"",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "_internals",
              "description": "Attach internals for form submission and validation",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "_slotController",
              "description": "Slotcontroller",
              "type": {
                "text": "class"
              },
              "privacy": "private",
              "default": "new SlotController(this)",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "_id",
              "description": "Random id",
              "type": {
                "text": "String"
              },
              "privacy": "private",
              "default": "`${randomHash()}`",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "_formId",
              "description": "Form id",
              "type": {
                "text": "String"
              },
              "privacy": "private",
              "default": "`wm-form-item-${this._id}`",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "hint",
              "description": "Hinweis",
              "type": {
                "text": "String"
              },
              "default": "undefined",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "_hasHint",
              "type": {
                "text": "Boolean"
              },
              "description": "Is there a hint?",
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            }
          ],
          "mixins": [
            {
              "name": "FormStateManager",
              "module": "/dist/js/components/misc/form-state-manager.js"
            },
            {
              "name": "FormWrapper",
              "module": "/dist/js/components/misc/form-wrapper.js"
            }
          ],
          "superclass": {
            "name": "s",
            "module": "/dist/js/lit-element-8bc32369.js"
          },
          "tagName": "wm-switch",
          "customElement": true,
          "events": [
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "name": "eventName",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "name": "blur",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "name": "focus",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "name": "invalid",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "name": "reset",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "tagName",
          "type": {
            "text": "string"
          },
          "default": "\"wm-switch\""
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "wm-switch",
          "declaration": {
            "name": "Switch",
            "module": "dist/js/components/Switch/Switch.js"
          }
        },
        {
          "kind": "js",
          "name": "Switch",
          "declaration": {
            "name": "Switch",
            "module": "dist/js/components/Switch/Switch.js"
          }
        },
        {
          "kind": "js",
          "name": "tagName",
          "declaration": {
            "name": "tagName",
            "module": "dist/js/components/Switch/Switch.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/Table/Table.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Tabelle",
          "name": "Table",
          "cssProperties": [
            {
              "description": "Farbe für das Zebramuster",
              "name": "--table-zebra-color"
            }
          ],
          "slots": [
            {
              "description": "Text",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_table",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_tbody",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_rows",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_caption",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_colgroup",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_ths",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_output",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "properties",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ alignment: { type: String, reflect: true }, border: { type: String, reflect: true }, cols: { type: String, reflect: true }, header: { type: String, reflect: true }, hideCaption: { type: Boolean, reflect: true }, label: { type: String, reflect: true }, sort: { type: String, reflect: true }, zebra: { type: String, reflect: true }, }"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[styles]"
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_addSorting",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_addSortButton",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_sortColumn",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "rearrangeRows",
              "parameters": [
                {
                  "name": "th",
                  "description": "Table-Header der Spalte, die sortiert werden soll",
                  "type": {
                    "text": "Node"
                  }
                },
                {
                  "name": "newDirection",
                  "description": "1 aufsteigend oder 0 absteigend",
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "description": "Zeilen neu sortieren"
            },
            {
              "kind": "method",
              "name": "_updateLiveRegion",
              "parameters": [
                {
                  "name": "direction"
                },
                {
                  "name": "type"
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_setColumnAlignment",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_setColumnSizes",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "alignment",
              "description": "Ausrichtung der Spalten: Ein Wert für alle Spalten oder Komma-separierte Liste.",
              "type": {
                "text": "'start'|'end'|'center'"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "border",
              "description": "Rahmen",
              "type": {
                "text": "'columns'|'columns-frame'|'grid'|'full'|'none'|'head'|'rows'|'frame'"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "cols",
              "description": "Breite der Spalten. Entweder relativ zur Gesamtbreite, angegeben in Fraktionen (1, 2, 1) oder Pixel (200px, 150px 400px) oder Mischung (200px, 1, 2)",
              "type": {
                "text": "String"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "header",
              "description": "Header einfärben",
              "type": {
                "text": "'abendstimmung'|'flieder'|'frischgruen'|'goldgelb'|'morgenrot'|'nebelgrau'|'wasserblau'"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "hideCaption",
              "type": {
                "text": "Boolean"
              },
              "description": "Caption verbergen",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "String"
              },
              "description": "Accessible name für die Region",
              "default": "\"\""
            },
            {
              "kind": "field",
              "name": "sort",
              "description": "Spalte sortieren (Komma-separierte Liste von Booleans)",
              "type": {
                "text": "String"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "zebra",
              "description": "Zebra gerade oder ungerade",
              "type": {
                "text": "'even'|'odd'"
              },
              "default": "undefined"
            }
          ],
          "events": [
            {
              "name": "wm-table-sorted",
              "type": {
                "text": "CustomEvent"
              },
              "description": "Wenn eine Spalte sortiert wurde",
              "summary": "direction, column"
            }
          ],
          "superclass": {
            "name": "s",
            "module": "/dist/js/lit-element-8bc32369.js"
          },
          "summary": "Button/Button",
          "tagName": "wm-table",
          "customElement": true
        },
        {
          "kind": "variable",
          "name": "tagName",
          "type": {
            "text": "string"
          },
          "default": "\"wm-table\""
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "wm-table",
          "declaration": {
            "name": "Table",
            "module": "dist/js/components/Table/Table.js"
          }
        },
        {
          "kind": "js",
          "name": "Table",
          "declaration": {
            "name": "Table",
            "module": "dist/js/components/Table/Table.js"
          }
        },
        {
          "kind": "js",
          "name": "tagName",
          "declaration": {
            "name": "tagName",
            "module": "dist/js/components/Table/Table.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/Tabs/Tab.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Reiter",
          "name": "Tab",
          "slots": [
            {
              "description": "Bezeichnung",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "properties",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ selected: { type: Boolean, reflect: true }, }"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[ i` * { box-sizing: border-box; } :host { --_border-color: var(--tab-border-color); --_background-color: var(--tab-background-color); --_font-color: var(--tab-font-color); background-color: var(--_background-color); color: var(--_font-color); display: block; cursor: pointer; line-height: 1.4; border-style: solid; border-width: var(--tab-border-width); border-color: var(--_border-color); font-variation-settings: var(--tab-font-variation-settings); font-weight: var(--tab-font-weight); padding: var(--tab-padding); min-width: fit-content; } :host([selected]) { --_border-color: var(--tab-border-color--active); --_background-color: var(--tab-background-color--active); --_font-color: var(--tab-font-color--active); } :host(:hover) { --_background-color: var(--tab-background-color--active); --_font-color: var(--tab-font-color--active); } :host(:focus-visible) { outline-offset: calc(var(--wm-theme-site-focus-outline-width) * -1) !important; } `, ]"
            },
            {
              "kind": "method",
              "name": "updated"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            }
          ],
          "superclass": {
            "name": "s",
            "module": "/dist/js/lit-element-8bc32369.js"
          },
          "tagName": "wm-tab",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "wm-tab",
          "declaration": {
            "name": "Tab",
            "module": "dist/js/components/Tabs/Tab.js"
          }
        },
        {
          "kind": "js",
          "name": "Tab",
          "declaration": {
            "name": "Tab",
            "module": "dist/js/components/Tabs/Tab.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/Tabs/TabPanel.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Reiter Inhalt",
          "name": "TabPanel",
          "slots": [
            {
              "description": "Text- oder HTML-Content",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "properties",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ selected: { type: Boolean, reflect: true }, }"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[ i` * { box-sizing: border-box; } :host { background-color: var(--tab-background-color--active); border-style: solid; border-color: var(--tabpanel-border-color); border-width: var(--tabpanel-border-width); display: block; padding: var(--tabpanel-padding); } ::slotted(*:not(:first-child, section, wm-section)) { margin-block-start: 1.5em !important; } ` ]"
            },
            {
              "kind": "method",
              "name": "updated"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            }
          ],
          "superclass": {
            "name": "s",
            "module": "/dist/js/lit-element-8bc32369.js"
          },
          "tagName": "wm-tabpanel",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "wm-tabpanel",
          "declaration": {
            "name": "TabPanel",
            "module": "dist/js/components/Tabs/TabPanel.js"
          }
        },
        {
          "kind": "js",
          "name": "TabPanel",
          "declaration": {
            "name": "TabPanel",
            "module": "dist/js/components/Tabs/TabPanel.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/Tabs/Tabs.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Reiter sind nur dann geeignet, wenn die Inhalte nicht sehr wichtig sind. Zum einen bekommen Inhalte hinter Reitern weniger Aufmerksamkeit, zum anderen werden sie von der Google-Suche wenig bis gar nicht berücksichtigt.",
          "name": "Tabs",
          "cssProperties": [
            {
              "description": "Ausrichtung der Tabs in der tablist",
              "name": "--tabs-alignment"
            },
            {
              "description": "Rahmen der gesamten Komponente",
              "name": "--tabs-border"
            },
            {
              "description": "Abstand zwischen den Tabs",
              "name": "--tabs-gap"
            },
            {
              "description": "Innenabstand für die gesamten Komponente",
              "name": "--tabs-padding"
            },
            {
              "description": "Abstand zwischen Tablist und Panel",
              "name": "--tabs-spacing"
            },
            {
              "description": "Abstand zwischen den Tabs (Clean-Theme)",
              "name": "--tabs-theme-clean-gap"
            },
            {
              "description": "Abstand zwischen Tablist und Panel (Clean-Theme)",
              "name": "--tabs-theme-clean-spacing"
            },
            {
              "description": "Hintergrundfarbe eines einzelnen Tabs",
              "name": "--tab-background-color"
            },
            {
              "description": "Hintergrundfarbe für ausgewählten Tab",
              "name": "--tab-background-color--active"
            },
            {
              "description": "Rahmenstärke um einen einzelnen Tab",
              "name": "--tab-border-width"
            },
            {
              "description": "Rahmenfarbe um einen einzelnen Tab",
              "name": "--tab-border-color"
            },
            {
              "description": "Rahmenfarbe für ausgewählten Tab",
              "name": "--tab-border-color--active"
            },
            {
              "description": "Schriftfarbe für einzelne Tabs",
              "name": "--tab-font-color"
            },
            {
              "description": "Schriffarbe für ausgewählten Tab",
              "name": "--tab-font-color--active"
            },
            {
              "description": "Schriftstärke für WM Variablefont",
              "name": "--tab-font-variation-settings"
            },
            {
              "description": "Standard-Schriftstärke",
              "name": "--tab-font-weight"
            },
            {
              "description": "Innenabstand in einem einzelnen Tab",
              "name": "--tab-padding"
            },
            {
              "description": "Innenabstand im Tabpanel",
              "name": "--tabpanel-padding"
            },
            {
              "description": "Rahmenstärke um den Tabpanel",
              "name": "--tabpanel-border-width"
            },
            {
              "description": "Rahmenfarbe um den Tabpanel",
              "name": "--tabpanel-border-color"
            }
          ],
          "slots": [
            {
              "description": "Bezeichnung im Reiter",
              "name": "tab"
            },
            {
              "description": "Inhalte",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_tabcontainers",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_tabs",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_tabpanels",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "properties",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ selectedIndex: { type: Number, attribute: false }, _lastIndex: { type: Number, attribute: false }, _id: { type: String, attribute: false }, remember: { type: Boolean }, theme: { type: String }, }"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[styles]"
            },
            {
              "kind": "method",
              "name": "_setParams",
              "description": "Set default params",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_selectPanel",
              "description": "Select the new active panel",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_selectTab",
              "parameters": [
                {
                  "name": "element",
                  "description": "element or index",
                  "type": {
                    "text": "{Node, Number}"
                  }
                }
              ],
              "description": "Select the new active tab",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_switchTab",
              "parameters": [
                {
                  "name": "e",
                  "description": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Switch tab",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_getNextElement",
              "parameters": [
                {
                  "name": "index",
                  "description": "next index",
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "description": "Get the next element when using arrow keys",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleKeydown",
              "parameters": [
                {
                  "name": "e",
                  "description": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handle key events",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleClick",
              "parameters": [
                {
                  "name": "e",
                  "description": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handle click event on wm-tab",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "reRenderChildren",
              "description": "Initializes elements like maps when selecting tabs"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "_id",
              "type": {
                "text": "String"
              },
              "description": "einzigartige id jeder Komponente",
              "privacy": "private",
              "default": "\"\""
            },
            {
              "kind": "field",
              "name": "_lastIndex",
              "type": {
                "text": "Number"
              },
              "description": "Zuletzt aktiver Index",
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "selectedIndex",
              "type": {
                "text": "Number"
              },
              "description": "Index des ausgewählten Tabs",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "remember",
              "type": {
                "text": "Boolean"
              },
              "description": "Zuletzt geöffneten Tab speichern",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "theme",
              "type": {
                "text": "'clean'"
              },
              "description": "Tab-Design",
              "default": "'default'"
            }
          ],
          "events": [
            {
              "name": "wm-tab-changed",
              "type": {
                "text": "CustomEvent"
              },
              "description": "Tab wurde gewechselt",
              "summary": "Index des ausgewählten Tabs"
            }
          ],
          "superclass": {
            "name": "s",
            "module": "/dist/js/lit-element-8bc32369.js"
          },
          "summary": "Tabs/Tab, Tabs/TabPanel",
          "tagName": "wm-tabs",
          "customElement": true
        },
        {
          "kind": "variable",
          "name": "tagName",
          "type": {
            "text": "string"
          },
          "default": "\"wm-tabs\""
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "wm-tabs",
          "declaration": {
            "name": "Tabs",
            "module": "dist/js/components/Tabs/Tabs.js"
          }
        },
        {
          "kind": "js",
          "name": "Tabs",
          "declaration": {
            "name": "Tabs",
            "module": "dist/js/components/Tabs/Tabs.js"
          }
        },
        {
          "kind": "js",
          "name": "tagName",
          "declaration": {
            "name": "tagName",
            "module": "dist/js/components/Tabs/Tabs.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/Tag/Tag.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Link oder Button mit Link(s) zu verwandten Seiten",
          "name": "Tag",
          "cssProperties": [
            {
              "description": "Hintergrundfarbe",
              "name": "--tag-background-color"
            },
            {
              "description": "Hintergrundfarbe Hover & Focus",
              "name": "--tag-background-color--hover"
            },
            {
              "description": "Rahmenfarbe",
              "name": "--tag-border-color"
            },
            {
              "description": "Padding vertikal (Mobilansicht unter 64em)",
              "name": "--tag-padding-inline--mobil"
            },
            {
              "description": "Padding horizontal (Mobilansicht unter 64em)",
              "name": "--tag-padding-block--mobil"
            },
            {
              "description": "Padding vertikal (Desktopansicht ab 64em)",
              "name": "--tag-padding-inline--desktop"
            },
            {
              "description": "Padding horizontal (Desktopansicht ab 64em)",
              "name": "--tag-padding-block--desktop"
            },
            {
              "description": "Gap im Button oder Link",
              "name": "--tag-gap"
            },
            {
              "description": "Mindesthöhe (Mobilansicht unter 64em)",
              "name": "--tag-min-height--mobil"
            },
            {
              "description": "Mindesthöhe (Desktopansicht ab 64em)",
              "name": "--tag-min-height--desktop"
            },
            {
              "description": "Linkfarbe",
              "name": "--tag-link-color"
            },
            {
              "description": "Linkfarbe Hover & Focus",
              "name": "--tag-link-color--hover"
            },
            {
              "description": "Schriftgröße",
              "name": "--tag-font-size"
            }
          ],
          "slots": [
            {
              "description": "Link oder Liste mit Links",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "#cachedLink",
              "privacy": "private",
              "type": {
                "text": "null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "#cachedButton",
              "privacy": "private",
              "type": {
                "text": "null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "#cachedList",
              "privacy": "private",
              "type": {
                "text": "null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "_link",
              "description": "The slotted link",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_button",
              "description": "Button for dropdown tags",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_list",
              "description": "The slotted list of links",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "properties",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ color: { type: String, reflect: true }, open: { type: String, reflect: true }, dropdown: { type: Boolean, reflect: true }, }"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "[i` * { box-sizing: border-box; } :host { --_tag-dropdown-width: auto; /* Default width */ } wm-button { --_padding: var(--tag-padding-block--mobil) var(--tag-padding-inline--mobil); --_min-height: var(--tag-min-height--mobil); align-items: center; background-color: var(--tag-background-color) !important; border: 1px solid var(--tag-border-color); border-radius: 20px; cursor: pointer; display: inline-flex; font-size: var(--tag-font-size) !important; gap: var(--tag-gap); min-height: var(--_min-height); padding: var(--_padding) !important; text-decoration: none; } wm-button { white-space: nowrap; } /* Show list when button expanded */ :host wm-icon { transition: transform 0.3s ease; transform: rotate(0deg); } :host([open=\"true\"]) wm-icon { transform: rotate(180deg); } /* TODO: solution for tag dropdown in taglist overflow container */ /* :host([open=\"true\"]) { position: absolute !important; z-index: 1230; } */ :host([open=\"true\"]) wm-button { border-bottom: 0; border-bottom-left-radius: 0; border-bottom-right-radius: 0; } :host([open=\"true\"]) wm-icon { transform: rotate(180deg); } :host([dropdown]) > ::slotted(a) { display: none !important; } .dropdown-open { width: var(--_tag-dropdown-width); } a:is(:link, :visited) { color: var(--wm-theme-link-color); background-position: right 0 top 0.4em; } :is(a, wm-button):where(:hover, :focus) { background-color: var(--tag-background-color--hover); color: var(--tag-link-color--hover); } :is(a):focus-visible, :is(wm-button):focus-within { outline: var(--wm-theme-site-focus-outline-width) solid var(--wm-color-ui-interactive); outline-offset: 1px; } ::slotted(:is(ul, ol)) { background-color: var(--tag-background-color); border: solid var(--tag-border-color); border-bottom-right-radius: 20px; border-bottom-left-radius: 20px; border-width: 0 1px 1px; display: none; left: 0; list-style-type: \"\"; margin: 0 !important; max-height: 12rem; overflow: auto; overscroll-behavior: contain; padding: 0 !important; position: absolute; scrollbar-gutter: stable; top: 100%; width: var(--_tag-dropdown-width); } :host([open=\"true\"]) ::slotted(:is(ul, ol)) { display: block; z-index: 1230; } button { --_button-focus-outline: none !important; } `]",
              "type": {
                "text": "array"
              }
            },
            {
              "kind": "method",
              "name": "_attachDropDownEvents",
              "description": "Attach events for drop down tags",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_removeDropDownEvents",
              "description": "Remove events for drop down tags",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_closeOnEscape",
              "parameters": [
                {
                  "name": "e",
                  "description": "Event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Close on escape",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_clickOutSide",
              "description": "Listens for clicks outside of wm-tag\r\nClose on click outside",
              "privacy": "private",
              "parameters": [
                {
                  "description": "Event",
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "_closeOnFocusOut",
              "description": "Close on focus out",
              "privacy": "private",
              "parameters": [
                {
                  "description": "Event",
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_dropdownTagGetLargestItem",
              "description": "The list is potentially larger than the selected tag. To style it properly we need to get the largest item in the list.\r\nGet largest item in list",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "toggle",
              "parameters": [
                {
                  "name": "e",
                  "description": "Event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Liste öffnen oder schließen"
            },
            {
              "kind": "method",
              "name": "_dispatchTagEvent",
              "parameters": [
                {
                  "name": "eventName",
                  "description": "Name of the event",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Dispatch custom event",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "openDropdown",
              "description": "Dropdown-Tag öffnen"
            },
            {
              "kind": "method",
              "name": "closeDropdown",
              "description": "Dropdown-Tag schließen"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "color",
              "description": "Tag mit spezieller Funktion",
              "type": {
                "text": "'frischgruen'|'amtswege'"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "string"
              },
              "description": "Dropdown offen?",
              "default": "\"false\""
            },
            {
              "kind": "field",
              "name": "dropdown",
              "type": {
                "text": "Boolean"
              },
              "description": "Ist es ein Dropdown Tag?",
              "default": "false"
            }
          ],
          "events": [
            {
              "name": "eventName",
              "type": {
                "text": "CustomEvent"
              }
            }
          ],
          "superclass": {
            "name": "s",
            "module": "/dist/js/lit-element-8bc32369.js"
          },
          "summary": "Button/Button, Icon/Icon",
          "tagName": "wm-tag",
          "customElement": true
        },
        {
          "kind": "variable",
          "name": "tagName",
          "type": {
            "text": "string"
          },
          "default": "\"wm-tag\""
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "wm-tag",
          "declaration": {
            "name": "Tag",
            "module": "dist/js/components/Tag/Tag.js"
          }
        },
        {
          "kind": "js",
          "name": "Tag",
          "declaration": {
            "name": "Tag",
            "module": "dist/js/components/Tag/Tag.js"
          }
        },
        {
          "kind": "js",
          "name": "tagName",
          "declaration": {
            "name": "tagName",
            "module": "dist/js/components/Tag/Tag.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/TagList/TagList.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Horizontale Liste vom Tags",
          "name": "TagList",
          "cssProperties": [
            {
              "description": "Innenabstand der Liste",
              "name": "--taglist-padding"
            },
            {
              "description": "Abstand zwischen Tags",
              "name": "--taglist-gap"
            }
          ],
          "slots": [
            {
              "description": "Liste",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "properties",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ scrollable: { type: Boolean }, label: { type: String }, }"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "scrollable",
              "type": {
                "text": "Boolean"
              },
              "description": "Sollen Tags gescrolled werden oder umbrechen?",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "String"
              },
              "description": "Bezeichnung der Navigations",
              "default": "\"Verwandte Seiten\""
            }
          ],
          "superclass": {
            "name": "s",
            "module": "/dist/js/lit-element-8bc32369.js"
          },
          "tagName": "wm-tag-list",
          "customElement": true
        },
        {
          "kind": "variable",
          "name": "tagName",
          "type": {
            "text": "string"
          },
          "default": "\"wm-tag-list\""
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "wm-tag-list",
          "declaration": {
            "name": "TagList",
            "module": "dist/js/components/TagList/TagList.js"
          }
        },
        {
          "kind": "js",
          "name": "TagList",
          "declaration": {
            "name": "TagList",
            "module": "dist/js/components/TagList/TagList.js"
          }
        },
        {
          "kind": "js",
          "name": "tagName",
          "declaration": {
            "name": "tagName",
            "module": "dist/js/components/TagList/TagList.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/Textarea/Textarea.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Textarea",
          "members": [
            {
              "kind": "field",
              "name": "properties",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ disabled: { type: Boolean, reflect: true }, rows: { type: Number, reflect: true }, pattern: { type: String }, // Add pattern property hasError: { type: Boolean, reflect: true }, // Add hasError property showErrors: { type: Boolean, reflect: true }, // Add showErrors property validate: { type: Boolean, reflect: true }, // Add validate property value: { type: String }, // Add value property defaultValue: { type: String }, // ensure a default value is defined errormessage: { type: String, attribute: \"errormessage\" }, summaryErrormessage: { type: String, attribute: \"summary-errormessage\" }, error: { type: String }, _initialValue: { state: true }, // Add property to track initial value _hasInteracted: { state: true } // Add property to track user interaction }",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[globalStyles, formItemStyles, styles]",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ],
              "description": "Captures initial value from DOM after first render",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "method",
              "name": "reset",
              "description": "Resets the component to its initial state",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "description": "Form reset callback - called by parent forms\nProvides standard reset behavior",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "description": "Validates the current value against constraints",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "method",
              "name": "showError",
              "parameters": [
                {
                  "name": "message",
                  "description": "The error message to display",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Shows an error message for this textarea component",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "clearError",
              "description": "Clears any error state from this textarea component",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "parameters": [
                {
                  "name": "message",
                  "description": "The validation message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Forward setCustomValidity to underlying native textarea",
              "privacy": "public",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "method",
              "name": "setDisabled",
              "parameters": [
                {
                  "name": "isDisabled",
                  "description": "Whether the textarea should be disabled",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Sets the disabled state of the textarea",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "_performValidation",
              "description": "Override _performValidation from FormStateManager",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "method",
              "name": "_getFormControlElement",
              "description": "Override _getFormControlElement from FormStateManager",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "method",
              "name": "_handleInput",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Close submenus automatically when leaving sub menu list using the keyboard",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "method",
              "name": "_handleChange",
              "parameters": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleBlur",
              "parameters": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ],
              "description": "Override of updated lifecycle to handle attribute/property changes",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "Boolean"
              },
              "description": "Whether the component is disabled",
              "default": "false",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "field",
              "name": "rows",
              "type": {
                "text": "number"
              },
              "default": "7"
            },
            {
              "kind": "field",
              "name": "pattern",
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "hasError",
              "type": {
                "text": "Boolean"
              },
              "description": "Whether the component has a validation error",
              "default": "false",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "field",
              "name": "defaultValue",
              "type": {
                "text": "String"
              },
              "description": "Default value of the component",
              "default": "''",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "field",
              "name": "showErrors",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether to show validation errors immediately",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "field",
              "name": "validate",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether to validate on input",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "field",
              "name": "errormessage",
              "type": {
                "text": "String"
              },
              "description": "Fehlermeldung bei ungültiger Eingabe\nDiese Meldung wird direkt am Textarea-Element angezeigt, wenn es validiert wird und ungültig ist.",
              "default": "\"\""
            },
            {
              "kind": "field",
              "name": "summaryErrormessage",
              "type": {
                "text": "String"
              },
              "description": "Spezifische Fehlermeldung für die Fehlerübersicht\nDiese Meldung wird in der Fehlerübersicht (wm-formerrorsummary) anstelle der normalen\nFehlermeldung angezeigt. Dies ist nützlich, um in der Übersicht kontextspezifischere\nFehlermeldungen anzuzeigen, z.B. \"Bitte geben Sie eine Beschreibung bei 'Projektinformationen' ein\"\nstatt nur \"Dieses Feld ist erforderlich\".",
              "default": "\"\""
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "String"
              },
              "description": "Current error message",
              "default": "\"\"",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "field",
              "name": "_initialValue",
              "type": {
                "text": "String"
              },
              "description": "Initial value for reset functionality",
              "default": "''",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "field",
              "name": "_hasInteracted",
              "type": {
                "text": "Boolean"
              },
              "description": "Track if user has interacted with the component",
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_errorController",
              "default": "new ErrorStateController(this)"
            },
            {
              "kind": "field",
              "name": "STATES",
              "static": true,
              "readonly": true,
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "method",
              "name": "_resetToInitialValue",
              "description": "Fallback reset implementation",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "method",
              "name": "_getInputElement",
              "description": "Helper method to find input element in shadow DOM",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "method",
              "name": "_changeState",
              "parameters": [
                {
                  "name": "newState",
                  "description": "The target state",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "options",
                  "default": "{}",
                  "description": "Additional options for the transition",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "description": "Transitions the component to a new state",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "method",
              "name": "_handleStateTransition",
              "parameters": [
                {
                  "name": "oldState",
                  "description": "Previous state",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "newState",
                  "description": "New state",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "options",
                  "default": "{}",
                  "description": "Additional options",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "description": "Handle component-specific behavior for state transitions",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "method",
              "name": "_updateErrorState",
              "parameters": [
                {
                  "name": "errorMessage",
                  "description": "Error message to display",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "description": "Centralized method to update component error state",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "method",
              "name": "_announceStateChange",
              "parameters": [
                {
                  "name": "state",
                  "description": "State to announce",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "description": "Announces state changes to screen readers",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "parameters": [
                {
                  "name": "disabled",
                  "description": "Whether the control should be disabled",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Called when the element's form sets the disabled state",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "field",
              "name": "_componentState",
              "privacy": "private",
              "description": "Current component state",
              "type": {
                "text": "String"
              },
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "field",
              "name": "_previousState",
              "type": {
                "text": "String"
              },
              "privacy": "private",
              "description": "Previous component state for transitions",
              "default": "null",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "field",
              "name": "_output",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "method",
              "name": "_setAriaSelected",
              "parameters": [
                {
                  "name": "current",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "method",
              "name": "_filterOptions",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Filter existing options in a filterable combobox",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "method",
              "name": "_addEvents",
              "description": "Add click and key events for option list",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "method",
              "name": "_markOption",
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "description": "Highlight the current option in the list of options",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "method",
              "name": "_clickOutSide",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "method",
              "name": "hideOptions",
              "parameters": [
                {
                  "name": "setFocus",
                  "default": "true",
                  "description": "Fokus auf Input legen (true)",
                  "type": {
                    "text": "Boolean"
                  }
                }
              ],
              "description": "Liste in Combobox verbergen",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "method",
              "name": "showOptions",
              "description": "Liste in Combobox anzeigen",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "method",
              "name": "_announceOptions",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "method",
              "name": "_toggleOptions",
              "description": "Toggle options",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "method",
              "name": "_selectOption",
              "parameters": [
                {
                  "name": "cur"
                },
                {
                  "name": "elements",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Turn Nodelist into Array",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "method",
              "name": "_cancelSearch",
              "description": "Cancel search/reset filtering state when Escape is pressed.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "method",
              "name": "_renderElement",
              "parameters": [
                {
                  "name": "content"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "method",
              "name": "_defineErrorMessages",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "method",
              "name": "_handleValidation",
              "description": "Centralizes validation handling for consistent behavior",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "method",
              "name": "clearErrorState",
              "description": "Clear error state and validation message",
              "privacy": "public",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "method",
              "name": "_synchronizeErrorState",
              "parameters": [
                {
                  "name": "message",
                  "default": "''",
                  "description": "Error message or empty string to clear error",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "description": "Synchronizes the error state between component, underlying input,\nand form association API",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "field",
              "name": "announcementText",
              "type": {
                "text": "String"
              },
              "description": "Text, der angekündigt wird, wenn Optionen angezeigt werden",
              "default": "\"Suchvorschläge werden angezeigt. Verwenden Sie Pfeiltasten um zu navigieren\"",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "field",
              "name": "maxlength",
              "description": "Maximale Zeichenanzahl, die eingegeben werden darf",
              "type": {
                "text": "Number"
              },
              "default": "undefined",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "field",
              "name": "placeholder",
              "description": "placeholder-Attribut in HTML",
              "type": {
                "text": "String"
              },
              "default": "undefined",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "field",
              "name": "search",
              "description": "Art des Suchfeldes",
              "type": {
                "text": "'hidden'|'visible'|'hiddenmobile'"
              },
              "default": "undefined",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "field",
              "name": "size",
              "description": "size-Attribute in HTML",
              "type": {
                "text": "String"
              },
              "default": "undefined",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "field",
              "name": "filter",
              "type": {
                "text": "Boolean"
              },
              "description": "Liste in Combobox beim Tippen filtern",
              "default": "false",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "field",
              "name": "hideMaxlength",
              "type": {
                "text": "Boolean"
              },
              "description": "Verfügbare Zeichenanzahl verbergen",
              "default": "false",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "field",
              "name": "_highlightedOptionID",
              "description": "id of the currently Highlight Option",
              "type": {
                "text": "String"
              },
              "privacy": "private",
              "default": "undefined",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "field",
              "name": "maxlengthText",
              "type": {
                "text": "String"
              },
              "description": "Text for maxlength message",
              "default": "\"Es sind noch {remaining} Zeichen verfügbar\"",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "field",
              "name": "patternMismatchMessage",
              "type": {
                "text": "String"
              },
              "description": "Pattern validation message",
              "default": "\"Bitte geben Sie einen gültigen Wert ein\"",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "field",
              "name": "info",
              "default": "undefined",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            },
            {
              "kind": "field",
              "name": "_infoOpen",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "FormText",
                "module": "dist/js/components/misc/form-text.js"
              }
            }
          ],
          "mixins": [
            {
              "name": "FormStateManager",
              "module": "/dist/js/components/misc/form-state-manager.js"
            },
            {
              "name": "FormText",
              "module": "/dist/js/components/misc/form-text.js"
            }
          ],
          "superclass": {
            "name": "s",
            "module": "/dist/js/lit-element-8bc32369.js"
          },
          "tagName": "wm-textarea",
          "customElement": true,
          "events": [
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "wm-textarea",
          "declaration": {
            "name": "Textarea",
            "module": "dist/js/components/Textarea/Textarea.js"
          }
        },
        {
          "kind": "js",
          "name": "Textarea",
          "declaration": {
            "name": "Textarea",
            "module": "dist/js/components/Textarea/Textarea.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/Tourismuszeile/Tourismuszeile.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Komponente zur Darstellung eines fixierten Banners am Seitenanfang",
          "name": "Tourismuszeile",
          "cssProperties": [
            {
              "description": "Höhe des Banners",
              "name": "--tourismuszeile-bannerheight"
            },
            {
              "description": "Hintergrundfarbe",
              "name": "--tourismuszeile-background-color"
            },
            {
              "description": "Schriftfarbe",
              "name": "--tourismuszeile-font-color"
            }
          ],
          "slots": [
            {
              "description": "Catchphrase - maximal 20 Zeichen",
              "name": "heading"
            },
            {
              "description": "Kurzbeschreibung - maximal 40 Zeichen",
              "name": "content"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "properties",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ hidden: { type: Boolean, reflect: true }, url: { type: String } }"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[styles]"
            },
            {
              "kind": "method",
              "name": "_setClass",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_close",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "hidden",
              "description": "Sichtbarkeit des Banners",
              "type": {
                "text": "Boolean"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "url",
              "description": "Bannerverlinkung",
              "type": {
                "text": "String"
              },
              "default": "undefined"
            }
          ],
          "superclass": {
            "name": "s",
            "module": "/dist/js/lit-element-8bc32369.js"
          },
          "tagName": "wm-tourismuszeile",
          "customElement": true
        },
        {
          "kind": "variable",
          "name": "tagName",
          "type": {
            "text": "string"
          },
          "default": "\"wm-tourismuszeile\""
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "wm-tourismuszeile",
          "declaration": {
            "name": "Tourismuszeile",
            "module": "dist/js/components/Tourismuszeile/Tourismuszeile.js"
          }
        },
        {
          "kind": "js",
          "name": "Tourismuszeile",
          "declaration": {
            "name": "Tourismuszeile",
            "module": "dist/js/components/Tourismuszeile/Tourismuszeile.js"
          }
        },
        {
          "kind": "js",
          "name": "tagName",
          "declaration": {
            "name": "tagName",
            "module": "dist/js/components/Tourismuszeile/Tourismuszeile.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/Upload/Upload.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Upload",
          "cssProperties": [
            {
              "description": "Hintergrundfarbe",
              "name": "--upload-background-color"
            },
            {
              "description": "Farbe des Rahmens",
              "name": "--upload-border-color"
            },
            {
              "description": "Farbe des Rahmens (Dunkel)",
              "name": "--upload-border-color--dark"
            },
            {
              "description": "Farbe des Rahmens bei Hover und Focus",
              "name": "--upload-border-color--active"
            },
            {
              "description": "Innenabstand",
              "name": "--upload-padding"
            }
          ],
          "slots": [
            {
              "description": "Text oder HTML-Content über dem Button",
              "name": "default"
            },
            {
              "description": "Text oder HTML-Content unter dem Button",
              "name": "postcontent"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_input",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_droparea",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_output",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_removeButtons",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "properties",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ _files: { type: Array, reactive: true }, _formData: { type: Object }, hasError: { type: Boolean, reflect: true }, label: { type: String }, labelDelete: { type: String }, labelSelection: { type: String }, labelDeleted: { type: String }, multiple: { type: Boolean }, hideSelectedFiles: { type: Boolean }, disabled: { type: Boolean, reflect: true }, errormessage: { type: String, attribute: 'errormessage' }, summaryErrormessage: { type: String, attribute: 'summary-errormessage' }, validator: { type: Function }, validate: { type: Boolean, reflect: true }, showErrors: { type: Boolean, reflect: true }, _hasInteracted: { state: true } }",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[globalStyles, styles]"
            },
            {
              "kind": "field",
              "name": "_dragOver",
              "description": "DragOver event on the whole component\nAdds a border to the component",
              "privacy": "private",
              "parameters": [
                {
                  "description": "Event",
                  "name": "e",
                  "type": {
                    "text": "*"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "_dragLeave",
              "description": "DragLeave event on the whole component\nRemoves a border to the component",
              "privacy": "private",
              "parameters": [
                {
                  "description": "Event",
                  "name": "e",
                  "type": {
                    "text": "*"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "_preventDefault",
              "description": "Wrapper for prevent default",
              "privacy": "private",
              "parameters": [
                {
                  "description": "Event",
                  "name": "e",
                  "type": {
                    "text": "*"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "_drop",
              "description": "Drop event on the whole component",
              "privacy": "private",
              "parameters": [
                {
                  "description": "Event",
                  "name": "e",
                  "type": {
                    "text": "*"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "_click",
              "description": "Click event on the droparea",
              "privacy": "private",
              "parameters": [
                {
                  "description": "Event",
                  "name": "e",
                  "type": {
                    "text": "*"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_setupFileUpload",
              "description": "Manages all the different events for uploading files",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleInputClick",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_updateFileList",
              "description": "Updates the input field and the file list after upload",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_addFiles",
              "parameters": [
                {
                  "name": "e",
                  "description": "Change Event",
                  "type": {
                    "text": "*"
                  }
                },
                {
                  "name": "files",
                  "description": "Selected files",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Add files",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "removeFile",
              "parameters": [
                {
                  "name": "index",
                  "description": "Index der ausgewählten Datei",
                  "type": {
                    "text": "Number"
                  }
                },
                {
                  "name": "e",
                  "description": "Click-Event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Bestimmte Datei entfernen"
            },
            {
              "kind": "method",
              "name": "_manageFocusAfterDeletion",
              "parameters": [
                {
                  "name": "index"
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_returnFileSize",
              "parameters": [
                {
                  "name": "number",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Returns the file size in a readable format",
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "_isImage",
              "parameters": [
                {
                  "name": "file",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Check whether the file is an image",
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "_updateLiveRegion",
              "parameters": [
                {
                  "name": "message"
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_changed",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "description": "Checks validity for file upload and applies custom error handling.",
              "return": {
                "type": {
                  "text": "String"
                }
              },
              "privacy": "public",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "method",
              "name": "showError",
              "parameters": [
                {
                  "name": "message",
                  "description": "The error message to display",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Shows an error message for this upload component"
            },
            {
              "kind": "method",
              "name": "clearError",
              "description": "Clears any error state from this upload component"
            },
            {
              "kind": "method",
              "name": "_performValidation",
              "description": "Override _performValidation from FormStateManager",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "String"
                }
              },
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "method",
              "name": "setDisabled",
              "parameters": [
                {
                  "name": "isDisabled",
                  "description": "Whether the component should be disabled",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Set the disabled state of the component and properly handle UI updates",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "_validateWithoutController",
              "description": "Validation method that doesn't use the controller to avoid circular references",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "_unsetFileValues",
              "description": "Remove all files"
            },
            {
              "kind": "method",
              "name": "_setFileValues",
              "description": "Fill formdata submitted to the server"
            },
            {
              "kind": "method",
              "name": "_handleChange",
              "parameters": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleEvent",
              "parameters": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleUpload",
              "parameters": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "description": "Form reset callback - called by parent forms\nProvides standard reset behavior",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "method",
              "name": "reset",
              "description": "Reset the component to its initial state",
              "privacy": "public",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "String"
              },
              "description": "Bezeichnung des Eingabefeldes",
              "default": "\"Datei hochladen\"",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "labelDelete",
              "type": {
                "text": "String"
              },
              "description": "Bezeichnung des Löschen-Buttons (Lösche [Dateiname])",
              "default": "\"Lösche\""
            },
            {
              "kind": "field",
              "name": "labelDeleted",
              "type": {
                "text": "String"
              },
              "description": "Bezeichnung für das Liveregion-Update nachdem eine Datei gelöscht wurde. ([Dateiname] gelöscht)",
              "default": "\"gelöscht\""
            },
            {
              "kind": "field",
              "name": "labelSelection",
              "type": {
                "text": "String"
              },
              "description": "Bezeichnung für Titel der ausgewählten Dateien",
              "default": "\"Datei(en) ausgewählt\""
            },
            {
              "kind": "field",
              "name": "_files",
              "description": "Holds all uploaded files",
              "privacy": "private",
              "default": "new DataTransfer()"
            },
            {
              "kind": "field",
              "name": "_fileList",
              "type": {
                "text": "array"
              },
              "description": "An array of the selected files for the output",
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "multiple",
              "type": {
                "text": "boolean"
              },
              "description": "Auswahl von mehreren Dateien erlauben",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "hideSelectedFiles",
              "type": {
                "text": "boolean"
              },
              "description": "Auflistung der ausgewählten Dateien verbergen",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_formData",
              "description": "Needed to submit files",
              "default": "new FormData()"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "Boolean"
              },
              "description": "Indicates whether the upload is disabled",
              "default": "false",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "field",
              "name": "errormessage",
              "type": {
                "text": "String"
              },
              "description": "Fehlermeldung bei ungültiger Eingabe\nDiese Meldung wird direkt am Upload-Element angezeigt, wenn es validiert wird und ungültig ist,\nz.B. wenn ein Pflichtfeld keine Datei enthält.",
              "default": "\"\""
            },
            {
              "kind": "field",
              "name": "summaryErrormessage",
              "type": {
                "text": "String"
              },
              "description": "Spezifische Fehlermeldung für die Fehlerübersicht\nDiese Meldung wird in der Fehlerübersicht (wm-formerrorsummary) anstelle der normalen\nFehlermeldung angezeigt. Dies ist nützlich, um in der Übersicht kontextspezifischere\nFehlermeldungen anzuzeigen, z.B. \"Bitte laden Sie einen Nachweis bei 'Einkommensnachweis' hoch\"\nstatt nur \"Bitte wählen Sie eine Datei aus\".",
              "default": "\"\""
            },
            {
              "kind": "field",
              "name": "hasError",
              "type": {
                "text": "Boolean"
              },
              "description": "Default error state",
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "_hasInteracted",
              "type": {
                "text": "Boolean"
              },
              "description": "Whether the component has been interacted with",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "validate",
              "type": {
                "text": "Boolean"
              },
              "description": "Aktiviert die Validierung bei Eingabe",
              "default": "false",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "showErrors",
              "type": {
                "text": "Boolean"
              },
              "description": "Steuert die Anzeige von Fehlermeldungen",
              "default": "false",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "field",
              "name": "_errorController",
              "description": "Add error state controller for centralized error handling",
              "type": {
                "text": "ErrorStateController"
              },
              "privacy": "private",
              "default": "new ErrorStateController(this)",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "STATES",
              "static": true,
              "readonly": true,
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "privacy": "private",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ],
              "description": "Captures initial value from DOM after first render",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "method",
              "name": "_resetToInitialValue",
              "description": "Fallback reset implementation",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "method",
              "name": "_getInputElement",
              "description": "Helper method to find input element in shadow DOM",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "method",
              "name": "_changeState",
              "parameters": [
                {
                  "name": "newState",
                  "description": "The target state",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "options",
                  "default": "{}",
                  "description": "Additional options for the transition",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "description": "Transitions the component to a new state",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "method",
              "name": "_handleStateTransition",
              "parameters": [
                {
                  "name": "oldState",
                  "description": "Previous state",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "newState",
                  "description": "New state",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "options",
                  "default": "{}",
                  "description": "Additional options",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "description": "Handle component-specific behavior for state transitions",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "method",
              "name": "_updateErrorState",
              "parameters": [
                {
                  "name": "errorMessage",
                  "description": "Error message to display",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "description": "Centralized method to update component error state",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "method",
              "name": "_getFormControlElement",
              "description": "Returns the form control element from shadow DOM\nComponents should override this to return their specific control element",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "method",
              "name": "_announceStateChange",
              "parameters": [
                {
                  "name": "state",
                  "description": "State to announce",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "description": "Announces state changes to screen readers",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ],
              "privacy": "private",
              "description": "Override of updated lifecycle to handle attribute/property changes",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "parameters": [
                {
                  "name": "message",
                  "description": "Validation message",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "description": "Public method to set a custom validation message",
              "privacy": "public",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "parameters": [
                {
                  "name": "disabled",
                  "description": "Whether the control should be disabled",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Called when the element's form sets the disabled state",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "field",
              "name": "_componentState",
              "privacy": "private",
              "description": "Current component state",
              "type": {
                "text": "String"
              },
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "field",
              "name": "_previousState",
              "type": {
                "text": "String"
              },
              "privacy": "private",
              "description": "Previous component state for transitions",
              "default": "null",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "field",
              "name": "error",
              "description": "Current error message",
              "type": {
                "text": "String"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "_initialValue",
              "type": {
                "text": "String"
              },
              "description": "Initial value of the component",
              "default": "''",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "field",
              "name": "defaultValue",
              "type": {
                "text": "String"
              },
              "description": "Default value of the component",
              "default": "''",
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "kind": "field",
              "name": "_item",
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "static": true,
              "default": "true",
              "description": "Allow fields to participate in form submission and validation",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...s.shadowRootOptions, delegatesFocus: true, }",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "method",
              "name": "_defineErrorMessages",
              "description": "Define some custom error messages based on error and input type",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "method",
              "name": "_setValidity",
              "description": "Allow custom element to participate in form validation",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "method",
              "name": "_renderLabel",
              "parameters": [
                {
                  "name": "label"
                },
                {
                  "name": "id"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "method",
              "name": "_showRequired",
              "description": "Show * or required text",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "method",
              "name": "_dispatchFormEvent",
              "parameters": [
                {
                  "name": "eventName"
                },
                {
                  "name": "detail",
                  "default": "{}"
                }
              ],
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "method",
              "name": "_dispatchCustomEvent",
              "parameters": [
                {
                  "name": "eventName"
                },
                {
                  "name": "detail",
                  "default": "{}"
                }
              ],
              "description": "Helper method to dispatch events consistently",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "method",
              "name": "_handleBlur",
              "parameters": [
                {
                  "name": "e",
                  "description": "Blur Event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Custom blur event",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "method",
              "name": "_handleFocus",
              "parameters": [
                {
                  "name": "e",
                  "description": "focus Event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Custom focus event",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "method",
              "name": "_handleInvalid",
              "parameters": [
                {
                  "name": "errormessage"
                }
              ],
              "description": "Custom invalid event",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "method",
              "name": "_renderWrapper",
              "parameters": [
                {
                  "name": "content"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "hideAsterisk",
              "type": {
                "text": "Boolean"
              },
              "description": "Text statt Sternchen darstellen",
              "default": "false",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "id",
              "description": "optionale ID",
              "type": {
                "text": "String"
              },
              "default": "undefined",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "description": "Name-Attribute in HTML",
              "type": {
                "text": "String"
              },
              "default": "undefined",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "String"
              },
              "description": "Wert des Elements",
              "default": "\"\"",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "Boolean"
              },
              "description": "Pflichtfeld",
              "default": "false",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "requiredText",
              "type": {
                "text": "String"
              },
              "description": " Text für Pflichtfeld-Hinweis",
              "default": "\"Pflichtfeld\"",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "_internals",
              "description": "Attach internals for form submission and validation",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "_slotController",
              "description": "Slotcontroller",
              "type": {
                "text": "class"
              },
              "privacy": "private",
              "default": "new SlotController(this)",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "_id",
              "description": "Random id",
              "type": {
                "text": "String"
              },
              "privacy": "private",
              "default": "`${randomHash()}`",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "_formId",
              "description": "Form id",
              "type": {
                "text": "String"
              },
              "privacy": "private",
              "default": "`wm-form-item-${this._id}`",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "hint",
              "description": "Hinweis",
              "type": {
                "text": "String"
              },
              "default": "undefined",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "_hasHint",
              "type": {
                "text": "Boolean"
              },
              "description": "Is there a hint?",
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            }
          ],
          "events": [
            {
              "name": "wm-files-updated",
              "type": {
                "text": "CustomEvent"
              },
              "description": "Dateiliste aktualisiert",
              "summary": "Array mit Dateien"
            },
            {
              "name": "change",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "wm-files-added",
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "name": "wm-files-removed",
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "FormStateManager",
                "module": "dist/js/components/misc/form-state-manager.js"
              }
            },
            {
              "name": "eventName",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "name": "blur",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "name": "focus",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "name": "invalid",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "name": "reset",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            }
          ],
          "mixins": [
            {
              "name": "FormStateManager",
              "module": "/dist/js/components/misc/form-state-manager.js"
            },
            {
              "name": "FormWrapper",
              "module": "/dist/js/components/misc/form-wrapper.js"
            }
          ],
          "superclass": {
            "name": "s",
            "module": "/dist/js/lit-element-8bc32369.js"
          },
          "summary": "Button/Button, List/List, Stack/Stack",
          "tagName": "wm-upload",
          "customElement": true
        },
        {
          "kind": "variable",
          "name": "tagName",
          "type": {
            "text": "string"
          },
          "default": "\"wm-upload\""
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "wm-upload",
          "declaration": {
            "name": "Upload",
            "module": "dist/js/components/Upload/Upload.js"
          }
        },
        {
          "kind": "js",
          "name": "Upload",
          "declaration": {
            "name": "Upload",
            "module": "dist/js/components/Upload/Upload.js"
          }
        },
        {
          "kind": "js",
          "name": "tagName",
          "declaration": {
            "name": "tagName",
            "module": "dist/js/components/Upload/Upload.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/WienBot/WienBot.js",
      "declarations": [
        {
          "kind": "class",
          "description": "WienBot\n<br>\nDocs: <a href=\"https://stp.wien.gv.at/wienbotwidget/static/widget/wienbot/widget.html\">ubitec docs</a>",
          "name": "WienBot",
          "members": [
            {
              "kind": "field",
              "name": "properties",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ widgetText: { type: String }, infoText: { type: String }, context: { type: String }, channel: { type: String }, }"
            },
            {
              "kind": "method",
              "name": "loadScript"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "widgetText",
              "type": {
                "text": "String"
              },
              "description": "Start-Frage WienBot",
              "default": "\"widgetwienbot\""
            },
            {
              "kind": "field",
              "name": "infoText",
              "type": {
                "text": "String"
              },
              "description": "Text in WienBot Sprachblase",
              "default": "\"Wie kann ich helfen?\""
            },
            {
              "kind": "field",
              "name": "context",
              "type": {
                "text": "String"
              },
              "description": "Kontext",
              "default": "\"\""
            },
            {
              "kind": "field",
              "name": "channel",
              "type": {
                "text": "'text'|'quicklink'|'voice'"
              },
              "description": "Art der Nachricht. In den meisten Fällen 'text'.",
              "default": "\"\""
            }
          ],
          "superclass": {
            "name": "s",
            "module": "/dist/js/lit-element-8bc32369.js"
          },
          "tagName": "wm-wienbot",
          "customElement": true
        },
        {
          "kind": "variable",
          "name": "tagName",
          "type": {
            "text": "string"
          },
          "default": "\"wm-wienbot\""
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "wm-wienbot",
          "declaration": {
            "name": "WienBot",
            "module": "dist/js/components/WienBot/WienBot.js"
          }
        },
        {
          "kind": "js",
          "name": "WienBot",
          "declaration": {
            "name": "WienBot",
            "module": "dist/js/components/WienBot/WienBot.js"
          }
        },
        {
          "kind": "js",
          "name": "tagName",
          "declaration": {
            "name": "tagName",
            "module": "dist/js/components/WienBot/WienBot.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/WienBot/WienBotButton.js",
      "declarations": [
        {
          "kind": "class",
          "description": "WienBotButton\n<br>\nDocs: <a href=\"https://stp.wien.gv.at/wienbotwidget/static/widget/wienbot/widget.html\">ubitec docs</a>",
          "name": "WienBotButton",
          "slots": [
            {
              "description": "Text für den Button. Standard: „WienBotButton”",
              "name": "default"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "properties",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ message: { type: String, reflect: true }, showMessage: { type: Boolean, reflect: true }, resetMessages: { type: Boolean, reflect: true }, type: { type: String, reflect: true }, }"
            },
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "[i` * { box-sizing: border-box; } :host button { background-color: #ff5a64; color: var(--wm-color-fastschwarz) !important; border: 1px solid #ff5a64; padding: 0.463em 0.88em; font-size: 1rem; text-align: left; text-transform: none; font-family: inherit; display: flex; justify-content: center; align-items: center; gap: var(--wm-spacing-xxs) !important; cursor: pointer; } :host button:focus-visible { outline: var(--wm-theme-site-focus-outline) !important; outline-offset: 2px !important; } @media (min-width: 768px) { :host button { font-size: 1.1rem; } } :host button:is(:hover, :focus-visible) { background-color: var(--wm-color-morgenrot-light); color: var(--wm-color-fastschwarz); } :host button:active { background-color: #e6515a; } `]",
              "type": {
                "text": "array"
              }
            },
            {
              "kind": "method",
              "name": "_showBot",
              "description": "Call WienBot",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "field",
              "name": "message",
              "type": {
                "text": "String"
              },
              "description": "Fragen an den WienBot",
              "default": "\"\""
            },
            {
              "kind": "field",
              "name": "resetMessages",
              "type": {
                "text": "Boolean"
              },
              "description": "Bestehende Nachrichten bei einem erneuten Aufruf zurücksetzen",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "showMessage",
              "type": {
                "text": "Boolean"
              },
              "description": "Frage als Nachricht im Chat angezeigen",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "'text'|'quicklink'|'voice'"
              },
              "description": "Art des Nachricht. In den meisten Fällen `text`.",
              "default": "\"text\""
            }
          ],
          "superclass": {
            "name": "s",
            "module": "/dist/js/lit-element-8bc32369.js"
          },
          "tagName": "wm-button-wienbot",
          "customElement": true
        },
        {
          "kind": "variable",
          "name": "tagName",
          "type": {
            "text": "string"
          },
          "default": "\"wm-button-wienbot\""
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "wm-button-wienbot",
          "declaration": {
            "name": "WienBotButton",
            "module": "dist/js/components/WienBot/WienBotButton.js"
          }
        },
        {
          "kind": "js",
          "name": "WienBotButton",
          "declaration": {
            "name": "WienBotButton",
            "module": "dist/js/components/WienBot/WienBotButton.js"
          }
        },
        {
          "kind": "js",
          "name": "tagName",
          "declaration": {
            "name": "tagName",
            "module": "dist/js/components/WienBot/WienBotButton.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/misc/comboboxHelper.js",
      "declarations": [
        {
          "kind": "function",
          "name": "filterOptions",
          "parameters": [
            {
              "name": "originalOptions"
            },
            {
              "name": "needle"
            }
          ]
        },
        {
          "kind": "function",
          "name": "markOption",
          "parameters": [
            {
              "name": "renderedOptions"
            },
            {
              "name": "index"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "filterOptions",
          "declaration": {
            "name": "filterOptions",
            "module": "dist/js/components/misc/comboboxHelper.js"
          }
        },
        {
          "kind": "js",
          "name": "markOption",
          "declaration": {
            "name": "markOption",
            "module": "dist/js/components/misc/comboboxHelper.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/misc/error-state-controller.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Reactive controller for managing error states in form components\n\nThis controller provides a centralized way to manage error states,\nincluding setting/clearing errors, managing aria attributes,\nand handling form validation states.",
          "name": "ErrorStateController",
          "members": [
            {
              "kind": "method",
              "name": "hostConnected",
              "description": "Called when the host element is connected to the document"
            },
            {
              "kind": "method",
              "name": "hostUpdated",
              "parameters": [
                {
                  "name": "changedProperties",
                  "description": "Map of changed properties or undefined",
                  "type": {
                    "text": "Map|undefined"
                  }
                }
              ],
              "description": "Called when the host is updated"
            },
            {
              "kind": "method",
              "name": "setError",
              "parameters": [
                {
                  "name": "message",
                  "description": "The error message to set, or empty string to clear",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "options",
                  "default": "{}",
                  "description": "Additional options",
                  "type": {
                    "text": "@param {boolean} options.announceToScreenReader - Whether to announce the error to screen readers\n   * @param {boolean} options.focusElement - Whether to focus the element with the error\n   "
                  }
                }
              ],
              "description": "Sets an error message and updates all related state"
            },
            {
              "kind": "method",
              "name": "clearError",
              "description": "Clears the current error state"
            },
            {
              "kind": "method",
              "name": "validate",
              "description": "Validates the host element and sets error state accordingly",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "_synchronizeDOM",
              "parameters": [
                {
                  "name": "suppressVisual",
                  "default": "false",
                  "description": "Whether to suppress visual error display",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Updates DOM attributes and properties related to error state",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_updateFormValidity",
              "description": "Updates the form validity state using the ElementInternals API",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_dispatchEvents",
              "description": "Dispatches appropriate events based on error state",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_getFormControlElement",
              "description": "Gets the form control element to focus and validate",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "HTMLElement|null"
                }
              }
            },
            {
              "kind": "method",
              "name": "_focusElement",
              "description": "Focuses the element with the error",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_announceError",
              "description": "Announces the error to screen readers",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "host",
              "default": "host"
            },
            {
              "kind": "field",
              "name": "errorMessage",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "hasError",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "previousErrorStates",
              "default": "new Map()"
            },
            {
              "kind": "field",
              "name": "_isValidating",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_pendingErrorMessage",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "_isInitialValidation",
              "type": {
                "text": "boolean"
              },
              "default": "true"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ErrorStateController",
          "declaration": {
            "name": "ErrorStateController",
            "module": "dist/js/components/misc/error-state-controller.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/misc/error-tracking.js",
      "declarations": [
        {
          "kind": "class",
          "description": "ErrorTrackingService - A service for tracking and deduplicating form validation errors\n\nThis service provides centralized error tracking to prevent duplicate error messages\nin form validation scenarios, particularly when multiple validation methods might\nreport the same error.\n\nThe service now supports tracking errors across multiple iterations or form steps,\nallowing for continuous validation while maintaining error history.",
          "name": "ErrorTrackingService",
          "members": [
            {
              "kind": "method",
              "name": "reset",
              "parameters": [
                {
                  "name": "preserveHistory",
                  "default": "false",
                  "description": "Whether to keep previous iteration errors",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Reset the error tracking state\nTypically called at the beginning of a new validation cycle"
            },
            {
              "kind": "method",
              "name": "continueIteration",
              "description": "Start a new iteration while maintaining previous error history\nThis is useful for multi-step forms where we want to track errors across steps",
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "method",
              "name": "getCurrentIteration",
              "description": "Gets the current iteration number",
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "method",
              "name": "isErrorProcessed",
              "parameters": [
                {
                  "name": "id",
                  "description": "The ID to check",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "currentIterationOnly",
                  "default": "false",
                  "description": "Whether to check only the current iteration",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Check if an error with the given ID has already been processed",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "trackError",
              "parameters": [
                {
                  "name": "id",
                  "description": "The error ID to track",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "errorInfo",
                  "default": "{}",
                  "description": "Additional error information",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "description": "Track an error ID to prevent duplicates"
            },
            {
              "kind": "method",
              "name": "suppressError",
              "parameters": [
                {
                  "name": "id",
                  "description": "The error ID to suppress",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Mark an error as suppressed - it won't appear in error summaries"
            },
            {
              "kind": "method",
              "name": "isErrorSuppressed",
              "parameters": [
                {
                  "name": "id",
                  "description": "The error ID to check",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Check if an error is explicitly suppressed",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "getErrors",
              "parameters": [
                {
                  "name": "includeAllIterations",
                  "default": "false",
                  "description": "Whether to include errors from all iterations",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Get all currently tracked errors",
              "return": {
                "type": {
                  "text": "Array"
                }
              }
            },
            {
              "kind": "method",
              "name": "getErrorsForIteration",
              "parameters": [
                {
                  "name": "iteration",
                  "description": "The iteration number to get errors from",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Get errors from a specific iteration",
              "return": {
                "type": {
                  "text": "Array"
                }
              }
            },
            {
              "kind": "method",
              "name": "hasErrors",
              "parameters": [
                {
                  "name": "includeAllIterations",
                  "default": "false",
                  "description": "Whether to include errors from all iterations",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Check if there are any tracked errors",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "hasErrorsInIteration",
              "parameters": [
                {
                  "name": "iteration",
                  "description": "The iteration to check",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Check if a particular iteration has errors",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "getErrorCount",
              "parameters": [
                {
                  "name": "includeAllIterations",
                  "default": "false",
                  "description": "Whether to include errors from all iterations",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Get the total count of unique errors across all iterations",
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "field",
              "name": "_processedErrorIds",
              "default": "new Set()"
            },
            {
              "kind": "field",
              "name": "_errorsByFieldId",
              "default": "new Map()"
            },
            {
              "kind": "field",
              "name": "_suppressedErrorIds",
              "default": "new Set()"
            },
            {
              "kind": "field",
              "name": "_isReset",
              "type": {
                "text": "boolean"
              },
              "default": "true"
            },
            {
              "kind": "field",
              "name": "_currentIteration",
              "type": {
                "text": "number"
              },
              "default": "0"
            },
            {
              "kind": "field",
              "name": "_errorsByIteration",
              "default": "new Map()"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "errorTracker",
          "default": "new ErrorTrackingService()"
        },
        {
          "kind": "mixin",
          "description": "Mixin for components that need error tracking capabilities",
          "name": "ErrorTrackingMixin",
          "members": [
            {
              "kind": "method",
              "name": "processErrors",
              "parameters": [
                {
                  "name": "errors",
                  "description": "Array of error objects to process",
                  "type": {
                    "text": "Array"
                  }
                },
                {
                  "name": "deduplicateAcrossIterations",
                  "default": "true",
                  "description": "Whether to deduplicate across iterations",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Process errors while deduplicating them",
              "return": {
                "type": {
                  "text": "Array"
                }
              }
            },
            {
              "kind": "method",
              "name": "resetErrorTracking",
              "parameters": [
                {
                  "name": "preserveHistory",
                  "default": "false",
                  "description": "Whether to keep previous iteration errors",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Reset error tracking state"
            },
            {
              "kind": "method",
              "name": "continueErrorIteration",
              "description": "Continue to a new validation iteration while preserving error history"
            },
            {
              "kind": "field",
              "name": "_errorTracker",
              "default": "new ErrorTrackingService()"
            }
          ],
          "parameters": [
            {
              "name": "BaseClass",
              "description": "The base class to extend",
              "type": {
                "text": "Class"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ErrorTrackingMixin",
          "declaration": {
            "name": "ErrorTrackingMixin",
            "module": "dist/js/components/misc/error-tracking.js"
          }
        },
        {
          "kind": "js",
          "name": "ErrorTrackingService",
          "declaration": {
            "name": "ErrorTrackingService",
            "module": "dist/js/components/misc/error-tracking.js"
          }
        },
        {
          "kind": "js",
          "name": "errorTracker",
          "declaration": {
            "name": "errorTracker",
            "module": "dist/js/components/misc/error-tracking.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/misc/errorHandler.js",
      "declarations": [
        {
          "kind": "function",
          "name": "setError",
          "parameters": [
            {
              "name": "element",
              "description": "The component to apply the error to",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "name": "errorMessage",
              "description": "The error message",
              "type": {
                "text": "String"
              }
            },
            {
              "name": "options",
              "default": "{}",
              "description": "Additional options (announceToScreenReader, focusElement)",
              "type": {
                "text": "Object"
              }
            }
          ],
          "description": "Sets error state on a component using ErrorStateController if available",
          "deprecated": "Use ErrorStateController.setError() directly in components"
        },
        {
          "kind": "function",
          "name": "applyErrorState",
          "parameters": [
            {
              "name": "element",
              "description": "The component to apply the error to",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "name": "errorMessage",
              "description": "The error message",
              "type": {
                "text": "String"
              }
            }
          ],
          "description": "Sets error state on a component using ErrorStateController if available",
          "deprecated": "Use setError() or ErrorStateController.setError() instead"
        },
        {
          "kind": "function",
          "name": "clearError",
          "parameters": [
            {
              "name": "component",
              "description": "The component to clear errors from",
              "type": {
                "text": "HTMLElement"
              }
            }
          ],
          "description": "Clears error state from a component",
          "deprecated": "Use ErrorStateController.clearError() directly in components"
        },
        {
          "kind": "mixin",
          "description": "Legacy mixin for error handling",
          "name": "errorMixin",
          "members": [
            {
              "kind": "method",
              "name": "showError",
              "parameters": [
                {
                  "name": "errorMessage",
                  "description": "The error message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Set an error message on the component",
              "deprecated": "Use ErrorStateController.setError() instead"
            },
            {
              "kind": "method",
              "name": "clearError",
              "description": "Clear any error message from the component",
              "deprecated": "Use ErrorStateController.clearError() instead"
            },
            {
              "kind": "method",
              "name": "validate",
              "description": "Validate the component",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "deprecated": "Use ErrorStateController.validate() instead"
            }
          ],
          "parameters": [
            {
              "name": "superClass"
            }
          ],
          "deprecated": "Use ErrorStateController instead"
        },
        {
          "kind": "function",
          "name": "updateErrorSummary",
          "parameters": [
            {
              "name": "errors",
              "description": "Array of error objects {nodeName, id, msg, summaryMsg}",
              "type": {
                "text": "Array"
              }
            },
            {
              "name": "errorSummary",
              "description": "Error summary element",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "name": "itemTemplate",
              "description": "Template for error items",
              "type": {
                "text": "HTMLTemplateElement"
              }
            }
          ],
          "description": "Updates the error summary with current validation errors"
        },
        {
          "kind": "function",
          "name": "setErrorState",
          "parameters": [
            {
              "name": "component",
              "description": "The component to set error state on",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "name": "message",
              "description": "The error message",
              "type": {
                "text": "String"
              }
            },
            {
              "name": "options",
              "default": "{}",
              "description": "Additional options",
              "type": {
                "text": "Object"
              }
            }
          ],
          "description": "Legacy function for setting error state on a component",
          "deprecated": "Use setError() or ErrorStateController.setError() instead"
        },
        {
          "kind": "function",
          "name": "clearErrorState",
          "parameters": [
            {
              "name": "component",
              "description": "The component to clear errors from",
              "type": {
                "text": "HTMLElement"
              }
            }
          ],
          "description": "Clears error state from a component",
          "deprecated": "Use clearError() or ErrorStateController.clearError() instead"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "applyError",
          "declaration": {
            "name": "setError",
            "module": "dist/js/components/misc/errorHandler.js"
          }
        },
        {
          "kind": "js",
          "name": "applyErrorState",
          "declaration": {
            "name": "applyErrorState",
            "module": "dist/js/components/misc/errorHandler.js"
          }
        },
        {
          "kind": "js",
          "name": "clearError",
          "declaration": {
            "name": "clearError",
            "module": "dist/js/components/misc/errorHandler.js"
          }
        },
        {
          "kind": "js",
          "name": "clearErrorMessage",
          "declaration": {
            "name": "clearError",
            "module": "dist/js/components/misc/errorHandler.js"
          }
        },
        {
          "kind": "js",
          "name": "clearErrorState",
          "declaration": {
            "name": "clearErrorState",
            "module": "dist/js/components/misc/errorHandler.js"
          }
        },
        {
          "kind": "js",
          "name": "errorMixin",
          "declaration": {
            "name": "errorMixin",
            "module": "dist/js/components/misc/errorHandler.js"
          }
        },
        {
          "kind": "js",
          "name": "setError",
          "declaration": {
            "name": "setError",
            "module": "dist/js/components/misc/errorHandler.js"
          }
        },
        {
          "kind": "js",
          "name": "setErrorState",
          "declaration": {
            "name": "setErrorState",
            "module": "dist/js/components/misc/errorHandler.js"
          }
        },
        {
          "kind": "js",
          "name": "updateErrorSummary",
          "declaration": {
            "name": "updateErrorSummary",
            "module": "dist/js/components/misc/errorHandler.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/misc/fieldsetMixin.js",
      "declarations": [
        {
          "kind": "mixin",
          "description": "Mixin that provides shared accessibility features for fieldset-based components",
          "name": "fieldsetMixin",
          "members": [
            {
              "kind": "field",
              "name": "properties",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ legend: { type: String }, required: { type: Boolean, reflect: true }, ...superClass.properties }"
            },
            {
              "kind": "method",
              "name": "_showRequired"
            },
            {
              "kind": "method",
              "name": "_renderFieldset",
              "parameters": [
                {
                  "name": "content"
                }
              ]
            },
            {
              "kind": "field",
              "name": "legend",
              "type": {
                "text": "string"
              },
              "default": "\"\""
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            }
          ],
          "parameters": [
            {
              "name": "superClass"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "fieldsetMixin",
          "declaration": {
            "name": "fieldsetMixin",
            "module": "dist/js/components/misc/fieldsetMixin.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/misc/form-control-registry.js",
      "declarations": [
        {
          "kind": "class",
          "description": "FormControlRegistry - Manages registration and operations on form controls\n\nThis utility helps manage collections of form controls and perform operations\non them, such as validation or resetting values.\n\nUse patterns:\n1. Create registry: const registry = new FormControlRegistry()\n2. Register controls: registry.register(element)\n3. Perform batch operations: registry.resetAll()",
          "name": "FormControlRegistry",
          "members": [
            {
              "kind": "method",
              "name": "register",
              "parameters": [
                {
                  "name": "element",
                  "description": "The form control to register",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "description": "Register a form control",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "unregister",
              "parameters": [
                {
                  "name": "element",
                  "description": "The form control to unregister",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "description": "Unregister a form control"
            },
            {
              "kind": "method",
              "name": "resetAll",
              "description": "Reset all registered controls to their initial state"
            },
            {
              "kind": "method",
              "name": "validateAll",
              "description": "Validate all registered controls",
              "return": {
                "type": {
                  "text": "Array"
                }
              }
            },
            {
              "kind": "method",
              "name": "_getElementValue",
              "parameters": [
                {
                  "name": "element"
                }
              ],
              "description": "Get the current value of an element",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_controls",
              "default": "new WeakMap()"
            },
            {
              "kind": "field",
              "name": "_controlOrder",
              "default": "new Set()"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FormControlRegistry",
          "declaration": {
            "name": "FormControlRegistry",
            "module": "dist/js/components/misc/form-control-registry.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/misc/form-item.js",
      "declarations": [
        {
          "kind": "mixin",
          "description": "",
          "name": "FormItem",
          "members": [
            {
              "kind": "field",
              "name": "_options",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_renderdOptions",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_input",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "_item",
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "_searchButton",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "properties",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ autocomplete: { type: String }, disabled: { type: Boolean }, hideLabel: { type: Boolean }, info: { type: String }, _hasInfo: { type: Boolean }, _infoOpen: { type: Boolean }, _optionItems: { type: Array }, _originalOptionItems: { type: Array }, _searchVisible: { type: Boolean, reflect: true }, _selectedOption: { type: Number }, _showOptions: { type: Boolean }, _optionSelected: { type: Boolean }, }",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "method",
              "name": "_updateOptions",
              "description": "Called when the options slot changes.\nGets all listem items an constructs an object.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_getList",
              "parameters": [
                {
                  "name": "elements",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Turn Nodelist into Array",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "method",
              "name": "showError",
              "parameters": [
                {
                  "name": "message"
                }
              ],
              "description": "Method to show error without going through errorMixin\nNow using ErrorStateController"
            },
            {
              "kind": "method",
              "name": "clearError",
              "description": "Method to clear error without going through errorMixin\nNow using ErrorStateController"
            },
            {
              "kind": "method",
              "name": "_renderOption",
              "parameters": [
                {
                  "name": "item"
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_highlightText",
              "parameters": [
                {
                  "name": "text",
                  "description": "The text to highlight",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "description": "Highlights the search term in text using mark tags",
              "return": {
                "type": {
                  "text": "String"
                }
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_toggleSearch",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_cancelSearch",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleChange",
              "parameters": [
                {
                  "name": "e",
                  "description": "Change Event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleInput",
              "parameters": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleBlur",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Custom blur event",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "method",
              "name": "_handleFocus",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Custom focus event",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "method",
              "name": "_handleInvalid",
              "parameters": [
                {
                  "name": "errormessage"
                }
              ],
              "description": "Custom invalid event",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "method",
              "name": "formAssociatedCallback",
              "parameters": [
                {
                  "name": "form"
                }
              ]
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "parameters": [
                {
                  "name": "disabled"
                }
              ]
            },
            {
              "kind": "method",
              "name": "formResetCallback"
            },
            {
              "kind": "method",
              "name": "_renderItem",
              "parameters": [
                {
                  "name": "content"
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "String"
              },
              "description": "Wert des Elements",
              "default": "''",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "autocomplete",
              "description": "autocomplete-Attribut in HTML",
              "type": {
                "text": "String"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "Boolean"
              },
              "description": "(In)aktives Feld",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "hideLabel",
              "type": {
                "text": "Boolean"
              },
              "description": "Label visuell verbergen",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "info",
              "description": "Infotext",
              "type": {
                "text": "String"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "_hasInfo",
              "type": {
                "text": "Boolean"
              },
              "description": "Is there info text?",
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_infoOpen",
              "type": {
                "text": "Boolean"
              },
              "description": "Is info text visible or not",
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_msgID",
              "type": {
                "text": "Boolean"
              },
              "description": "id to connect a form item to a message via aria-describedby",
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_selectedOption",
              "type": {
                "text": "Number"
              },
              "description": "Currently selected option",
              "privacy": "private",
              "default": "-1"
            },
            {
              "kind": "field",
              "name": "_searchVisible",
              "type": {
                "text": "Boolean"
              },
              "description": "Is the search field (if it is one) visible",
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_optionItems",
              "type": {
                "text": "Number"
              },
              "description": "List of options",
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "_originalOptionItems",
              "type": {
                "text": "Number"
              },
              "description": "Cloned list of options",
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "_showOptions",
              "type": {
                "text": "boolean"
              },
              "description": "Flag for showing options in comboboxes",
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_optionSelected",
              "type": {
                "text": "boolean"
              },
              "description": "Flag for determining whether a value was set by typing or by selecting an option",
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "static": true,
              "default": "true",
              "description": "Allow fields to participate in form submission and validation",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...s.shadowRootOptions, delegatesFocus: true, }",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "description": "Überprüft, ob ein Element valide ist.\n This method now uses the ErrorStateController for validation",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "method",
              "name": "_defineErrorMessages",
              "description": "Define some custom error messages based on error and input type",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "method",
              "name": "_setValidity",
              "description": "Allow custom element to participate in form validation",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "method",
              "name": "_renderLabel",
              "parameters": [
                {
                  "name": "label"
                },
                {
                  "name": "id"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "method",
              "name": "_showRequired",
              "description": "Show * or required text",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "method",
              "name": "_dispatchFormEvent",
              "parameters": [
                {
                  "name": "eventName"
                },
                {
                  "name": "detail",
                  "default": "{}"
                }
              ],
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "method",
              "name": "_dispatchCustomEvent",
              "parameters": [
                {
                  "name": "eventName"
                },
                {
                  "name": "detail",
                  "default": "{}"
                }
              ],
              "description": "Helper method to dispatch events consistently",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "method",
              "name": "reset",
              "description": "Reset the form control to its initial value",
              "privacy": "public",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "method",
              "name": "_renderWrapper",
              "parameters": [
                {
                  "name": "content"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "error",
              "description": "Fehlermeldung",
              "type": {
                "text": "String"
              },
              "default": "undefined",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "hasError",
              "type": {
                "text": "Boolean"
              },
              "description": "Is there an error?",
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "hideAsterisk",
              "type": {
                "text": "Boolean"
              },
              "description": "Text statt Sternchen darstellen",
              "default": "false",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "id",
              "description": "optionale ID",
              "type": {
                "text": "String"
              },
              "default": "undefined",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "description": "Name-Attribute in HTML",
              "type": {
                "text": "String"
              },
              "default": "undefined",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "String"
              },
              "description": "Bezeichnung des Eingabefeldes",
              "default": "\"\"",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "Boolean"
              },
              "description": "Pflichtfeld",
              "default": "false",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "requiredText",
              "type": {
                "text": "String"
              },
              "description": " Text für Pflichtfeld-Hinweis",
              "default": "\"Pflichtfeld\"",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "validate",
              "type": {
                "text": "Boolean"
              },
              "description": "Eingabefeld live validieren",
              "default": "false",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "_internals",
              "description": "Attach internals for form submission and validation",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "_slotController",
              "description": "Slotcontroller",
              "type": {
                "text": "class"
              },
              "privacy": "private",
              "default": "new SlotController(this)",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "_id",
              "description": "Random id",
              "type": {
                "text": "String"
              },
              "privacy": "private",
              "default": "`${randomHash()}`",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "_formId",
              "description": "Form id",
              "type": {
                "text": "String"
              },
              "privacy": "private",
              "default": "`wm-form-item-${this._id}`",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "hint",
              "description": "Hinweis",
              "type": {
                "text": "String"
              },
              "default": "undefined",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "_hasHint",
              "type": {
                "text": "Boolean"
              },
              "description": "Is there a hint?",
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "_errorController",
              "description": "Add error state controller for centralized error handling",
              "type": {
                "text": "ErrorStateController"
              },
              "privacy": "private",
              "default": "new ErrorStateController(this)",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            }
          ],
          "mixins": [
            {
              "name": "FormWrapper",
              "module": "/dist/js/components/misc/form-wrapper.js"
            }
          ],
          "parameters": [
            {
              "name": "superClass"
            }
          ],
          "events": [
            {
              "name": "eventName",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "name": "blur",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "name": "focus",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "name": "invalid",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "name": "reset",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FormItem",
          "declaration": {
            "name": "FormItem",
            "module": "dist/js/components/misc/form-item.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/misc/form-option.js",
      "declarations": [
        {
          "kind": "mixin",
          "description": "",
          "name": "FormOption",
          "members": [
            {
              "kind": "field",
              "name": "_items",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "properties",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ legend: { type: String }, labels: { type: String, reflect: true }, values: { type: String, reflect: true }, // Change this to properly handle both string and boolean values disabled: { type: String, reflect: true, attribute: 'disabled' }, indeterminate: { type: Boolean, reflect: true }, _options: { type: Array }, checked: { type: String, reflect: true }, }",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[ globalStyles, formStyles, formItemStyles, i` #hint { margin-block: var(--wm-spacing-xxs); } `, ]",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleEvent",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_validateOptions",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleBlur",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Custom blur event",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "method",
              "name": "_handleFocus",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Custom focus event",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "method",
              "name": "_handleInput",
              "parameters": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleClick",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "method",
              "name": "_handleChange",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "setOptions",
              "parameters": [
                {
                  "name": "arr",
                  "description": "Array mit Objekten",
                  "type": {
                    "text": "Array"
                  }
                }
              ],
              "description": "Optionen über Funktion setzen. Objekte mit text, value, checked, disabled"
            },
            {
              "kind": "method",
              "name": "getOptions",
              "description": "Optionen abrufen",
              "return": {
                "type": {
                  "text": "Array"
                }
              }
            },
            {
              "kind": "method",
              "name": "_validateInputArrays",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_setOptionViaAttributes",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_renderOptionContainer",
              "parameters": [
                {
                  "name": "noFieldset",
                  "default": "false"
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_renderItem",
              "parameters": [
                {
                  "name": "content"
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "legend",
              "type": {
                "text": "String"
              },
              "description": "Legende für das fieldset",
              "default": "\"\""
            },
            {
              "kind": "field",
              "name": "_options",
              "type": {
                "text": "array"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "labels",
              "type": {
                "text": "String"
              },
              "description": "Liste der Labels getrennt durch ;",
              "default": "\"\""
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "String"
              },
              "description": "Liste von true oder false-Werten getrennt durch ;",
              "default": "\"\""
            },
            {
              "kind": "field",
              "name": "values",
              "type": {
                "text": "String"
              },
              "description": "Liste der Werte getrennt durch ;",
              "default": "\"\""
            },
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "String"
              },
              "description": "Liste der ausgewählten Werte getrennt durch ;",
              "default": "\"\""
            },
            {
              "kind": "field",
              "name": "_item",
              "privacy": "private",
              "readonly": true,
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "static": true,
              "default": "true",
              "description": "Allow fields to participate in form submission and validation",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...s.shadowRootOptions, delegatesFocus: true, }",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "description": "Überprüft, ob ein Element valide ist.\n This method now uses the ErrorStateController for validation",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "method",
              "name": "_defineErrorMessages",
              "description": "Define some custom error messages based on error and input type",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "method",
              "name": "_setValidity",
              "description": "Allow custom element to participate in form validation",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "method",
              "name": "_renderLabel",
              "parameters": [
                {
                  "name": "label"
                },
                {
                  "name": "id"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "method",
              "name": "_showRequired",
              "description": "Show * or required text",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "method",
              "name": "_dispatchFormEvent",
              "parameters": [
                {
                  "name": "eventName"
                },
                {
                  "name": "detail",
                  "default": "{}"
                }
              ],
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "method",
              "name": "_dispatchCustomEvent",
              "parameters": [
                {
                  "name": "eventName"
                },
                {
                  "name": "detail",
                  "default": "{}"
                }
              ],
              "description": "Helper method to dispatch events consistently",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "method",
              "name": "_handleInvalid",
              "parameters": [
                {
                  "name": "errormessage"
                }
              ],
              "description": "Custom invalid event",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "method",
              "name": "reset",
              "description": "Reset the form control to its initial value",
              "privacy": "public",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "method",
              "name": "_renderWrapper",
              "parameters": [
                {
                  "name": "content"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "error",
              "description": "Fehlermeldung",
              "type": {
                "text": "String"
              },
              "default": "undefined",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "hasError",
              "type": {
                "text": "Boolean"
              },
              "description": "Is there an error?",
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "hideAsterisk",
              "type": {
                "text": "Boolean"
              },
              "description": "Text statt Sternchen darstellen",
              "default": "false",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "id",
              "description": "optionale ID",
              "type": {
                "text": "String"
              },
              "default": "undefined",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "description": "Name-Attribute in HTML",
              "type": {
                "text": "String"
              },
              "default": "undefined",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "String"
              },
              "description": "Wert des Elements",
              "default": "\"\"",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "String"
              },
              "description": "Bezeichnung des Eingabefeldes",
              "default": "\"\"",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "Boolean"
              },
              "description": "Pflichtfeld",
              "default": "false",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "requiredText",
              "type": {
                "text": "String"
              },
              "description": " Text für Pflichtfeld-Hinweis",
              "default": "\"Pflichtfeld\"",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "validate",
              "type": {
                "text": "Boolean"
              },
              "description": "Eingabefeld live validieren",
              "default": "false",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "_internals",
              "description": "Attach internals for form submission and validation",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "_slotController",
              "description": "Slotcontroller",
              "type": {
                "text": "class"
              },
              "privacy": "private",
              "default": "new SlotController(this)",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "_id",
              "description": "Random id",
              "type": {
                "text": "String"
              },
              "privacy": "private",
              "default": "`${randomHash()}`",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "_formId",
              "description": "Form id",
              "type": {
                "text": "String"
              },
              "privacy": "private",
              "default": "`wm-form-item-${this._id}`",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "hint",
              "description": "Hinweis",
              "type": {
                "text": "String"
              },
              "default": "undefined",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "_hasHint",
              "type": {
                "text": "Boolean"
              },
              "description": "Is there a hint?",
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "kind": "field",
              "name": "_errorController",
              "description": "Add error state controller for centralized error handling",
              "type": {
                "text": "ErrorStateController"
              },
              "privacy": "private",
              "default": "new ErrorStateController(this)",
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            }
          ],
          "events": [
            {
              "name": "change",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "eventName",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "name": "blur",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "name": "focus",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "name": "invalid",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            },
            {
              "name": "reset",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "FormWrapper",
                "module": "dist/js/components/misc/form-wrapper.js"
              }
            }
          ],
          "mixins": [
            {
              "name": "FormWrapper",
              "module": "/dist/js/components/misc/form-wrapper.js"
            }
          ],
          "parameters": [
            {
              "name": "superClass"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FormOption",
          "declaration": {
            "name": "FormOption",
            "module": "dist/js/components/misc/form-option.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/misc/form-state-manager.js",
      "declarations": [
        {
          "kind": "mixin",
          "description": "FormStateManager mixin - Provides consistent form reset behavior\n\nThis mixin handles common form state management tasks:\n- Storing initial values for reliable reset\n- Form association behavior\n- Centralized reset mechanism\n\nComponents using this mixin should:\n1. Initialize _initialValue in connectedCallback\n2. Implement _setValue or similar method for value updates\n3. Call super.formResetCallback() in their formResetCallback",
          "name": "FormStateManager",
          "members": [
            {
              "kind": "field",
              "name": "properties",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...superClass.properties, _initialValue: { state: true }, defaultValue: { attribute: false }, _componentState: { state: true }, _previousState: { state: true }, disabled: { type: Boolean, reflect: true }, hasError: { type: Boolean, reflect: true }, error: { type: String }, validate: { type: Boolean, reflect: true }, showErrors: { type: Boolean, reflect: true } }"
            },
            {
              "kind": "field",
              "name": "STATES",
              "static": true,
              "readonly": true
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ],
              "description": "Captures initial value from DOM after first render"
            },
            {
              "kind": "method",
              "name": "formResetCallback",
              "description": "Form reset callback - called by parent forms\nProvides standard reset behavior"
            },
            {
              "kind": "method",
              "name": "_resetToInitialValue",
              "description": "Fallback reset implementation",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_getInputElement",
              "description": "Helper method to find input element in shadow DOM",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_changeState",
              "parameters": [
                {
                  "name": "newState",
                  "description": "The target state",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "options",
                  "default": "{}",
                  "description": "Additional options for the transition",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "description": "Transitions the component to a new state",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleStateTransition",
              "parameters": [
                {
                  "name": "oldState",
                  "description": "Previous state",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "newState",
                  "description": "New state",
                  "type": {
                    "text": "String"
                  }
                },
                {
                  "name": "options",
                  "default": "{}",
                  "description": "Additional options",
                  "type": {
                    "text": "Object"
                  }
                }
              ],
              "description": "Handle component-specific behavior for state transitions",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_updateErrorState",
              "parameters": [
                {
                  "name": "errorMessage",
                  "description": "Error message to display",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "description": "Centralized method to update component error state",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_getFormControlElement",
              "description": "Returns the form control element from shadow DOM\nComponents should override this to return their specific control element",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_announceStateChange",
              "parameters": [
                {
                  "name": "state",
                  "description": "State to announce",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "description": "Announces state changes to screen readers",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ],
              "description": "Override of updated lifecycle to handle attribute/property changes"
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "description": "Standard validation method that respects component state",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "_performValidation",
              "description": "Component-specific validation logic\nShould be overridden by component implementations",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "parameters": [
                {
                  "name": "message",
                  "description": "Validation message",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "description": "Public method to set a custom validation message",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "parameters": [
                {
                  "name": "disabled",
                  "description": "Whether the control should be disabled",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Called when the element's form sets the disabled state"
            },
            {
              "kind": "field",
              "name": "_componentState",
              "privacy": "private",
              "description": "Current component state",
              "type": {
                "text": "String"
              }
            },
            {
              "kind": "field",
              "name": "_previousState",
              "type": {
                "text": "String"
              },
              "privacy": "private",
              "description": "Previous component state for transitions",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "Boolean"
              },
              "description": "Whether the component is disabled",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "hasError",
              "type": {
                "text": "Boolean"
              },
              "description": "Whether the component has a validation error",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "error",
              "type": {
                "text": "String"
              },
              "description": "Current error message",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "validate",
              "type": {
                "text": "Boolean"
              },
              "description": "Whether to validate on input",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "showErrors",
              "type": {
                "text": "Boolean"
              },
              "description": "Whether to show validation errors immediately",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_initialValue",
              "type": {
                "text": "String"
              },
              "description": "Initial value of the component",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "defaultValue",
              "type": {
                "text": "String"
              },
              "description": "Default value of the component",
              "default": "''"
            }
          ],
          "events": [
            {
              "type": {
                "text": "CustomEvent"
              }
            }
          ],
          "parameters": [
            {
              "name": "superClass"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FormStateManager",
          "declaration": {
            "name": "FormStateManager",
            "module": "dist/js/components/misc/form-state-manager.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/misc/form-text.js",
      "declarations": [
        {
          "kind": "mixin",
          "description": "",
          "name": "FormText",
          "members": [
            {
              "kind": "field",
              "name": "properties",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ announcementText: { type: String }, hideMaxlength: { type: Boolean }, maxlength: { type: Number }, placeholder: { type: String }, search: { type: String, reflect: true }, size: { type: String }, filter: { type: Boolean }, _highlightedOptionID: { type: String }, maxlengthText: { type: String }, info: { type: String }, _infoOpen: { type: Boolean }, validate: { type: Boolean, reflect: true }, showErrors: { type: Boolean, reflect: true } }"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "array"
              },
              "static": true,
              "default": "[globalStyles, formStyles, formItemStyles]"
            },
            {
              "kind": "field",
              "name": "_output",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_setAriaSelected",
              "parameters": [
                {
                  "name": "current",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleInput",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Close submenus automatically when leaving sub menu list using the keyboard",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_filterOptions",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "description": "Filter existing options in a filterable combobox",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_addEvents",
              "description": "Add click and key events for option list",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_markOption",
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "Number"
                  }
                }
              ],
              "description": "Highlight the current option in the list of options",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_clickOutSide",
              "parameters": [
                {
                  "name": "e"
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "hideOptions",
              "parameters": [
                {
                  "name": "setFocus",
                  "default": "true",
                  "description": "Fokus auf Input legen (true)",
                  "type": {
                    "text": "Boolean"
                  }
                }
              ],
              "description": "Liste in Combobox verbergen"
            },
            {
              "kind": "method",
              "name": "showOptions",
              "description": "Liste in Combobox anzeigen"
            },
            {
              "kind": "method",
              "name": "_announceOptions",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_toggleOptions",
              "description": "Toggle options",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_selectOption",
              "parameters": [
                {
                  "name": "cur"
                },
                {
                  "name": "elements",
                  "type": {
                    "text": "Node"
                  }
                }
              ],
              "description": "Turn Nodelist into Array",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_cancelSearch",
              "description": "Cancel search/reset filtering state when Escape is pressed.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_renderElement",
              "parameters": [
                {
                  "name": "content"
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_defineErrorMessages",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleValidation",
              "description": "Centralizes validation handling for consistent behavior",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "clearErrorState",
              "description": "Clear error state and validation message",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "_synchronizeErrorState",
              "parameters": [
                {
                  "name": "message",
                  "default": "''",
                  "description": "Error message or empty string to clear error",
                  "type": {
                    "text": "String"
                  }
                }
              ],
              "description": "Synchronizes the error state between component, underlying input,\nand form association API",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_performValidation",
              "description": "Override _performValidation from FormStateManager",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_getFormControlElement",
              "description": "Override _getFormControlElement from FormStateManager",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "announcementText",
              "type": {
                "text": "String"
              },
              "description": "Text, der angekündigt wird, wenn Optionen angezeigt werden",
              "default": "\"Suchvorschläge werden angezeigt. Verwenden Sie Pfeiltasten um zu navigieren\""
            },
            {
              "kind": "field",
              "name": "maxlength",
              "description": "Maximale Zeichenanzahl, die eingegeben werden darf",
              "type": {
                "text": "Number"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "placeholder",
              "description": "placeholder-Attribut in HTML",
              "type": {
                "text": "String"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "search",
              "description": "Art des Suchfeldes",
              "type": {
                "text": "'hidden'|'visible'|'hiddenmobile'"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "size",
              "description": "size-Attribute in HTML",
              "type": {
                "text": "String"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "filter",
              "type": {
                "text": "Boolean"
              },
              "description": "Liste in Combobox beim Tippen filtern",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "hideMaxlength",
              "type": {
                "text": "Boolean"
              },
              "description": "Verfügbare Zeichenanzahl verbergen",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_highlightedOptionID",
              "description": "id of the currently Highlight Option",
              "type": {
                "text": "String"
              },
              "privacy": "private",
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "maxlengthText",
              "type": {
                "text": "String"
              },
              "description": "Text for maxlength message",
              "default": "\"Es sind noch {remaining} Zeichen verfügbar\""
            },
            {
              "kind": "field",
              "name": "patternMismatchMessage",
              "type": {
                "text": "String"
              },
              "description": "Pattern validation message",
              "default": "\"Bitte geben Sie einen gültigen Wert ein\""
            },
            {
              "kind": "field",
              "name": "info",
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "_infoOpen",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "validate",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "showErrors",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            }
          ],
          "parameters": [
            {
              "name": "superClass"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FormText",
          "declaration": {
            "name": "FormText",
            "module": "dist/js/components/misc/form-text.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/misc/form-validation-controller.js",
      "declarations": [
        {
          "kind": "class",
          "description": "FormValidationController - Handles form validation logic as a reactive controller\n\nThis controller separates validation logic from the Form component following\nthe same pattern as ErrorStateController, allowing for better code organization\nand potential reuse.",
          "name": "FormValidationController",
          "members": [
            {
              "kind": "method",
              "name": "validate",
              "description": "Validate the entire form",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "_checkPreviouslyInvalidFields",
              "description": "Check fields that were previously invalid but might now be valid\nThis specifically helps with wm-select components that don't properly\ncommunicate their validation state changes",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_validateFormGroups",
              "parameters": [
                {
                  "name": "formGroups"
                },
                {
                  "name": "processedIds"
                },
                {
                  "name": "fieldsInGroups"
                },
                {
                  "name": "getDomPosition"
                }
              ],
              "description": "Validate all form groups",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_validateFields",
              "parameters": [
                {
                  "name": "fields"
                },
                {
                  "name": "processedIds"
                },
                {
                  "name": "fieldsInGroups"
                },
                {
                  "name": "formGroupIds"
                },
                {
                  "name": "getDomPosition"
                }
              ],
              "description": "Validate all individual form fields",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "setErrors",
              "parameters": [
                {
                  "name": "errors"
                }
              ],
              "description": "Set errors manually (e.g., from server-side validation)"
            },
            {
              "kind": "method",
              "name": "getErrors",
              "description": "Get current errors"
            },
            {
              "kind": "method",
              "name": "reset",
              "parameters": [
                {
                  "name": "preserveHistory",
                  "default": "false",
                  "description": "Whether to keep track of previous errors",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Reset validation state and clear errors"
            },
            {
              "kind": "method",
              "name": "hostConnected"
            },
            {
              "kind": "method",
              "name": "hostDisconnected"
            },
            {
              "kind": "field",
              "name": "host",
              "default": "host"
            },
            {
              "kind": "field",
              "name": "formControlRegistry",
              "default": "formControlRegistry"
            },
            {
              "kind": "field",
              "name": "errors",
              "type": {
                "text": "array"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "previousErrors",
              "type": {
                "text": "array"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "hasValidationError",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FormValidationController",
          "declaration": {
            "name": "FormValidationController",
            "module": "dist/js/components/misc/form-validation-controller.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/misc/form-wrapper.js",
      "declarations": [
        {
          "kind": "mixin",
          "description": "",
          "name": "FormWrapper",
          "members": [
            {
              "kind": "field",
              "name": "_item",
              "privacy": "private",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "static": true,
              "default": "true",
              "description": "Allow fields to participate in form submission and validation",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...s.shadowRootOptions, delegatesFocus: true, }",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "properties",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ error: { type: String }, hasError: { type: Boolean, reflect: true }, hideAsterisk: { type: Boolean }, id: { type: String, reflect: true }, hint: { type: String }, label: { type: String }, name: { type: String }, required: { type: Boolean }, requiredText: { type: String }, validate: { type: Boolean }, value: { type: String }, _hasHint: { type: Boolean }, _formId: { type: String, attribute: false }, _id: { type: String, attribute: false } }",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "firstUpdated",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "updated",
              "parameters": [
                {
                  "name": "changedProperties"
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "description": "Überprüft, ob ein Element valide ist.\n This method now uses the ErrorStateController for validation",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "_defineErrorMessages",
              "description": "Define some custom error messages based on error and input type",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_setValidity",
              "description": "Allow custom element to participate in form validation",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_renderLabel",
              "parameters": [
                {
                  "name": "label"
                },
                {
                  "name": "id"
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_showRequired",
              "description": "Show * or required text",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_dispatchFormEvent",
              "parameters": [
                {
                  "name": "eventName"
                },
                {
                  "name": "detail",
                  "default": "{}"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_dispatchCustomEvent",
              "parameters": [
                {
                  "name": "eventName"
                },
                {
                  "name": "detail",
                  "default": "{}"
                }
              ],
              "description": "Helper method to dispatch events consistently",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleBlur",
              "parameters": [
                {
                  "name": "e",
                  "description": "Blur Event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Custom blur event",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleFocus",
              "parameters": [
                {
                  "name": "e",
                  "description": "focus Event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Custom focus event",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleInvalid",
              "parameters": [
                {
                  "name": "errormessage"
                }
              ],
              "description": "Custom invalid event",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "reset",
              "description": "Reset the form control to its initial value",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "_renderWrapper",
              "parameters": [
                {
                  "name": "content"
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "error",
              "description": "Fehlermeldung",
              "type": {
                "text": "String"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "hasError",
              "type": {
                "text": "Boolean"
              },
              "description": "Is there an error?",
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "hideAsterisk",
              "type": {
                "text": "Boolean"
              },
              "description": "Text statt Sternchen darstellen",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "id",
              "description": "optionale ID",
              "type": {
                "text": "String"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "name",
              "description": "Name-Attribute in HTML",
              "type": {
                "text": "String"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "String"
              },
              "description": "Wert des Elements",
              "default": "\"\""
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "String"
              },
              "description": "Bezeichnung des Eingabefeldes",
              "default": "\"\""
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "Boolean"
              },
              "description": "Pflichtfeld",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "requiredText",
              "type": {
                "text": "String"
              },
              "description": " Text für Pflichtfeld-Hinweis",
              "default": "\"Pflichtfeld\""
            },
            {
              "kind": "field",
              "name": "validate",
              "type": {
                "text": "Boolean"
              },
              "description": "Eingabefeld live validieren",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_internals",
              "description": "Attach internals for form submission and validation",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_slotController",
              "description": "Slotcontroller",
              "type": {
                "text": "class"
              },
              "privacy": "private",
              "default": "new SlotController(this)"
            },
            {
              "kind": "field",
              "name": "_id",
              "description": "Random id",
              "type": {
                "text": "String"
              },
              "privacy": "private",
              "default": "`${randomHash()}`"
            },
            {
              "kind": "field",
              "name": "_formId",
              "description": "Form id",
              "type": {
                "text": "String"
              },
              "privacy": "private",
              "default": "`wm-form-item-${this._id}`"
            },
            {
              "kind": "field",
              "name": "hint",
              "description": "Hinweis",
              "type": {
                "text": "String"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "_hasHint",
              "type": {
                "text": "Boolean"
              },
              "description": "Is there a hint?",
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_errorController",
              "description": "Add error state controller for centralized error handling",
              "type": {
                "text": "ErrorStateController"
              },
              "privacy": "private",
              "default": "new ErrorStateController(this)"
            }
          ],
          "events": [
            {
              "name": "eventName",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "blur",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "focus",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "invalid",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "reset",
              "type": {
                "text": "Event"
              }
            }
          ],
          "parameters": [
            {
              "name": "superClass"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FormWrapper",
          "declaration": {
            "name": "FormWrapper",
            "module": "dist/js/components/misc/form-wrapper.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/misc/formValidation.js",
      "declarations": [
        {
          "kind": "function",
          "name": "validateInput",
          "parameters": [
            {
              "name": "inputElement",
              "description": "The input element to validate",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "name": "{ value, required, pattern, validator, errormessage }"
            },
            {
              "description": "Validation options",
              "name": "options",
              "type": {
                "text": "@param {string} options.value - The value to validate\n * @param {boolean} [options.required] - Whether the field is required\n * @param {string} [options.pattern] - RegExp pattern for validation\n * @param {Function} [options.validator] - Custom validator function\n * @param {string} [options.errormessage] - Custom error message to use\n * "
              }
            }
          ],
          "description": "Framework-agnostic validation function\n\nThis function validates form input values and returns appropriate error messages.\nIt works in conjunction with the broader error handling system:\n\n1. This function handles field-level validation and returns field error messages\n2. Form.js collects these errors and looks for summary-specific messages via 'summary-errormessage' attributes\n3. FormErrorsummary.js displays the errors, using summary-specific messages when available\n\nFor summary-specific error messages:\n- Add a 'summary-errormessage' attribute to the form field\n- The Field will show the regular 'errormessage'\n- The Error Summary will show the 'summary-errormessage' instead",
          "return": {
            "type": {
              "text": "string"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "validateInput",
          "declaration": {
            "name": "validateInput",
            "module": "dist/js/components/misc/formValidation.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/misc/image-zoom.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "WmImageZoom",
          "default": "function (options) { console.info('🌈 Image zoom initialisieren.'); this.image = { elem: options.img }; this.ready = false; setTimeout(() => { this.image.zoomedClass = options.zoomedClass; this.image.container = options.container; this.image.zoomEvent = options.zoomEvent; this.getImageData(); if (options.onReset) { resetCallback = options.onReset; } this.container = typeof options.container === 'string' ? document.querySelector(options.container) : options.container; this.addEvents(); console.info('✅ Image zoomt bereit.'); console.info(' '); this.ready = true; if (this.image.zoomEvent) { if (options.zoomEventType === 'dblclick') { this.zoomOnDoubleTap(this.image.zoomEvent); } else { this.zoomOnPinch(this.image.zoomEvent); } } }, 150); return this }"
        },
        {
          "kind": "function",
          "name": "preventPinchZoom",
          "parameters": [
            {
              "name": "e"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WmImageZoom",
          "declaration": {
            "name": "WmImageZoom",
            "module": "dist/js/components/misc/image-zoom.js"
          }
        },
        {
          "kind": "js",
          "name": "preventPinchZoom",
          "declaration": {
            "name": "preventPinchZoom",
            "module": "dist/js/components/misc/image-zoom.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/misc/radio-utils.js",
      "declarations": [
        {
          "kind": "function",
          "name": "processRadioOptions",
          "parameters": [
            {
              "name": "config",
              "description": "Options configuration",
              "type": {
                "text": "@param {String|Array} config.labels - Labels separated by semicolons or as an array\n * @param {String|Array} config.values - Values separated by semicolons or as an array\n * @param {String|Boolean|Array} config.disabled - Disabled states as string, boolean, or array\n * @param {String} config.type - Component type ('radio' or 'checkbox')\n * @param {String|Array} config.checked - Checked values as string or array\n * "
              }
            }
          ],
          "description": "Safely processes boolean options for radio buttons and checkboxes",
          "return": {
            "type": {
              "text": "Array"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "processRadioOptions",
          "declaration": {
            "name": "processRadioOptions",
            "module": "dist/js/components/misc/radio-utils.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/misc/shared-info.js",
      "declarations": [
        {
          "kind": "function",
          "name": "toggleInfo"
        },
        {
          "kind": "function",
          "name": "hasInfo"
        },
        {
          "kind": "function",
          "name": "renderInfoButton",
          "parameters": [
            {
              "name": "style"
            },
            {
              "name": "color",
              "default": "\"wasserblau\""
            }
          ]
        },
        {
          "kind": "function",
          "name": "renderInfoText"
        },
        {
          "kind": "mixin",
          "description": "",
          "name": "SharedInfoMixin",
          "members": [
            {
              "kind": "method",
              "name": "_toggleInfo"
            },
            {
              "kind": "field",
              "name": "hasInfo",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "_renderInfoButton",
              "parameters": [
                {
                  "name": "style"
                },
                {
                  "name": "color",
                  "default": "\"wasserblau\""
                }
              ]
            },
            {
              "kind": "method",
              "name": "_renderInfoText"
            }
          ],
          "parameters": [
            {
              "name": "BaseClass"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SharedInfoMixin",
          "declaration": {
            "name": "SharedInfoMixin",
            "module": "dist/js/components/misc/shared-info.js"
          }
        },
        {
          "kind": "js",
          "name": "hasInfo",
          "declaration": {
            "name": "hasInfo",
            "module": "dist/js/components/misc/shared-info.js"
          }
        },
        {
          "kind": "js",
          "name": "renderInfoButton",
          "declaration": {
            "name": "renderInfoButton",
            "module": "dist/js/components/misc/shared-info.js"
          }
        },
        {
          "kind": "js",
          "name": "renderInfoText",
          "declaration": {
            "name": "renderInfoText",
            "module": "dist/js/components/misc/shared-info.js"
          }
        },
        {
          "kind": "js",
          "name": "toggleInfo",
          "declaration": {
            "name": "toggleInfo",
            "module": "dist/js/components/misc/shared-info.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/misc/slot.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlotController",
          "members": [
            {
              "kind": "field",
              "name": "host"
            },
            {
              "kind": "method",
              "name": "hostConnected"
            },
            {
              "kind": "method",
              "name": "hostDisconnected"
            },
            {
              "kind": "method",
              "name": "hasNamedSlot",
              "parameters": [
                {
                  "name": "slotName"
                }
              ]
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SlotController",
          "declaration": {
            "name": "SlotController",
            "module": "dist/js/components/misc/slot.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/js/components/misc/utils.js",
      "declarations": [
        {
          "kind": "function",
          "name": "getNodeIndex",
          "parameters": [
            {
              "name": "elements"
            },
            {
              "name": "child"
            }
          ]
        },
        {
          "kind": "function",
          "name": "randomHash",
          "parameters": [
            {
              "name": "length",
              "default": "5"
            }
          ]
        },
        {
          "kind": "function",
          "name": "slug",
          "parameters": [
            {
              "name": "string"
            }
          ]
        },
        {
          "kind": "function",
          "name": "_stringToObject",
          "parameters": [
            {
              "name": "string"
            },
            {
              "name": "object"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "throttle",
          "default": "function (fn, delay) { let timer = null; return function () { const context = this; const args = arguments; clearTimeout(timer); timer = setTimeout(function () { fn.apply(context, args); }, delay); } }"
        },
        {
          "kind": "variable",
          "name": "isDoubleTap",
          "default": "function () { if (!tappedTwice) { tappedTwice = true; window.setTimeout(function () { tappedTwice = false; }, 300); return false } return true }"
        },
        {
          "kind": "variable",
          "name": "toggleScrollPrevention",
          "default": "function () { document.documentElement.style.overflow = document.documentElement.style.overflow === 'auto' ? 'hidden' : 'auto'; }"
        },
        {
          "kind": "variable",
          "name": "getFocusableChildren",
          "default": "function(parent) { return parent.querySelectorAll('input, wm-input, button, textarea, wm-textarea, select, wm-select, [contenteditable], a, [tabindex=\"0\"], details') }"
        },
        {
          "kind": "variable",
          "name": "removeEmptyFieldsFromObject",
          "default": "function(obj) { return Object.fromEntries(Object.entries(obj).filter(([_, v]) => v != null)); }"
        },
        {
          "kind": "function",
          "name": "debounce",
          "parameters": [
            {
              "name": "fn"
            },
            {
              "name": "delay",
              "default": "1000"
            }
          ]
        },
        {
          "kind": "function",
          "name": "removeDuplicateObjectByField",
          "parameters": [
            {
              "name": "array"
            },
            {
              "name": "field"
            }
          ]
        },
        {
          "kind": "function",
          "name": "dispatchCustomEvent",
          "parameters": [
            {
              "name": "element",
              "description": "The element to dispatch the event from",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "name": "eventName",
              "description": "The name of the event",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "detail",
              "default": "{}",
              "description": "The detail object for the event",
              "type": {
                "text": "Object"
              }
            }
          ],
          "description": "Dispatch a standardized custom event along with the native event"
        },
        {
          "kind": "function",
          "name": "validateField",
          "parameters": [
            {
              "name": "value"
            },
            {
              "name": "{ pattern, required, errorMsg }"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "_stringToObject",
          "declaration": {
            "name": "_stringToObject",
            "module": "dist/js/components/misc/utils.js"
          }
        },
        {
          "kind": "js",
          "name": "debounce",
          "declaration": {
            "name": "debounce",
            "module": "dist/js/components/misc/utils.js"
          }
        },
        {
          "kind": "js",
          "name": "dispatchCustomEvent",
          "declaration": {
            "name": "dispatchCustomEvent",
            "module": "dist/js/components/misc/utils.js"
          }
        },
        {
          "kind": "js",
          "name": "getFocusableChildren",
          "declaration": {
            "name": "getFocusableChildren",
            "module": "dist/js/components/misc/utils.js"
          }
        },
        {
          "kind": "js",
          "name": "getNodeIndex",
          "declaration": {
            "name": "getNodeIndex",
            "module": "dist/js/components/misc/utils.js"
          }
        },
        {
          "kind": "js",
          "name": "isDoubleTap",
          "declaration": {
            "name": "isDoubleTap",
            "module": "dist/js/components/misc/utils.js"
          }
        },
        {
          "kind": "js",
          "name": "randomHash",
          "declaration": {
            "name": "randomHash",
            "module": "dist/js/components/misc/utils.js"
          }
        },
        {
          "kind": "js",
          "name": "removeDuplicateObjectByField",
          "declaration": {
            "name": "removeDuplicateObjectByField",
            "module": "dist/js/components/misc/utils.js"
          }
        },
        {
          "kind": "js",
          "name": "removeEmptyFieldsFromObject",
          "declaration": {
            "name": "removeEmptyFieldsFromObject",
            "module": "dist/js/components/misc/utils.js"
          }
        },
        {
          "kind": "js",
          "name": "slug",
          "declaration": {
            "name": "slug",
            "module": "dist/js/components/misc/utils.js"
          }
        },
        {
          "kind": "js",
          "name": "throttle",
          "declaration": {
            "name": "throttle",
            "module": "dist/js/components/misc/utils.js"
          }
        },
        {
          "kind": "js",
          "name": "toggleScrollPrevention",
          "declaration": {
            "name": "toggleScrollPrevention",
            "module": "dist/js/components/misc/utils.js"
          }
        },
        {
          "kind": "js",
          "name": "validateField",
          "declaration": {
            "name": "validateField",
            "module": "dist/js/components/misc/utils.js"
          }
        }
      ]
    }
  ]
}
